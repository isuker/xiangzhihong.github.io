<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向志洪</title>
  <subtitle>这里只有代码相关，要了解更多 &gt;&gt;http://blog.csdn.net/xiangzhihong8</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://code.youmeek.com/"/>
  <updated>2017-03-23T07:07:26.523Z</updated>
  <id>http://code.youmeek.com/</id>
  
  <author>
    <name>向志洪</name>
    <email>1044817967@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL ES简介</title>
    <link href="http://code.youmeek.com/2017/03/05/OpenGL%20ES%E7%AE%80%E4%BB%8B/"/>
    <id>http://code.youmeek.com/2017/03/05/OpenGL ES简介/</id>
    <published>2017-03-04T16:00:00.000Z</published>
    <updated>2017-03-23T07:07:26.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在聊Android的View渲染流程中，通常会有一个比较核心的步骤：通过OpeGL ES接口调用GPU接口通知GPU绘制图形。其完整的流程：UI对象—-&gt;CPU处理为多维图形,纹理 —–通过OpeGL ES接口调用GPU—-&gt; GPU对图进行光栅化(Frame Rate ) —-&gt;硬件时钟(Refresh Rate)—-垂直同步—-&gt;投射到屏幕。</p>
<p><img src="http://img.blog.csdn.net/20170317165805869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>详解的绘制原理，后面会慢慢讲的。</p>
<h2 id="渲染的基础知识"><a href="#渲染的基础知识" class="headerlink" title="渲染的基础知识"></a>渲染的基础知识</h2><p>使用OpenGL ES，一般包括如下几个步骤：</p>
<p>　　（1）EGL初始化<br>　　（2）OpenGL ES初始化<br>　　（3）OpenGL ES设置选项&amp;绘制<br>　　（4）OpenGL ES资源释放（可选）<br>　　（5）EGL资源释放</p>
<p>Android提供的GLSurfaceView和Renderer自动完成了（1）（5）两个部分，这部分只需要开发者做一些简单配置即可。另外（4）这一步是可选的，因为随着EGL中上下文的销毁，openGL ES用到的资源也跟着释放了。因此只有（2）（3）是开发者必须做的。这大大简化了开发过程，但是灵活性也有所降低，利用这两个类是无法完成offscreen render的。要想完成offscreen render其实也很简单，相信大家也都猜到了，只要我们把（1）~（5）都自己完成就可以了。后续部分的代码大部分都是C/C++，少部分是Java。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>EGL的功能是将OpenGL ES API和设备当前的窗口系统粘合在一起，起到了沟通桥梁的作用。不同设备的窗口系统千变万化，但是OpenGL ES提供的API却是统一的，所以EGL需要协调当前设备的窗口系统和OpenGL ES。下面EGL初始化的代码我是用C++写的，然后通过jni调用。Android在Java层面上也提供了对应的Java接口函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">static EGLConfig eglConf;</div><div class="line">static EGLSurface eglSurface;</div><div class="line">static EGLContext eglCtx;</div><div class="line">static EGLDisplay eglDisp;</div><div class="line"></div><div class="line">JNIEXPORT void JNICALL Java_com_handspeaker_offscreentest_MyGles_init</div><div class="line">(JNIEnv*env,jobject obj)</div><div class="line">&#123;</div><div class="line">    // EGL config attributes</div><div class="line">    const EGLint confAttr[] =</div><div class="line">    &#123;</div><div class="line">            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,// very important!</div><div class="line">            EGL_SURFACE_TYPE,EGL_PBUFFER_BIT,//EGL_WINDOW_BIT EGL_PBUFFER_BIT we will create a pixelbuffer surface</div><div class="line">            EGL_RED_SIZE,   8,</div><div class="line">            EGL_GREEN_SIZE, 8,</div><div class="line">            EGL_BLUE_SIZE,  8,</div><div class="line">            EGL_ALPHA_SIZE, 8,// if you need the alpha channel</div><div class="line">            EGL_DEPTH_SIZE, 8,// if you need the depth buffer</div><div class="line">            EGL_STENCIL_SIZE,8,</div><div class="line">            EGL_NONE</div><div class="line">    &#125;;</div><div class="line">    // EGL context attributes</div><div class="line">    const EGLint ctxAttr[] = &#123;</div><div class="line">            EGL_CONTEXT_CLIENT_VERSION, 2,// very important!</div><div class="line">            EGL_NONE</div><div class="line">    &#125;;</div><div class="line">    // surface attributes</div><div class="line">    // the surface size is set to the input frame size</div><div class="line">    const EGLint surfaceAttr[] = &#123;</div><div class="line">             EGL_WIDTH,512,</div><div class="line">             EGL_HEIGHT,512,</div><div class="line">             EGL_NONE</div><div class="line">    &#125;;</div><div class="line">    EGLint eglMajVers, eglMinVers;</div><div class="line">    EGLint numConfigs;</div><div class="line"></div><div class="line">    eglDisp = eglGetDisplay(EGL_DEFAULT_DISPLAY);</div><div class="line">    if(eglDisp == EGL_NO_DISPLAY)</div><div class="line">    &#123;</div><div class="line">        //Unable to open connection to local windowing system</div><div class="line">        LOGI(&quot;Unable to open connection to local windowing system&quot;);</div><div class="line">    &#125;</div><div class="line">    if(!eglInitialize(eglDisp, &amp;eglMajVers, &amp;eglMinVers))</div><div class="line">    &#123;</div><div class="line">        // Unable to initialize EGL. Handle and recover</div><div class="line">        LOGI(&quot;Unable to initialize EGL&quot;);</div><div class="line">    &#125;</div><div class="line">    LOGI(&quot;EGL init with version %d.%d&quot;, eglMajVers, eglMinVers);</div><div class="line">    // choose the first config, i.e. best config</div><div class="line">    if(!eglChooseConfig(eglDisp, confAttr, &amp;eglConf, 1, &amp;numConfigs))</div><div class="line">    &#123;</div><div class="line">        LOGI(&quot;some config is wrong&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        LOGI(&quot;all configs is OK&quot;);</div><div class="line">    &#125;</div><div class="line">    // create a pixelbuffer surface</div><div class="line">    eglSurface = eglCreatePbufferSurface(eglDisp, eglConf, surfaceAttr);</div><div class="line">    if(eglSurface == EGL_NO_SURFACE)</div><div class="line">    &#123;</div><div class="line">        switch(eglGetError())</div><div class="line">        &#123;</div><div class="line">        case EGL_BAD_ALLOC:</div><div class="line">        // Not enough resources available. Handle and recover</div><div class="line">            LOGI(&quot;Not enough resources available&quot;);</div><div class="line">            break;</div><div class="line">        case EGL_BAD_CONFIG:</div><div class="line">        // Verify that provided EGLConfig is valid</div><div class="line">            LOGI(&quot;provided EGLConfig is invalid&quot;);</div><div class="line">            break;</div><div class="line">        case EGL_BAD_PARAMETER:</div><div class="line">        // Verify that the EGL_WIDTH and EGL_HEIGHT are</div><div class="line">        // non-negative values</div><div class="line">            LOGI(&quot;provided EGL_WIDTH and EGL_HEIGHT is invalid&quot;);</div><div class="line">            break;</div><div class="line">        case EGL_BAD_MATCH:</div><div class="line">        // Check window and EGLConfig attributes to determine</div><div class="line">        // compatibility and pbuffer-texture parameters</div><div class="line">            LOGI(&quot;Check window and EGLConfig attributes&quot;);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    eglCtx = eglCreateContext(eglDisp, eglConf, EGL_NO_CONTEXT, ctxAttr);</div><div class="line">    if(eglCtx == EGL_NO_CONTEXT)</div><div class="line">    &#123;</div><div class="line">        EGLint error = eglGetError();</div><div class="line">        if(error == EGL_BAD_CONFIG)</div><div class="line">        &#123;</div><div class="line">            // Handle error and recover</div><div class="line">            LOGI(&quot;EGL_BAD_CONFIG&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if(!eglMakeCurrent(eglDisp, eglSurface, eglSurface, eglCtx))</div><div class="line">    &#123;</div><div class="line">        LOGI(&quot;MakeCurrent failed&quot;);</div><div class="line">    &#125;</div><div class="line">    LOGI(&quot;initialize success!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码比较长，不过大部分都是检测当前函数调用是否出错的，核心的函数只有6个，只要它们的调用没有问题即可：</p>
<p>eglGetDisplay(EGL_DEFAULT_DISPLAY)</p>
<p>eglInitialize(eglDisp, &amp;eglMajVers, &amp;eglMinVers)</p>
<p>eglChooseConfig(eglDisp, confAttr, &amp;eglConf, 1, &amp;numConfigs)</p>
<p>eglCreatePbufferSurface(eglDisp, eglConf, surfaceAttr)</p>
<p>eglCreateContext(eglDisp, eglConf, EGL_NO_CONTEXT, ctxAttr)</p>
<p>eglMakeCurrent(eglDisp, eglSurface, eglSurface, eglCtx)</p>
<h3 id="OpenGL-ES初始化"><a href="#OpenGL-ES初始化" class="headerlink" title="OpenGL ES初始化"></a>OpenGL ES初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">JNIEXPORT void JNICALL Java_com_handspeaker_offscreentest_MyGles_draw</div><div class="line">(JNIEnv*env,jobject obj)</div><div class="line">&#123;</div><div class="line">    const char*vertex_shader=vertex_shader_fix;</div><div class="line">    const char*fragment_shader=fragment_shader_simple;</div><div class="line">    glPixelStorei(GL_UNPACK_ALIGNMENT,1);</div><div class="line">    glClearColor(0.0,0.0,0.0,0.0);</div><div class="line">    glEnable(GL_DEPTH_TEST);</div><div class="line">    glDepthFunc(GL_LESS);</div><div class="line">    glCullFace(GL_BACK);</div><div class="line">    glViewport(0,0,512,512);</div><div class="line">    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);</div><div class="line">    glShaderSource(vertexShader,1,&amp;vertex_shader,NULL);</div><div class="line">    glCompileShader(vertexShader);</div><div class="line">    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</div><div class="line">    glShaderSource(fragmentShader,1,&amp;fragment_shader,NULL);</div><div class="line">    glCompileShader(fragmentShader);</div><div class="line">    GLuint program = glCreateProgram();</div><div class="line">    glAttachShader(program, vertexShader);</div><div class="line">    glAttachShader(program, fragmentShader);</div><div class="line">    glLinkProgram(program);</div><div class="line">    glUseProgram(program);</div><div class="line">    GLuint aPositionLocation =glGetAttribLocation(program, &quot;a_Position&quot;);</div><div class="line">    glVertexAttribPointer(aPositionLocation,2,GL_FLOAT,GL_FALSE,0,tableVerticesWithTriangles);</div><div class="line">    glEnableVertexAttribArray(aPositionLocation);</div><div class="line">    //draw something</div><div class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</div><div class="line">    glDrawArrays(GL_TRIANGLES,0,6);</div><div class="line">    eglSwapBuffers(eglDisp,eglSurface);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="EGL资源释放"><a href="#EGL资源释放" class="headerlink" title="EGL资源释放"></a>EGL资源释放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JNIEXPORT void JNICALL Java_com_handspeaker_offscreentest_MyGles_release</div><div class="line">(JNIEnv*env,jobject obj)</div><div class="line">&#123;</div><div class="line">    eglMakeCurrent(eglDisp, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);</div><div class="line">    eglDestroyContext(eglDisp, eglCtx);</div><div class="line">    eglDestroySurface(eglDisp, eglSurface);</div><div class="line">    eglTerminate(eglDisp);</div><div class="line"></div><div class="line">    eglDisp = EGL_NO_DISPLAY;</div><div class="line">    eglSurface = EGL_NO_SURFACE;</div><div class="line">    eglCtx = EGL_NO_CONTEXT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="OpenGL-ES在Android中的应用"><a href="#OpenGL-ES在Android中的应用" class="headerlink" title="OpenGL ES在Android中的应用"></a>OpenGL ES在Android中的应用</h2><p>为了让你的控件能够显示在界面上，你必须创建一个view作为容器。而要想创建View容器，最直接的方式莫过于从GLSurfaceView和GLSurfaceView.Renderer分别派生一个类，实际的绘图动作都是在GLSurfaceView.Renderer里面发生的。对于一个全屏或近全屏的graphicsview，它是最好的选择。如果只是在某个小部分显示OpenGLES图形则可以考虑TextureView。当然你也可以直接继承自OpenGLES view创建一个View，不过一般都不会这么做。</p>
<h3 id="OpenGL-ES-的Android实例"><a href="#OpenGL-ES-的Android实例" class="headerlink" title="OpenGL ES 的Android实例"></a>OpenGL ES 的Android实例</h3><h4 id="1，在Manifest中声明使用OpenGLES"><a href="#1，在Manifest中声明使用OpenGLES" class="headerlink" title="1，在Manifest中声明使用OpenGLES"></a>1，在Manifest中声明使用OpenGLES</h4><p>为了能使用OpenGLES 2.0 API，你必须在你的manifest中添加以下声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:glEsVersion=&quot;0x00020000&quot; android:required=&quot;true&quot; /&gt;</div></pre></td></tr></table></figure>
<p>如果你的应用要使用纹理压缩功能，还必须声明设备需要支持什么样的压缩格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;supports-gl-texture android:name=&quot;GL_OES_compressed_ETC1_RGB8_texture&quot; /&gt;</div><div class="line">&lt;supports-gl-texture android:name=&quot;GL_OES_compressed_paletted_texture&quot; /&gt;</div></pre></td></tr></table></figure>
<h4 id="2-创建一个Activity"><a href="#2-创建一个Activity" class="headerlink" title="2,创建一个Activity"></a>2,创建一个Activity</h4><p>这个Activity和普通的activity一样，不过其使用的布局layout需要使用GLSurfaceView包裹。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;GLSurfaceView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">     ....</div><div class="line">&lt;/GLSurfaceView&gt;</div></pre></td></tr></table></figure>
<p>注:OpenGL ES 2.0需要Android2.2 (API Level 8) 及以上版本。</p>
<h4 id="3，构键GLSurfaceView对象"><a href="#3，构键GLSurfaceView对象" class="headerlink" title="3，构键GLSurfaceView对象"></a>3，构键GLSurfaceView对象</h4><p>GLSurfaceView中其实不需要做太多工作，实际的绘制任务都在GLSurfaceView.Renderer中了。这里我们可以直接使用GLSurfaceView。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class MyGLSurfaceView extends GLSurfaceView &#123;</div><div class="line"></div><div class="line">    public MyGLSurfaceView(Context context)&#123;</div><div class="line">        super(context);</div><div class="line">        //设置Renderer到GLSurfaceView</div><div class="line">        setRenderer(new MyRenderer());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用OpenGLES 2.0时，你必须在GLSurfaceView构造器中调用另外一个函数，它说明了你将要使用2.0版的API：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setEGLContextClientVersion(2);</div></pre></td></tr></table></figure>
<p>另一个可以添加的你的GLSurfaceView实现的可选的操作是设置render模式为只在绘制数据发生改变时才绘制view。使用GLSurfaceView.RENDERMODE_WHEN_DIRTY：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div></pre></td></tr></table></figure>
<p>####4， 构建一个Renderer类<br>Renderer类主要负责GLSurfaceView的绘制工作，它主要有三个方法：</p>
<ul>
<li>onSurfaceCreated()- 仅调用一次，用于设置view的OpenGLES环境。</li>
<li>onDrawFrame()- 每次View被重绘时被调用。</li>
<li>onSurfaceChanged()- 如果view的几和形状发生变化了就调用，例如当竖屏变为横屏时。</li>
</ul>
<p>如我们要在GLSurfaceView上画了一个灰色的背景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MyGL20Renderer implements GLSurfaceView.Renderer &#123;</div><div class="line"></div><div class="line">    public void onSurfaceCreated(GL10 unused, EGLConfig config) &#123;</div><div class="line">        //设置背景的颜色</div><div class="line">        GLES20.glClearColor(0.5f, 0.5f, 0.5f, 1.0f);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onDrawFrame(GL10 unused) &#123;</div><div class="line">        // 重绘背景色</div><div class="line">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onSurfaceChanged(GL10 unused, int width, int height) &#123;</div><div class="line">        GLES20.glViewport(0, 0, width, height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="OpenGL-ES渲染原理"><a href="#OpenGL-ES渲染原理" class="headerlink" title="OpenGL ES渲染原理"></a>OpenGL ES渲染原理</h1><p>首先来看一个OpenGL ES2.0的渲染原理图。</p>
<p><img src="http://img.blog.csdn.net/20170317205203849?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="1-VBO-VAO"><a href="#1-VBO-VAO" class="headerlink" title="1 VBO/VAO"></a>1 VBO/VAO</h2><p>VBO/VAO是cpu提供给GPU的顶点信息，包括了顶点的位置、颜色、纹理坐标（用于纹理贴图）等顶点信息。<br>VBO，全名Vertex Buffer Object。它是GPU里面的一块缓冲区，当我们需要传递数据的时候，可以先向GPU申请一块内存，然后往里面填充数据。最后，再通过调用glVertexAttribPointer把数据传递给Vertex Shader。<br>VAO，全名为Vertex Array Object，它的作用主要是记录当前有哪些VBO，每个VBO里面绑定的是什么数据，还有每一个vertex attribute绑定的是哪一个VBO。</p>
<h2 id="2-VertexShader（顶点着色器）"><a href="#2-VertexShader（顶点着色器）" class="headerlink" title="2 VertexShader（顶点着色器）"></a>2 VertexShader（顶点着色器）</h2><p>顶点着色器的输入数据由下面组成：</p>
<ul>
<li>Attributes：使用顶点数组封装每个顶点的数据，一般用于每个顶点都各不相同的变量，如顶点位置、颜色等</li>
<li>Uniforms：顶点着色器使用的常量数据，不能被着色器修改，一般用于对同一组顶点组成的单个3D物体中所有顶点都相同的变量，如当前光源的位置。</li>
<li>Samplers：这个是可选的，一种特殊的uniforms，表示顶点着色器使用的纹理。</li>
<li>Shader program：顶点着色器的源码或可执行文件，描述了将对顶点执行的操作。</li>
</ul>
<p>顶点着色器的输出：</p>
<ul>
<li>varying：在图元光栅化阶段，这些varying值为每个生成的片元进行计算，并将结果作为片元着色器的输入数据。从分配给每个顶点的原始varying值来为每个片元生成一个varying值的机制叫做插值。</li>
<li>另外，还有gl_postion、gl_FrontFacing和gl_PointSize。</li>
</ul>
<p>顶点着色器可用于传统的基于顶点的操作，例如：基于矩阵变换位置，进行光照计算来生成每个顶点的颜色，生成或者变换纹理坐标。<br>另外因为顶点着色器是由应用程序指定的，所以你可以用来进行任意自定义的顶点变换。</p>
<h2 id="3-PrimitiveAssembly（图元装配）："><a href="#3-PrimitiveAssembly（图元装配）：" class="headerlink" title="3 PrimitiveAssembly（图元装配）："></a>3 PrimitiveAssembly（图元装配）：</h2><p>顶点着色器下一个阶段是图元装配，这个阶段，把顶点着色器输出的顶点组合成图元。图元（primitive）是一个能用opengl es绘图命令绘制的几何体，包括三角形、直线或者点精灵等几何对象，绘图命令指定了一组顶点属性，描述了图元的几何形状和图元类型。在图元装配阶段，这些着色器处理过的顶点被组装到一个个独立的几何图元中，例如三角形、线、点精灵。对于每个图元，必须确定它是否位于视椎体内(3维空间显示在屏幕上的可见区域)，如果图元部分在视椎体中，需要进行裁剪，如果图元全部在视椎体外，则直接丢弃图元。裁剪之后，顶点位置转换成了屏幕坐标。背面剔除操作也会执行，它根据图元是正面还是背面，如果是背面则丢弃该图元。经过裁剪和背面剔除操作后，就进入渲染流水线的下一个阶段：光栅化。</p>
<h2 id="4-rasterization（光栅化）"><a href="#4-rasterization（光栅化）" class="headerlink" title="4 rasterization（光栅化）"></a>4 rasterization（光栅化）</h2><p><img src="http://img.blog.csdn.net/20170317211006433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>光栅化是将图元转化为一组二维片段的过程，然后，这些片段由片段着色器处理（片段着色器的输入）。这些二维片段代表着可在屏幕上绘制的像素。用于从分配给每个图元顶点的顶点着色器输出生成每个片段值的机制称作插值（Interpolation）。这句不是人话的话解释了一个问题，就是从cpu提供的分散的顶点信息是如何变成屏幕上密集的像素的，图元装配后顶点可以理解成变为图形，光栅化时可以根据图形的形状，插值出那个图形区域的像素（纹理坐标v_texCoord、颜色等信息）。注意，此时的像素并不是屏幕上的像素，是不带有颜色的。接下来的片段着色器完成上色的工作。总之，光栅化阶段把图元转换成片元集合，之后会提交给片元着色器处理，这些片元集合表示可以被绘制到屏幕的像素。</p>
<h2 id="5-FragmentShader（片段着色器）"><a href="#5-FragmentShader（片段着色器）" class="headerlink" title="5 FragmentShader（片段着色器）"></a>5 FragmentShader（片段着色器）</h2><p><img src="http://img.blog.csdn.net/20170317211119324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>片段着色器为片段（像素）上的操作实现了通用的可编程方法，光栅化输出的每个片段都执行一遍片段着色器，对光栅化阶段生成每个片段执行这个着色器，生成一个或多个（多重渲染）颜色值作为输出。<br>片元着色器对片元实现了一种通用的可编程方法，它对光栅化阶段产生的每个片元进行操作，需要的输入数据如下：</p>
<ul>
<li>Varying variables：顶点着色器输出的varying变量经过光栅化插值计算后产生的作用于每个片元的值。</li>
<li>Uniforms：片元着色器使用的常量数据</li>
<li>Samplers：一种特殊的uniforms，表示片元着色器使用的纹理。</li>
<li>Shader program：片元着色器的源码或可执行文件，描述了将对片元执行的操作。</li>
</ul>
<p>片元着色器也可以丢弃片元或者为片元生成一个颜色值，保存到内置变量gl_FragColor。光栅化阶段产生的颜色、深度、模板和屏幕坐标(Xw, Yw)成为流水线中pre-fragment阶段(FragmentShader之后)的输入。</p>
<p>##６Per-Fragment Operations(逐个片元操作阶段)</p>
<p><img src="http://img.blog.csdn.net/20170317211329575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>片元着色器之后就是逐个片元操作阶段，包括一系列的测试阶段。一个光栅化阶段产生的具有屏幕坐标(Xw, Yw)的片元，只能修改framebuffer(帧缓冲)中位置在(Xw, Yw)的像素。</p>
<p>上图显示了Opengl es 2.0逐片元操作过程：</p>
<ul>
<li>Pixel ownership test：像素所有权测试决定framebuffer中某一个(Xw,Yw)位置的像素是否属于当前Opengl ES的context，比如：如果一个Opengl  ES帧缓冲窗口被其他窗口遮住了，窗口系统将决定被遮住的像素不属于当前Opengl ES的context，因此也就不会被显示。</li>
<li>Scissor test：裁剪测试决定位置为(Xw, Yw)的片元是否位于裁剪矩形内，如果不在，则被丢弃。</li>
<li>Stencil and depth tests：模板和深度测试传入片元的模板和深度值，决定是否丢弃片元。</li>
<li>Blending：将新产生的片元颜色值和framebuffer中某个(Xw, Yw)位置存储的颜色值进行混合。</li>
<li>Dithering：抖动可以用来最大限度的减少使用有限精度存储颜色值到framebuffer的工件。</li>
<li>逐片元操作之后，片元要么被丢弃，要么一个片元的颜色，深度或者模板值被写入到framebuffer的(Xw,Yw)位置，不过是否真的会写入还得依赖于write masks启用与否。write masks能更好的控制颜色、深度和模板值写入到合适的缓冲区。例如：颜色缓冲区中的write mask可以被设置成没有红色值写入到颜色缓冲区。另外，Opengl ES 2.0提framebuffer中获取像素的接口，不过需要记住的是像素只能从颜色缓冲区读回，深度和模板值不能读回。</li>
</ul>
<p>参考：<br>OpenGL渲染流程 <a href="http://www.cnblogs.com/BigFeng/p/5068715.html" target="_blank" rel="external">http://www.cnblogs.com/BigFeng/p/5068715.html</a><br>OpenGL ES 2.0渲染管线 <a href="http://codingnow.cn/opengles/1504.html" target="_blank" rel="external">http://codingnow.cn/opengles/1504.html</a><br>OpenGL ES 2.0可编程管道 <a href="http://www.cnblogs.com/listenheart/p/3292672.html" target="_blank" rel="external">http://www.cnblogs.com/listenheart/p/3292672.html</a><br>OpenGL ES 2.0编程基础 <a href="http://blog.csdn.net/iispring/article/details/7649628" target="_blank" rel="external">http://blog.csdn.net/iispring/article/details/7649628</a><br>OpenGL-渲染管线的流程 <a href="http://www.cnblogs.com/zhanglitong/p/3238989.html" target="_blank" rel="external">http://www.cnblogs.com/zhanglitong/p/3238989.html</a></p>]]></content>
    
    <summary type="html">
    
      OpenGL ES简介
    
    </summary>
    
      <category term="OpenGL" scheme="http://code.youmeek.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://code.youmeek.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>前端知识库</title>
    <link href="http://code.youmeek.com/2017/02/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    <id>http://code.youmeek.com/2017/02/28/前端知识库/</id>
    <published>2017-02-27T16:00:00.000Z</published>
    <updated>2017-03-02T12:10:14.646Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发全面知识库，包括HTML5，CSS3和js的基本框架知识，以及DOM和BOM操作的基础知识和一些基本工具和IDE。学习本篇，你将了解到以下知识。</p>
<p><img src="http://img.blog.csdn.net/20170302161024136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h1 id="核心-Core"><a href="#核心-Core" class="headerlink" title="核心 Core"></a>核心 Core</h1><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><p>W3C <a href="http://www.w3school.com.cn/html5/" target="_blank" rel="external">http://www.w3school.com.cn/html5/</a><br>W3C <a href="https://www.w3.org/html/ig/zh/wiki/HTML5" target="_blank" rel="external">https://www.w3.org/html/ig/zh/wiki/HTML5</a><br>菜鸟教程 <a href="http://www.runoob.com/html/html5-intro.html" target="_blank" rel="external">http://www.runoob.com/html/html5-intro.html</a><br>HTML5中文门户 <a href="http://www.html5cn.org/" target="_blank" rel="external">http://www.html5cn.org/</a></p>
<h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><p>W3C CSS教程 <a href="http://www.w3school.com.cn/css/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/css/index.asp</a><br>W3C CSS3教程 <a href="http://www.w3school.com.cn/css3/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/css3/index.asp</a><br>菜鸟教程CSS教程 <a href="http://www.runoob.com/css/css-tutorial.html" target="_blank" rel="external">http://www.runoob.com/css/css-tutorial.html</a><br>菜鸟教程CSS3教程 <a href="http://www.runoob.com/css3/css3-tutorial.html" target="_blank" rel="external">http://www.runoob.com/css3/css3-tutorial.html</a><br>CSS参考手册 <a href="http://css.doyoe.com/" target="_blank" rel="external">http://css.doyoe.com/</a></p>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>W3C <a href="http://www.w3school.com.cn/js/" target="_blank" rel="external">http://www.w3school.com.cn/js/</a><br>菜鸟教程 <a href="http://www.runoob.com/js/js-tutorial.html" target="_blank" rel="external">http://www.runoob.com/js/js-tutorial.html</a><br>廖雪峰js教程 <a href="http://www.liaoxuefeng.com" target="_blank" rel="external">http://www.liaoxuefeng.com</a><br>js标准参考教程-阮一峰<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">http://javascript.ruanyifeng.com/</a></p>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>W3C <a href="http://www.w3school.com.cn/jquery/" target="_blank" rel="external">http://www.w3school.com.cn/jquery/</a><br>菜鸟教程 <a href="http://www.runoob.com/jquery/jquery-tutorial.html" target="_blank" rel="external">http://www.runoob.com/jquery/jquery-tutorial.html</a><br>极客学院 <a href="http://wiki.jikexueyuan.com/project/jquery-tutorial/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/jquery-tutorial/</a><br>廖雪峰 <a href="http://www.liaoxuefeng.com/wiki/" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/</a><br>参考手册 <a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="external">http://www.css88.com/jqapi-1.9/</a><br>参考手册 <a href="http://www.runoob.com/manual/jquery/" target="_blank" rel="external">http://www.runoob.com/manual/jquery/</a></p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>阮一峰ES6 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a><br>极客学院 <a href="http://wiki.jikexueyuan.com/project/es6/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/es6/</a><br>JavaScript 标准参考　阮一峰<a href="http://javascript.ruanyifeng.com/advanced/ecmascript6.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/advanced/ecmascript6.html</a></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://github.com/parallel-js/parallel.js" target="_blank" rel="external">parallel.js</a>: 前后端通用的一个并行库<br><a href="https://github.com/madrobby/zepto" target="_blank" rel="external">zepto</a>: 用于现代浏览器的兼容 jQuery 的库<br><a href="https://github.com/totorojs/totoro" target="_blank" rel="external">totoro</a>: 稳定的跨浏览器测试工具<br><a href="https://github.com/Zhouzi/TheaterJS" target="_blank" rel="external">TheaterJS</a>: 一个用于模拟人输入状态的 JS 库<br><a href="https://github.com/markdalgleish/stellar.js" target="_blank" rel="external">stellar.js</a>: 前端用于实现异步滚动效果的库，现已不再维护<br><a href="https://github.com/Prinzhorn/skrollr" target="_blank" rel="external">skrollr</a>: 另一款实现一步滚动的开源库，使用人数众多，可实现各种狂拽酷炫掉渣天的前端效果，看真相<br><a href="https://github.com/nolimits4web/Framework7" target="_blank" rel="external">Framework7</a>: 前端框架，是开发人员可以基于 web 技术构建 IOS7 程序<br><a href="https://github.com/JexCheng/regulex" target="_blank" rel="external">regulex</a>: 用于生成 正则表达式 的可视化流程图<br><a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="external">markdown-it</a>: 新型 Markdown 解析器，快速，支持插件<br><a href="https://github.com/sindresorhus/multiline" target="_blank" rel="external">multiline</a>: 用于 Javascript 中的多行文本，类似于 Ruby 的 HERE Doc<br><a href="https://github.com/sindresorhus/screenfull.js" target="_blank" rel="external">screenfull.js</a>: 全屏插件，支持各大浏览器<br><a href="https://github.com/olivernn/lunr.js" target="_blank" rel="external">lunr.js</a>: 类似于 Solr, 但是用于浏览器上的全文搜索引擎，可以为 JSON 创建索引，离线也可以使用<br><a href="https://github.com/jeresig/jquery.hotkeys" target="_blank" rel="external">jquery.hotkeys</a>: jQuery 插件，用于绑定热键<br><a href="https://github.com/breach/breach_core" target="_blank" rel="external">breach_core</a>: Javascript 编写的 Browser (浏览器)<br><a href="https://github.com/zmmbreeze/octocard" target="_blank" rel="external">octocard</a>: 用于生成 Github 信息卡片的库<br><a href="https://github.com/lepture/github-cards" target="_blank" rel="external">github-cards</a>: 用于生成 Github 信息卡片的库<br><a href="https://github.com/openexchangerates/money.js" target="_blank" rel="external">money.js</a>: 轻量级货币转换库，web 和 node 皆可用<br><a href="https://github.com/openexchangerates/accounting.js" target="_blank" rel="external">accounting.js</a>: 轻量级的数字、货币转换库<br><a href="https://github.com/mgechev/javascript-algorithms" target="_blank" rel="external">javascript-algorithms</a>: Javascript 实现的各种算法集合<br><a href="https://github.com/dtao/lazy.js" target="_blank" rel="external">lazy.js</a>: 类似于 underscore, 但是会延迟执行，某些场景下，性能会有很大的提升<br><a href="https://github.com/seajs/seajs" target="_blank" rel="external">seajs</a>: 前端模块加载器，解决模块化、依赖等问题<br><a href="https://github.com/davist11/jQuery-One-Page-Nav" target="_blank" rel="external">jQuery-One-Page-Nav</a>: 单页应用中一个用于处理导航栏的库<br><a href="https://github.com/js-js/js.js" target="_blank" rel="external">js.js</a>: Javascript 实现的 javascript JIT<br><a href="https://github.com/jquery/jquery-ui" target="_blank" rel="external">jquery-ui</a>: jQuery 团队开发的 UI 相关的前端库，功能强大<br><a href="https://github.com/tastejs/todomvc" target="_blank" rel="external">todomvc</a>: 分别基于 AngularJS/EmberJS/Backbone等实现的 TODO List, 帮助开发者选择前端 MVC 库<br><a href="https://github.com/localForage/localForage" target="_blank" rel="external">localForage</a>: Mozilla 出品，用于离线存储，基于IndexedDB, WebSQL 或者 localStorage, 提供一致的接口<br><a href="https://github.com/Olical/EventEmitter" target="_blank" rel="external">EventEmitter</a>: 浏览器版的 EventEmitter<br><a href="https://github.com/marioizquierdo/jquery.serializeJSON" target="_blank" rel="external">jquery.serializeJSON</a>: jQuery 插件，用于将 form 表单序列化成 JSON 数据<br><a href="https://github.com/knockout/knockout" target="_blank" rel="external">knockout</a>: 前端 MVVM 框架，用于开发富前端应用<br><a href="https://github.com/knsv/mermaid" target="_blank" rel="external">mermaid</a>: 可以根据文本生成流程图，类似于 Markdown 的语法<br><a href="https://github.com/bramp/js-sequence-diagrams" target="_blank" rel="external">js-sequence-diagrams</a>: 另一款可以根据文本生成流程图的库，类似于 Markdown 的语法<br><a href="https://github.com/facebook/flow" target="_blank" rel="external">flow</a>: 一个用来检测 Javascript 语法错误的库， Facebook 出品<br><a href="https://github.com/jaukia/zoomooz" target="_blank" rel="external">zoomooz</a>: jQuery 插件，用来处理浏览器缩放<br><a href="https://github.com/fancyapps/fancyBox" target="_blank" rel="external">fancyBox</a>: 一个用于放大缩小图片、Web 内容或者多媒体元素的库，优雅大方<br><a href="https://github.com/lhorie/mithril.js" target="_blank" rel="external">mithril.js</a>: 轻量型前端 MVC 框架，部分使用场景下性能优于 Angular.js 和 React<br><a href="https://github.com/jashkenas/backbone" target="_blank" rel="external">backbone</a>: 强大的前端 MVC 库，鼻祖级前端库，最初为了配合 Rails 来模块化前端应用，兼容性良好 (兼容到 IE6)，插件丰富，性能良好<br><a href="https://github.com/jasny/jquery.smartbanner" target="_blank" rel="external">jquery.smartbanner</a>: smartbanner 是从 IOS6 开始支持的一个新特性, 这个插件提供了对早期 IOS4/5 和 Android 的支持<br><a href="https://github.com/flesler/jquery.scrollTo" target="_blank" rel="external">jquery.scrollTo</a>: 在页面上以一个元素为起始以动画的方式移动(ScrollTo)到另一个元素， 支持回退等<br><a href="https://github.com/vitch/jScrollPane" target="_blank" rel="external">jScrollPane</a>: 自定义的滚动条，让所有浏览器都显示一样的滚动条<br><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="external">onepage-scroll</a>: 提供类似于 iPhone6 展示页类似的效果，适用于单页应用，兼容到 IE8<br><a href="https://github.com/sakabako/scrollMonitor" target="_blank" rel="external">scrollMonitor</a>: 前端插件用来监控元素的滚动事件(进入、退出等)，性能很好<br><a href="https://github.com/janpaepke/ScrollMagic" target="_blank" rel="external">ScrollMagic</a>: 神奇的滚动交互效果插件，可以在滚动的过程中设置各种各样的动态效果<br><a href="https://github.com/infinite-scroll/infinite-scroll" target="_blank" rel="external">infinite-scroll</a>: 滚动加载，滚动到最下到自动加载， Paul Irish 大神之作<br><a href="https://github.com/LeaVerou/animatable" target="_blank" rel="external">animatable</a>: 仅仅依靠 border-width 和 background-position 实现的各种动态效果，看真相<br><a href="https://github.com/terrymun/Fluidbox" target="_blank" rel="external">Fluidbox</a>: 页面上内嵌图片的放大缩小效果，类似于 Medium 中的效果<br><a href="https://github.com/jquery-validation/jquery-validation" target="_blank" rel="external">jquery-validation</a>: jQuery 的一个插件，用于校验 Form 表单<br><a href="https://github.com/dfcb/BigVideo.js" target="_blank" rel="external">BigVideo.js</a>: jQuery 的一个插件, 用于实现大背景(视频、图片)效果<br><a href="https://github.com/kripken/emscripten" target="_blank" rel="external">emscripten</a>: 一款基于 LLVM, 可以将 C/C++ 转换成 Javascript 的工具，使得 Javascript 可以近乎 Native 的速度<br><a href="https://github.com/kazuhikoarase/qrcode-generator" target="_blank" rel="external">qrcode-generator</a>: 各种语言的二维码生成工具<br><a href="https://github.com/matthewhudson/device.js" target="_blank" rel="external">device.js</a>: 一个可以检测设备类型的工具，可以让我们根据不同的设备来为其定制响应的 Javascript 和 CSS<br><a href="https://github.com/jeromeetienne/jquery-qrcode" target="_blank" rel="external">jquery-qrcode</a>: jQuery 插件，用来生成二维码<br><a href="https://github.com/germanysbestkeptsecret/Wookmark-jQuery" target="_blank" rel="external">Wookmark-jQuery</a>: jQuery 的一个插件，可以用来实现瀑布流的效果<br><a href="https://github.com/metafizzy/isotope" target="_blank" rel="external">isotope</a>: 可以用来过滤、排列布局，实现美观的动态布局切换效果，Demo<br><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="external">lazysizes</a>: 功能强大的图片延迟加载工具，可以首先加载一个低质量的图片，然后再加载高质量的图片<br><a href="https://github.com/kimmobrunfeldt/progressbar.js" target="_blank" rel="external">progressbar.js</a>: 简洁美观的进度条，扁平化<br><a href="https://github.com/pigshell/pigshell" target="_blank" rel="external">pigshell</a>: 一个由 Javascript 实现的Shell, 将互联网当做一个大的文件系统, 通过 cd/ls/cat…..等命令, 可以访问 Facebook/Twitter/Google Drive 等网络服务<br><a href="https://github.com/bgrins/spectrum" target="_blank" rel="external">spectrum</a>: Js实现的颜色选择器 (Colorpicker)<br><a href="https://github.com/hilios/jQuery.countdown" target="_blank" rel="external">jQuery.countdown</a>: jQuery 倒计时插件<br><a href="https://github.com/summernote/summernote" target="_blank" rel="external">summernote</a>: WYSIWYG 富文本编辑器<br><a href="https://github.com/LeaVerou/awesomplete" target="_blank" rel="external">awesomplete</a>: 非常轻型的一个自动补全 JS 库, 没有任何依赖, 配置简单, 美观<br><a href="https://github.com/abpetkov/switchery" target="_blank" rel="external">switchery</a>: IOS 7 上 Switch 的 JS 实现, 支持 IE8 及以上浏览器<br><a href="https://github.com/basecamp/trix" target="_blank" rel="external">trix</a>: Basecamp 公司出品的富文本编辑器，简洁小巧<br><a href="https://github.com/branding-fe/sensor" target="_blank" rel="external">sensor.js</a>: 在智能移动设备浏览器上，通过HTML5的api使用移动设备的功能。定位、运动、倾斜等<br><a href="https://github.com/maciejczyzewski/hyhyhy" target="_blank" rel="external">hyhyhy</a>: 用于创建 基于 HTML5 的 演示文稿<br><a href="https://github.com/brutaldesign/swipebox" target="_blank" rel="external">swipebox</a>: jQuery 插件，用于处理移动端的触摸事件<br><a href="https://github.com/mailru/FileAPI" target="_blank" rel="external">FileAPI</a>: 前端用户处理文件（拖放、多文件上传等）<br><a href="https://github.com/RubaXa/Sortable" target="_blank" rel="external">Sortable</a>: 现代浏览器上用于实现元素拖拽排序的功能，支持 Meteor, AngularJS, React，不依赖 jQuery<br><a href="https://github.com/nolimits4web/Swiper" target="_blank" rel="external">Swiper</a>: 用于实现浏览器上的滑动切换效果，支持硬件加速<br><a href="https://github.com/liabru/matter-js" target="_blank" rel="external">matter-js</a>: 2D 物理效果引擎，碰撞、弹跳等<br><a href="https://github.com/senchalabs/jQTouch" target="_blank" rel="external">jQTouch</a>: 用于辅助创建手机端的 Web 应用，支持主题、Zepto.js 等<br><a href="https://github.com/daniel-lundin/snabbt.js" target="_blank" rel="external">snabbt.js</a>: 一个利用 Javascript 和 CSS transform 的 animation 库<br><a href="https://github.com/c3js/c3" target="_blank" rel="external">c3</a>: 基于 D3 的图表库<br><a href="https://github.com/ecomfe/echarts" target="_blank" rel="external">echarts</a>: 企业级图表库，百度开发<br><a href="https://github.com/wagerfield/parallax" target="_blank" rel="external">parallax.js</a>: 一个用于响应智能手机 orientation 的库<br><a href="https://github.com/benbarnett/jQuery-Animate-Enhanced" target="_blank" rel="external">jQuery-Animate-Enhanced</a>: jQuery 动画库的一个增强，用于现代浏览器<br><a href="https://github.com/Voog/wysihtml" target="_blank" rel="external">wysihtml</a>: 富文本编辑器，适用于现代浏览器<br><a href="https://github.com/pornel/slip" target="_blank" rel="external">slip</a>: 一个通过滑动或者拖拽来操控列表的库<br><a href="https://github.com/evil-icons/evil-icons" target="_blank" rel="external">evil-icons</a>: 一个矢量图库，提供 Ruby/Node 等支持<br><a href="https://github.com/dimsemenov/PhotoSwipe" target="_blank" rel="external">PhotoSwipe</a>: JS 的一个图片展示库<br><a href="https://github.com/zzarcon/focusable" target="_blank" rel="external">focusable</a>: 是页面上一个元素高亮的库，有图有真相<br><a href="https://github.com/paulrouget/firefox.html" target="_blank" rel="external">firefox.html</a>: Firefox 在浏览器端的实现 —— HTML 版的 Firefox<br><a href="https://github.com/jquery/jquery-mobile" target="_blank" rel="external">jquery-mobile</a>: jQuery 团队开发的用于辅助手机端 web app 开发的库，基于 HTML5<br><a href="https://github.com/mcasimir/mobile-angular-ui" target="_blank" rel="external">mobile-angular-ui</a>: 基于angularjs和bootstarp的web app开发框架<br><a href="https://github.com/taye/interact.js" target="_blank" rel="external">interact.js</a>: 一个适用于现代浏览器的，用于处理 手势、拖放、缩放等的库<br><a href="https://github.com/facebook/rebound-js" target="_blank" rel="external">rebound-js</a>: 实现部分物理效果，Facebook 出品<br><a href="https://github.com/addyosmani/basket.js" target="_blank" rel="external">basket.js</a>: 基于 LocalStorage 的资源加载器，可以用来缓存 script 和 css, 手机端使用速度快于浏览器直接缓存<br><a href="https://github.com/cubiq/iscroll" target="_blank" rel="external">iscroll</a>: 高性能的滚动(scroll)处理库，功能强大，支持各种事件，不依赖任何的库，且插件丰富, 大众点评的手机端列表滚动就是用这个库处理的<br><a href="https://github.com/mozilla/metrics-graphics" target="_blank" rel="external">metrics-graphics</a>: 基于 D3 的图表库，简洁、高效，Mozilla 出品<br><a href="https://github.com/paypal/accessible-html5-video-player" target="_blank" rel="external">accessible-html5-video-player</a>: Paypal 出品的 Video 播放器<br><a href="https://github.com/jxnblk/loading" target="_blank" rel="external">loading</a>: 几种 Loading 效果，基于 SVG<br><a href="https://github.com/mintchaos/flippant.js" target="_blank" rel="external">flippant.js</a>: 一款能够漂亮的网页元素翻转效果库，代码许久不更新，不过作为源码学习还是不错的<br><a href="https://github.com/visionmedia/move.js" target="_blank" rel="external">move.js</a>: 基于 CSS3 的前端动画框架<br><a href="https://github.com/jlmakes/scrollreveal" target="_blank" rel="external">scrollReveal.js</a>: 使元素以非常酷帅的方式进入画布 (Viewpoint)，看 Demo<br><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="external">Modernizr</a>: 一个用来检测 HTML5 和 CSS3 支持情况的库<br><a href="https://github.com/zurb/foundation-sites" target="_blank" rel="external">foundation</a>: 另一款前端模版框架，类似于 Bootstrap<br><a href="https://github.com/designmodo/Flat-UI" target="_blank" rel="external">Flat-UI</a>: Bootstrap 的一款主题，简洁美观<br><a href="https://github.com/fronteed/iCheck" target="_blank" rel="external">iCheck</a>: 一款漂亮的 Checkbox 插件<br><a href="https://github.com/lyfeyaj/Swipe" target="_blank" rel="external">Swipe</a>: 非常轻量级的一个图片滑动切换效果库, 性能良好, 尤其是对手机的支持, 压缩后的大小约 5kb<br><a href="https://github.com/kenwheeler/slick" target="_blank" rel="external">slick</a>: 功能异常强大的一个图片滑动切换效果库<br><a href="https://github.com/t4t5/SocialButtons" target="_blank" rel="external">SocialButtons</a>: 漂亮的社交按钮<br><a href="https://github.com/t4t5/sweetalert" target="_blank" rel="external">sweetalert</a>: 一个非常美观的用于替换浏览器默认 alert 的库<br><a href="https://github.com/web-animations/web-animations-js" target="_blank" rel="external">web-animations-js</a>: Javascript 实现的 Web Animation API<br><a href="https://github.com/maxwellito/vivus" target="_blank" rel="external">vivus</a>: 可以动态描绘 SVG 的 JS 库, 支持多种动画<br><a href="https://github.com/Selz/plyr" target="_blank" rel="external">plyr</a>: 轻量, 小巧, 美观的 HTML5 视频播放器<br><a href="https://github.com/sbstjn/timesheet.js" target="_blank" rel="external">timesheet.js</a>: 基于 HTML5 &amp; CSS3 时间表<br><a href="https://github.com/Mango/slideout" target="_blank" rel="external">slideout</a>: 一个非常美观的侧滑菜单</p>
<h3 id="包管理工具-Package-Managers"><a href="#包管理工具-Package-Managers" class="headerlink" title="包管理工具 Package Managers"></a>包管理工具 Package Managers</h3><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><p>菜鸟教程NPM 使用介绍 <a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-npm.html</a><br>淘宝 NPM 镜像 <a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a><br>npm 模块安装机制简介 <a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/01/npm-install.html</a><br>npm包搜索地址 <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p>
<h4 id="Bower"><a href="#Bower" class="headerlink" title="Bower"></a>Bower</h4><p>Bower中文网 <a href="http://www.bowercn.com/" target="_blank" rel="external">http://www.bowercn.com/</a><br>Bower：客户端库管理工具-阮一峰 <a href="http://javascript.ruanyifeng.com/tool/bower.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/tool/bower.html</a></p>
<h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><p>yarn中文网 <a href="https://yarnpkg.com/zh-Hans/快速、可靠、安全的依赖管理" target="_blank" rel="external">https://yarnpkg.com/zh-Hans/快速、可靠、安全的依赖管理</a><br>YARN 简介 <a href="https://www.ibm.com/developerworks/cn/data/library/bd-yarn-intro/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/data/library/bd-yarn-intro/</a></p>
<h3 id="编辑器-Text-Editors"><a href="#编辑器-Text-Editors" class="headerlink" title="编辑器 Text Editors"></a>编辑器 Text Editors</h3><h4 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h4><p>官网下载 <a href="http://www.jetbrains.com/webstorm/download" target="_blank" rel="external">http://www.jetbrains.com/webstorm/download</a><br>前端网破解版下载 <a href="http://www.qdfuns.com/tools" target="_blank" rel="external">http://www.qdfuns.com/tools</a></p>
<h4 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h4><p>官网下载 <a href="https://code.visualstudio.com/" target="_blank" rel="external">https://code.visualstudio.com/</a><br>vscode 插件精选 - 献给所有前端工程师<a href="https://segmentfault.com/a/1190000006697219" target="_blank" rel="external">https://segmentfault.com/a/1190000006697219</a></p>
<h4 id="SublimeText"><a href="#SublimeText" class="headerlink" title="SublimeText"></a>SublimeText</h4><p>官网下载 <a href="https://www.sublimetext.com/" target="_blank" rel="external">https://www.sublimetext.com/</a><br>前端网破解版插件版下载 <a href="http://www.qdfuns.com/tools" target="_blank" rel="external">http://www.qdfuns.com/tools</a><br>SublimeCodeIntel: Sublime Text 的代码补全工具，支持多种语言<br>Emmet：一个用于提高开发效率的编辑器插件，前身是Zen coding<br>SublimeLinter: 一个提供代码质量检测的插件<br>SublimeTmpl：快速新建指定的模版文件<br>Syntax-highlighting-for-Sass：sass代码高亮插件<br>MarkdownEditing: Sublime Text 强大的 Markdown 扩展, 提供快捷键, 主题等<br>ApplySyntax: 辅助检测语法插件<br>CTags: Sublime Text Ctags 支持插件, 需要安装 ctags<br>sublime-react: React 代码高亮</p>
<h4 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h4><p>官网下载 <a href="https://atom.io/" target="_blank" rel="external">https://atom.io/</a></p>
<h4 id="HBuilder"><a href="#HBuilder" class="headerlink" title="HBuilder"></a>HBuilder</h4><p>官网下载 <a href="http://www.dcloud.io/" target="_blank" rel="external">http://www.dcloud.io/</a></p>
<h3 id="JS框架-JS-Frameworks"><a href="#JS框架-JS-Frameworks" class="headerlink" title="JS框架 JS Frameworks"></a>JS框架 JS Frameworks</h3><h4 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h4><p>Backbone.js API中文文档<a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external">http://www.css88.com/doc/backbone/</a></p>
<h4 id="AngularJs"><a href="#AngularJs" class="headerlink" title="AngularJs"></a>AngularJs</h4><p>中文官方文档<a href="https://angular.cn/" target="_blank" rel="external">https://angular.cn/</a><br>angularjs中文网<a href="http://www.apjs.net/" target="_blank" rel="external">http://www.apjs.net/</a><br>angularjs教程<a href="http://www.angularjs.net.cn/" target="_blank" rel="external">http://www.angularjs.net.cn/</a><br>Angular 基础入门<a href="http://www.cnblogs.com/micua/p/angular-essential.html" target="_blank" rel="external">http://www.cnblogs.com/micua/p/angular-essential.html</a><br>angular-masonry: Masonry 的 AngularJS 插件，用于瀑布流<br>angular-schema-form: 根据 JSON 生成响应的 Form 表单<br>restangular: Angular 中用来处理 RESTful API 的插件，可替代 $resource<br>ng-cordova: Cordova 常用组件的 Angular 版本<br>angular-translate: Angular 的国际化 (I18n)<br>ng-inspector: Chrome 插件，用于调试 Angular<br>angularjs-style-guide: AngularJS 代码风格<br>ngReact: React 的 Angular 插件，可以在 Angular 中使用 React Components<br>material: Google Material Design 效果的 Angular 实现<br>angular-local-storage: Angular 插件, 提供了对 localStorage 的友好支持, 并对不支持的浏览器使用 cookie 优雅降级<br>angular-filter: 一组有用的 Angular Filters<br>bindonce: Angular 插件, 用于减少 Watcher 的数量, 提升性能</p>
<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p>英文官方文档<a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="external">https://facebook.github.io/react/docs/hello-world.html</a><br>中文官方文档<a href="http://reactjs.cn/react/docs/getting-started-zh-CN.html" target="_blank" rel="external">http://reactjs.cn/react/docs/getting-started-zh-CN.html</a><br>gitbooks手册<a href="https://hulufei.gitbooks.io/react-tutorial/content/introduction.html" target="_blank" rel="external">https://hulufei.gitbooks.io/react-tutorial/content/introduction.html</a><br>阮一峰react入门<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/03/react.html</a><br>阮一峰React Router入门<a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/05/react_router.html</a><br>React Router 中文文档<a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="external">https://react-guide.github.io/react-router-cn/</a><br>react-redux 中文文档<a href="http://cn.redux.js.org/docs/react-redux/index.html" target="_blank" rel="external">http://cn.redux.js.org/docs/react-redux/index.html</a><br>阮一峰Redux 入门教程<a href="http://www.ruanyifeng.com/blog" target="_blank" rel="external">http://www.ruanyifeng.com/blog</a><br><a href="https://github.com/facebook/react" target="_blank" rel="external">react</a>: React 框架源代码<br><a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native</a>: Facebook 出品的使用 React 开发 IOS 原生应用的框架<br><a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="external">react-hot-loader</a>: 实时调整 React 组件效果<br><a href="https://github.com/ericclemmons/grunt-react" target="_blank" rel="external">grunt-react</a>: React 的 Grunt 组件, 用于将 JSX 编译成 JS<br><a href="https://github.com/touchstonejs/touchstonejs" target="_blank" rel="external">touchstonejs</a>: 基于 React 的手机应用前端框架<br><a href="https://github.com/pheuter/essential-react" target="_blank" rel="external">essential-react</a>: 基于 React, ES6, React-Router的一个应用脚手架<br><a href="https://github.com/ReactTraining/react-router" target="_blank" rel="external">react-router</a>: React 路由解决方案</p>
<h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><p>vue官方<a href="http://cn.vuejs.org/" target="_blank" rel="external">http://cn.vuejs.org/</a><br>vuex官方<a href="http://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">http://vuex.vuejs.org/zh-cn/</a><br>vue-router官方<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">https://router.vuejs.org/zh-cn/</a></p>
<h3 id="UI框架-UI-Frameworks"><a href="#UI框架-UI-Frameworks" class="headerlink" title="UI框架 UI Frameworks"></a>UI框架 UI Frameworks</h3><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>最受欢迎的 HTML、CSS 和 JS 框架 <a href="http://v3.bootcss.com/" target="_blank" rel="external">http://v3.bootcss.com/</a></p>
<h4 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h4><p>一款接近原生的Html5移动App开发框架　会html css js就可以开发app<a href="http://www.ionic.wang/" target="_blank" rel="external">http://www.ionic.wang/</a></p>
<h4 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h4><p>Foundation 中文网 迄今为止最好的响应式前端框架<a href="http://www.foundcss.com" target="_blank" rel="external">http://www.foundcss.com</a></p>
<h4 id="FrozenUI"><a href="#FrozenUI" class="headerlink" title="FrozenUI"></a>FrozenUI</h4><p>移动端服务的前端框架<a href="http://frozenui.github.io/" target="_blank" rel="external">http://frozenui.github.io/</a></p>
<h4 id="materializecss"><a href="#materializecss" class="headerlink" title="materializecss"></a>materializecss</h4><p>基于Material Design的主流前端响应式框架<a href="http://www.materializecss.cn/" target="_blank" rel="external">http://www.materializecss.cn/</a></p>
<h4 id="mui"><a href="#mui" class="headerlink" title="mui"></a>mui</h4><p>最接近原生APP体验的高性能前端框架<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="external">http://dev.dcloud.net.cn/mui/</a></p>
<h4 id="AntDesign"><a href="#AntDesign" class="headerlink" title="AntDesign"></a>AntDesign</h4><p>和react配合的UI框架<a href="https://ant.design" target="_blank" rel="external">https://ant.design</a></p>
<h4 id="eleme"><a href="#eleme" class="headerlink" title="eleme"></a>eleme</h4><p>和vue配合的UI框架<a href="http://element.eleme.io/" target="_blank" rel="external">http://element.eleme.io/</a></p>
<h3 id="JS预处理-JS-Preprocessors"><a href="#JS预处理-JS-Preprocessors" class="headerlink" title="JS预处理 JS Preprocessors"></a>JS预处理 JS Preprocessors</h3><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>TypeScript 入门教程 菜鸟教程<a href="http://www.runoob.com/" target="_blank" rel="external">http://www.runoob.com/</a><br>TypeScript中文网<a href="https://www.tslang.cn/" target="_blank" rel="external">https://www.tslang.cn/</a><br>TypeScript教程gitbook<a href="https://www.gitbook.com/" target="_blank" rel="external">https://www.gitbook.com/</a></p>
<h4 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h4><p>CoffeeScript 中文<a href="http://coffee-script.org/" target="_blank" rel="external">http://coffee-script.org/</a><br>CoffeeScript 实用手册 极客学院<a href="http://wiki.jikexueyuan.com/project/coffeescript/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/coffeescript/</a></p>
<h3 id="过程自动化-Process-Automation"><a href="#过程自动化-Process-Automation" class="headerlink" title="过程自动化 Process Automation"></a>过程自动化 Process Automation</h3><h4 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h4><p>Grunt中文网<a href="http://www.gruntjs.net/" target="_blank" rel="external">http://www.gruntjs.net/</a></p>
<h4 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h4><p>gulp.js 中文网<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">http://www.gulpjs.com.cn/</a><br>gulp详细入门教程<a href="http://www.ydcss.com/" target="_blank" rel="external">http://www.ydcss.com/</a><br>前端构建工具gulpjs的使用介绍及技巧<a href="http://www.cnblogs.com/2050/p/4198792.html" target="_blank" rel="external">http://www.cnblogs.com/2050/p/4198792.html</a><br>Gulp开发教程<a href="https://www.w3ctech.com/topic/134" target="_blank" rel="external">https://www.w3ctech.com/topic/134</a></p>
<h3 id="模板引擎-Templating"><a href="#模板引擎-Templating" class="headerlink" title="模板引擎 Templating"></a>模板引擎 Templating</h3><h4 id="Handlebars"><a href="#Handlebars" class="headerlink" title="Handlebars"></a>Handlebars</h4><p>handlebarsjs官网<a href="http://handlebarsjs.com/" target="_blank" rel="external">http://handlebarsjs.com/</a><br>Handlebars中文文档<a href="http://www.360doc.com/content/" target="_blank" rel="external">http://www.360doc.com/content/</a><br>Handlebars.js 中文文档<a href="http://keenwon.com/992.html" target="_blank" rel="external">http://keenwon.com/992.html</a><br>Handlebars的使用方法文档整理<a href="http://www.tuicool.com/articles/fqQFN3" target="_blank" rel="external">http://www.tuicool.com/articles/fqQFN3</a></p>
<h4 id="Haml"><a href="#Haml" class="headerlink" title="Haml"></a>Haml</h4><p>haml官方文档<a href="https://github.com/haml/haml" target="_blank" rel="external">https://github.com/haml/haml</a><br>haml入门<a href="http://blog.csdn.net/napoay/article/details/50491363" target="_blank" rel="external">http://blog.csdn.net/napoay/article/details/50491363</a></p>
<h4 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h4><p>Jade 官方的英文文档<a href="http://www.w3cplus.com/html/how-to-use-jade.html" target="_blank" rel="external">http://www.w3cplus.com/html/how-to-use-jade.html</a><br>Jade的使用<a href="http://www.w3cplus.com/html/how-to-use-jade.html" target="_blank" rel="external">http://www.w3cplus.com/html/how-to-use-jade.html</a><br>带你学习Jade模板引擎视频<a href="http://www.imooc.com/learn/259" target="_blank" rel="external">http://www.imooc.com/learn/259</a></p>
<h3 id="构建工具-Build-Tools"><a href="#构建工具-Build-Tools" class="headerlink" title="构建工具 Build Tools"></a>构建工具 Build Tools</h3><h4 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h4><p>RequireJS 英文网<a href="http://requirejs.org/" target="_blank" rel="external">http://requirejs.org/</a><br>RequireJS 中文网<a href="http://requirejs.cn/" target="_blank" rel="external">http://requirejs.cn/</a><br>require.js的用法-阮一峰<a href="http://www.ruanyifeng.com/blog" target="_blank" rel="external">http://www.ruanyifeng.com/blog</a></p>
<h4 id="seajs"><a href="#seajs" class="headerlink" title="seajs"></a>seajs</h4><p>seajs文档<a href="http://seajs.org/docs/" target="_blank" rel="external">http://seajs.org/docs/</a><br>SeaJS从入门到原理<a href="http://www.tuicool.com/articles/FfEJv2u" target="_blank" rel="external">http://www.tuicool.com/articles/FfEJv2u</a></p>
<h4 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h4><p>官网<a href="http://browserify.org/" target="_blank" rel="external">http://browserify.org/</a><br>github<a href="https://github.com/substack/node-browserify/" target="_blank" rel="external">https://github.com/substack/node-browserify/</a></p>
<h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>Webpack 中文指南<a href="http://webpackdoc.com/" target="_blank" rel="external">http://webpackdoc.com/</a><br>webpack的实例<a href="http://www.vichily.com" target="_blank" rel="external">http://www.vichily.com</a><br>webpack的入门<a href="http://www.vichily.com" target="_blank" rel="external">http://www.vichily.com</a><br>一小时包教会 —— webpack 入门指南<a href="http://www.w2bc.com/Article/50764" target="_blank" rel="external">http://www.w2bc.com/Article/50764</a></p>
<h3 id="CSS预处理器-CSS-Preprocessors"><a href="#CSS预处理器-CSS-Preprocessors" class="headerlink" title="CSS预处理器 CSS Preprocessors"></a>CSS预处理器 CSS Preprocessors</h3><h4 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h4><p>sass入门<a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">http://www.w3cplus.com/sassguide/</a><br>sass参考手册<a href="http://sass.bootcss.com/docs/sass-reference/" target="_blank" rel="external">http://sass.bootcss.com/docs/sass-reference/</a><br>SASS用法指南-阮一峰<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">http://www.ruanyifeng.com/blog/</a></p>
<h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><p>less中文网<a href="http://lesscss.cn/" target="_blank" rel="external">http://lesscss.cn/</a><br>less快速入门<a href="http://less.bootcss.com/" target="_blank" rel="external">http://less.bootcss.com/</a></p>
<h4 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h4><p>stylus中文文档-张鑫旭<a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="external">http://www.zhangxinxu.com/jq/stylus/</a></p>]]></content>
    
    <summary type="html">
    
      前端知识库，你想知道的前端知识都在这里了
    
    </summary>
    
      <category term="前端" scheme="http://code.youmeek.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="知识库" scheme="http://code.youmeek.com/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序尝鲜一个月现状分析</title>
    <link href="http://code.youmeek.com/2017/02/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%9D%E9%B2%9C%E4%B8%80%E4%B8%AA%E6%9C%88%E7%8E%B0%E7%8A%B6%E5%88%86%E6%9E%90/"/>
    <id>http://code.youmeek.com/2017/02/10/微信小程序尝鲜一个月现状分析/</id>
    <published>2017-02-09T16:00:00.000Z</published>
    <updated>2017-03-02T12:01:42.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>曾记得在微信小程序还没有上线的时候，大家都是翘首以待，希望在张小龙，在企鹅的带领下，走出区别于原生开发的另一条移动开发的道路，我也是一直关注着，知道1月9号，微信小程序终于对外开放了，作为第一批内测开发者，我也是在第一时间启动了微信小程序的开发。<br>其开发也确实相对简单，不过体验上嘛，可能和原生有一些差距，体验上有点类似于企业的x5渲染的webview。不过因为其高度依赖于微信这个平台，也限制了其开放性，所以我当时在csdn的内部群预言：微信小程序不会完全取代原生app，甚至都不可能威胁到原生app。<br>那么现在一个多月过去了，现状如何呢？</p>
<h1 id="微信小程序现状"><a href="#微信小程序现状" class="headerlink" title="微信小程序现状"></a>微信小程序现状</h1><p>就在过年之前，其实好多之前的微信小程序都悄悄下线了，诸如最早入住微信的ota，在过完年不就都纷纷下线，各种股票交易类的小程序也在证监会的要求下纷纷暂停服务。究其原因，就是其转换率并不高。<br>你是否有这样的困扰：手机里装了几十个甚至上百个App，但平均每天都会用到的数量屈指可数，又或者地图、外卖等同类App不得不装好几个换着用，明知使用频率不高却耗电、占内存就是删不得？也因为有这样的用户痛点，当“微信之父”张小龙对外阐释小程序是一个不需要下载安装就可使用的用完即走应用后一直备受关注。<br>2017微信公开课PRO版上，张小龙也举了两个小程序的场景化例子，一个是在公交站，扫一下站牌的二维码就可以了解下一辆公交车的到站时间；一个是在汽车站，扫一下二维码就可以购买车票而不需要排长队。<br>这样的示例已经说明了微信团队对小程序的定位和理解，明显看出重心是要深入开拓线下的场景运营。现在不管是在地铁、公交站等线下场景，许多广告牌中都已加入了二维码等待被“扫一扫”。但张小龙认为，对企业来说，广告中嵌入二维码，被扫后应该能直接触达企业服务而不是消息订阅。<br>他强调，更多希望小程序的启动来自于扫二维码。并且，小程序坚持去中心化的思路，不会有类似应用商店的分类、排行和推荐等功能，也不能推送消息，不会有订阅关系和粉丝机制。<br>值得注意的是，尽管微信官方反复说明小程序并非应用商店的复刻版，但关于小程序可能冲击原有App体系及应用市场的观点依然存在。原因在于，相比苹果iOS系统下App Store的一统江湖，国内的安卓应用市场因某些原因百花齐放，多个第三方应用商店并存。与此同时，流量分散、用户需求和习惯的变化加上技术变迁，都使得应用市场本身面临转型。<br>就在笔者写这篇散文的时候，谷歌正式推出了“谷歌小程序（Android Instant Apps）”。<br>那么这里要八卦一些了，什么是谷歌小程序（Android Instant Apps）？</p>
<h1 id="谷歌小程序"><a href="#谷歌小程序" class="headerlink" title="谷歌小程序"></a>谷歌小程序</h1><p>大家知道，不管是谷歌小程序还是微信小程序，都是一种轻量级的方法，其目的是：运行Android应用而无需安装、从任意位置访问应用。<br>在去年5月的Google I/O大会上，谷歌用了大约10分钟时间为我们介绍了Android Instant Apps，可理解为安卓“即时应用”，也就是无需安装可直接使用的应用，显然这跟微信推出的小程序非常类似，昨天，谷歌正式上线了一小批应用来测试这项功能。<br>上线的几款支持应用包括了BuzzFeed、Wish、Periscope以及Viki，Android Instant Apps并不是简单的网页浏览形式，通过Android Instant Apps，你其实就是打开了这个App的“简洁版”，经过一些媒体的测试，Android Instant Apps的加载速度也要比同等状况下的网页形式要快。<br>谷歌小程序工作原理：将App模块化了之后，Google Play只会在你点击了链接之后下载所需的那部分功能，这样你就相当于在一个简洁的模式下使用该App。对于开发者来说，他们也不必为此专门再去开发一个独立的App，它使用的还是同样的Android API和同样的源代码，开发者们只需要在原有App的基础上进行一下升级，接入Android Instant Apps的功能就可以了，对于一些开发者们来说，这个过程可能都用不了一天。<br>从这方面来说，由于google的全球影响力，加之在系统级别的多年耕耘，优势相对于微信小程序那可不是一点点。</p>
<h1 id="微信小程序的几大痛点"><a href="#微信小程序的几大痛点" class="headerlink" title="微信小程序的几大痛点"></a>微信小程序的几大痛点</h1><p>随着第一轮玩家激情褪去后的纷纷退场，以及第二批第三批玩家的涌入，为什么小程序的存活时间并不长？这不得不说说微信小程序当前存在的几个问题：</p>
<h2 id="bug较多"><a href="#bug较多" class="headerlink" title="bug较多"></a>bug较多</h2><p>这是不得不说的话题，小程序为了实现在苹果发布十周年推出具有“颠覆”的小程序，其实是带了很多bug上线的，即使到现在，开发人员依然会遇到很多问题。<br>对于人力充足的大公司，有专门的人来参与到小程序的开发维护中;而对于小公司，他们没有足够的人力投入，他们可能一半时间来维护其他平台产品另一半时间来开发小程序，这个时候如果碰到几个小程序的bug，基本上是吃不消的。</p>
<h2 id="产品定位"><a href="#产品定位" class="headerlink" title="产品定位"></a>产品定位</h2><p>举一个简单的例子，比如以内容为主的app，我们常常会向用户推送一些消息来提高点击率，但是在小程序里，这条路是死的。对于“今日头条”推出小程序真心搞不太懂，如此高频使用的产品为什么要放到小程序上，先不说重大新闻你怎么推送，那么对于普通用户的爱好如何进行个性化推荐?大概也是跟风吧。</p>
<h2 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h2><p>1月13日，证监会担心金融类小程序涉及客户隐私和安全问题，要求金融类的小程序只能进行产品的展示，不能进行诸如申购、赎回、转换、定投、开户等功能。那这就很蛋疼了，你只能在小程序上看最新的股价、咨询，你要想交易那对不起，你可以另跳链接，我们知道微信不支持外链的，那好吧，我得回到APP上，进行交易。那么问题来了，我APP啥都有了，我还要小程序干嘛，所以，很多基金、证券类的小程序直接停止服务。</p>
<h2 id="开发市场"><a href="#开发市场" class="headerlink" title="开发市场"></a>开发市场</h2><p>在小程序开放之前，微信小程序的群满天飞，首先是ios、android的开发者加入到了小程序开发群中，然后是PM也加入了进来，再到后排搞PHP的也加入了进来。小程序开发成本并不高，把官方文档的代码复制过来基本就能用，所以大家都来一起搞。其结果是其转换率并不高，其市场定位只能成为Android，ios的补充和附属品。</p>
<h1 id="小程序未来怎么走"><a href="#小程序未来怎么走" class="headerlink" title="小程序未来怎么走"></a>小程序未来怎么走</h1><p>独立互联网评论人洪波此前接受《每日经济新闻》记者采访时也认为，小程序毕竟是一个新东西，开发者可能会按照手机应用的流程去做小程序，这可能也是早期避免不了的。但小程序并不是免安装的手机应用，它最适合的场景是有一个明显的触发契机，大家需要对小程序应该怎么做、通过哪些场景触发等有个重新而且深入的思考。<br>虽然在推出当天，各类微信小程序一窝蜂的上线，但从推出后1个月的情况看，或许作为一个新思路的产品，没持续引发疯狂跟风反是个好信号，毕竟不管是对用户还是开发者来说，复制一个App生态体系意义不大，而思路和标准的改变跟产品开发都不能一蹴而就。<br>的确，作为线上的用户来说，小程序的设计似乎是如此不便，但换个角度来看，小程序或许本来就不是为被用户找到而设计的，或者说，致力于“勾连线下”的小程序，本身存在的价值或许是在特定的场景下找到特定的用户。</p>]]></content>
    
    <summary type="html">
    
      微信小程序尝鲜一个月现状分析
    
    </summary>
    
      <category term="小程序" scheme="http://code.youmeek.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://code.youmeek.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://code.youmeek.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>node.js基本工作原理及流程</title>
    <link href="http://code.youmeek.com/2016/12/05/Node.js%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://code.youmeek.com/2016/12/05/Node.js基本工作原理/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-01-25T03:03:13.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><p>Node 是一个服务器端 JavaScript 解释器，用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。<br>Node.js 是一个可以让 JavaScript 运行在浏览器之外的平台。它实现了诸如文件系统、模块、包、操作系统 API、网络通信等 Core JavaScript 没有或者不完善的功能。历史上将 JavaScript移植到浏览器外的计划不止一个，但Node.js 是最出色的一个。</p>
<h2 id="什么是v8引擎"><a href="#什么是v8引擎" class="headerlink" title="什么是v8引擎"></a>什么是v8引擎</h2><p>V8 JavaScript 引擎是 Google 用于其 Chrome 浏览器的底层 JavaScript 引擎。很少有人考虑 JavaScript 在客户机上实际做了些什么？实际上，JavaScript 引擎负责解释并执行代码。Google 使用 V8 创建了一个用 C++ 编写的超快解释器，该解释器拥有另一个独特特征；您可以下载该引擎并将其嵌入任何 应用程序。V8 JavaScript 引擎并不仅限于在一个浏览器中运行。因此，Node 实际上会使用 Google 编写的 V8 JavaScript 引擎，并将其重建为可在服务器上使用。</p>
<h2 id="Node-js的作用"><a href="#Node-js的作用" class="headerlink" title="Node.js的作用"></a>Node.js的作用</h2><p>Node 公开宣称的目标是 “旨在提供一种简单的构建可伸缩网络程序的方法”。我们来看一个简单的例子，在 Java™ 和 PHP 这类语言中，每个连接都会生成一个新线程，每个新线程可能需要 2 MB 的配套内存。在一个拥有 8 GB RAM 的系统上，理论上最大的并发连接数量是 4,000 个用户。随着您的客户群的增长，如果希望您的 Web 应用程序支持更多用户，那么，您必须添加更多服务器。所以在传统的后台开发中，整个 Web 应用程序架构（包括流量、处理器速度和内存速度）中的瓶颈是：服务器能够处理的并发连接的最大数量。这个不同的架构承载的并发数量是不一致的。<br>而Node的出现就是为了解决这个问题：更改连接到服务器的方式。在Node 声称它不允许使用锁，它不会直接阻塞 I/O 调用。Node在每个连接发射一个在 Node 引擎的进程中运行的事件，而不是为每个连接生成一个新的 OS 线程（并为其分配一些配套内存）。</p>
<h2 id="Node-js能做什么"><a href="#Node-js能做什么" class="headerlink" title="Node.js能做什么"></a>Node.js能做什么</h2><p>借用一句经典的描述Node.js的话:正如 JavaScript 为客户端而生，Node.js 为网络而生。<br>使用Node.js，你可以轻易的实现：</p>
<ul>
<li>具有复杂逻辑的网站；</li>
<li>基于社交网络的大规模 Web 应用；</li>
<li>Web Socket 服务器；</li>
<li>TCP/UDP 套接字应用程序；</li>
<li>命令行工具；</li>
<li>交互式终端程序；</li>
<li>带有图形用户界面的本地应用程序；</li>
<li>单元测试工具；</li>
<li>客户端 JavaScript 编译器。</li>
</ul>
<h2 id="什么是事件驱动编程"><a href="#什么是事件驱动编程" class="headerlink" title="什么是事件驱动编程"></a>什么是事件驱动编程</h2><p>在我们使用Java，PHP等语言实现编程的时候，我们面向对象编程是完美的编程设计，这使得他们对其他编程方法不屑一顾。却不知大名鼎鼎Node使用的却是事件驱动编程的思想。那什么是事件驱动编程。<br><strong>事件驱动编程，为需要处理的事件编写相应的事件处理程序。代码在事件发生时执行。</strong><br>为需要处理的事件编写相应的事件处理程序。要理解事件驱动和程序，就需要与非事件驱动的程序进行比较。实际上，现代的程序大多是事件驱动的，比如多线程的程序，肯定是事件驱动的。早期则存在许多非事件驱动的程序，这样的程序，在需要等待某个条件触发时，会不断地检查这个条件，直到条件满足，这是很浪费cpu时间的。而事件驱动的程序，则有机会释放cpu从而进入睡眠态（注意是有机会，当然程序也可自行决定不释放cpu），当事件触发时被操作系统唤醒，这样就能更加有效地使用cpu。<br>来看一张简单的事件驱动模型（uml）：</p>
<p><img src="http://img.blog.csdn.net/20161231115520916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>事件驱动模型主要包含3个对象：事件源、事件和事件处理程序。</p>
<ul>
<li>事件源：产生事件的地方(html元素)</li>
<li>事件：点击/鼠标操作/键盘操作等等</li>
<li>事件对象：当某个事件发生时，可能会产生一个事件对象，该时间对象会封装好该时间的信息，传递给事件处理程序</li>
<li>事件处理程序：响应用户事件的代码<br>其实我们使用的window系统也算得上是事件驱动了。我们来看一个简单的事例：监听鼠标点击事件，并能够显示鼠标点击的位置x,y。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt; </div><div class="line">   &lt;head&gt; </div><div class="line">   &lt;script&gt; </div><div class="line">   function test1(e)&#123; </div><div class="line">     window.alert(&quot;x=&quot;+e.clientX+&quot;y=&quot;+e.clientY); </div><div class="line">   &#125; </div><div class="line">   &lt;/script&gt; </div><div class="line">   &lt;/head&gt; </div><div class="line">   &lt;body onmousedown=&quot;test1(event)&quot;&gt; </div><div class="line">   &lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="Node-js运行原理分析"><a href="#Node-js运行原理分析" class="headerlink" title="Node.js运行原理分析"></a>Node.js运行原理分析</h1><p>当我们搜索Node.js时，夺眶而出的关键字就是 “单线程，异步I/O，事件驱动”，应用程序的请求过程可以分为俩个部分：CPU运算和I/O读写，CPU计算速度通常远高于磁盘读写速度，这就导致CPU运算已经完成，但是不得不等待磁盘I/O任务完成之后再继续接下来的业务。<br>    所以I/O才是应用程序的瓶颈所在，在I/O密集型业务中，假设请求需要100ms来完成，其中99ms化在I/O上。如果需要优化应用程序，让他能同时处理更多的请求，我们会采用多线程，同时开启100个、1000个线程来提高我们请求处理，当然这也是一种可观的方案。<br>     但是由于一个CPU核心在一个时刻只能做一件事情，操作系统只能通过将CPU切分为时间片的方法，让线程可以较为均匀的使用CPU资源。但操作系统在内核切换线程的同时也要切换线程的上线文，当线程数量过多时，时间将会被消耗在上下文切换中。所以在大并发时，多线程结构还是无法做到强大的伸缩性。<br> 那么是否可以另辟蹊径呢？！我们先来看看单线程，《深入浅出Node》一书提到 “单线程的最大好处，是不用像多线程编程那样处处在意状态的同步问题，这里没有死锁的存在，也没有线程上下文切换所带来的性能上的开销”，那么一个线程一次只能处理一个请求岂不是无稽之谈，先让我们看张图：<br> <img src="http://img.blog.csdn.net/20161231120417621?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br> Node.js的单线程并不是真正的单线程，只是开启了单个线程进行业务处理（cpu的运算），同时开启了其他线程专门处理I/O。当一个指令到达主线程，主线程发现有I/O之后，直接把这个事件传给I/O线程，不会等待I/O结束后，再去处理下面的业务，而是拿到一个状态后立即往下走，这就是“单线程”、“异步I/O”。<br> I/O操作完之后呢？Node.js的I/O 处理完之后会有一个回调事件，这个事件会放在一个事件处理队列里头，在进程启动时node会创建一个类似于While(true)的循环，它的每一次轮询都会去查看是否有事件需要处理，是否有事件关联的回调函数需要处理，如果有就处理，然后加入下一个轮询，如果没有就退出进程，这就是所谓的“事件驱动”。这也从Node的角度解释了什么是”事件驱动”。<br> 在node.js中，事件主要来源于网络请求，文件I/O等，根据事件的不同对观察者进行了分类，有文件I/O观察者，网络I/O观察者。事件驱动是一个典型的生产者/消费者模型，请求到达观察者那里，事件循环从观察者进行消费，主线程就可以马不停蹄的只关注业务不用再去进行I/O等待。</p>
<h1 id="Node-js的简单实践"><a href="#Node-js的简单实践" class="headerlink" title="Node.js的简单实践"></a>Node.js的简单实践</h1><p> 关于node的环境搭建这里就不说明了<a href="http://blog.csdn.net/xiangzhihong8/article/details/52842061" target="_blank" rel="external">node入门</a>。这里为了方便大家理解，我们写一个简单的登录实例。<br> 这里为了方便前端小白的理解，新增一个小节，如何使用Node搭建一个新的项目。</p>
<h2 id="使用Node创建项目"><a href="#使用Node创建项目" class="headerlink" title="使用Node创建项目"></a>使用Node创建项目</h2><p> 安装Express</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g express  </div><div class="line">npm install -g express-generator</div></pre></td></tr></table></figure>
<p>新建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express -t ejs newsproject</div></pre></td></tr></table></figure></p>
<p>按照提示进入项目目录，运行npm安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd newsprojec</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>运行项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure>
<p>浏览器访问:<a href="http://127.0.0.1:3000/即可见nodejs站点页面即可。" target="_blank" rel="external">http://127.0.0.1:3000/即可见nodejs站点页面即可。</a><br>接下来我们写一个简单的例子，来看一下效果图：<br><img src="http://img.blog.csdn.net/20161231215128577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br> 整个目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">根目录--------------</div><div class="line">    |-package.json</div><div class="line">    |-test.js</div><div class="line">    |-public</div><div class="line">        |-main.html</div><div class="line">        |-next.html</div></pre></td></tr></table></figure></p>
<p>整个目录包含三个文件，test.js（作为控制文件）、main.html和next.html作为页面的显示文件。<br>来看一下代码：<br>test.js（作为控制文件）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// file name :test.js</div><div class="line">var express             = require(&apos;express&apos;);</div><div class="line">var app                 = express();</div><div class="line">var bodyParse           = require(&apos;body-parser&apos;)</div><div class="line">var cookieParser        = require(&apos;cookie-parser&apos;) ;</div><div class="line">app.use(cookieParser()) ;</div><div class="line">app.use(bodyParse.urlencoded(&#123;extended:false&#125;)) ;</div><div class="line"></div><div class="line">// 处理根目录的get请求</div><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">    res.sendfile(&apos;public/main.html&apos;) ;</div><div class="line">    console.log(&apos;main page is required &apos;);</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">// 处理/login的get请求</div><div class="line">app.get(&apos;/add&apos;, function (req,res) &#123;</div><div class="line">    res.sendfile(&apos;public/add.html&apos;) ;</div><div class="line">    console.log(&apos;add page is required &apos;) ;</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">// 处理/login的post请求</div><div class="line">app.post(&apos;/login&apos;,function(req,res)&#123;</div><div class="line">    name=req.body.name ;</div><div class="line">    pwd=req.body.pwd   ;</div><div class="line">    console.log(name+&apos;--&apos;+pwd) ;</div><div class="line">    res.status(200).send(name+&apos;--&apos;+pwd) ;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 监听3000端口</div><div class="line">var server=app.listen(3000) ;</div></pre></td></tr></table></figure>
<p>main.html的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://fonts.useso.com/css?family=Tangerine|Inconsolata|Droid+Sans&quot;&gt;</div><div class="line"></div><div class="line">    &lt;style&gt;</div><div class="line">        div#test&#123;</div><div class="line">            font-family: &apos;Tangerine&apos;,serif;</div><div class="line">            font-size: 48px;</div><div class="line">        &#125;</div><div class="line">        p#link1&#123;</div><div class="line">            font-family: &apos;Tangerine&apos;,serif;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &lt;/style&gt;</div><div class="line"></div><div class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/2.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;test&quot;&gt;</div><div class="line">    &lt;h1&gt;Main Page&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p&gt;Register &amp; Login&lt;/p&gt;</div><div class="line">&lt;form action=&quot;test.jsp&quot; method=&quot;post&quot;&gt;</div><div class="line">    账号 :</div><div class="line">    &lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;</div><div class="line">    &lt;br/&gt;&lt;br/&gt;</div><div class="line">    密码 :</div><div class="line">    &lt;input type=&quot;text&quot; id=&quot;pwd&quot; /&gt;</div><div class="line">    &lt;br/&gt;&lt;br/&gt;</div><div class="line">    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp</div><div class="line">    &lt;div&gt;&lt;a href=&quot;/add&quot; id=&quot;add&quot;&gt;EXTRA&lt;/a&gt;&lt;/div&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;Submit&quot; id=&quot;x&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line"></div><div class="line">        var after_login=function(data,status)&#123;</div><div class="line">            if (status==&apos;success&apos;)&#123;</div><div class="line">                alert(data+&apos;--&apos;+status) ;</div><div class="line">            &#125;</div><div class="line">            else alert(&apos;login refused&apos;) ;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $(document).ready(function()&#123;</div><div class="line">            $(&quot;#x&quot;).click(function()&#123;</div><div class="line">                var name    =   $(&quot;#name&quot;).val() ;</div><div class="line">                var pwd     =   $(&quot;#pwd&quot;).val() ;</div><div class="line">                $.post(&apos;http://127.0.0.1:3000/login&apos;,</div><div class="line">                &#123;</div><div class="line">                    name    :   name ,</div><div class="line">                    pwd     :   pwd</div><div class="line">                &#125;,</div><div class="line">//                        function(data,status)&#123;</div><div class="line">//                            alert(data+&apos;--&apos;+status) ;</div><div class="line">//                        &#125;</div><div class="line">                        after_login</div><div class="line">                );</div><div class="line">//                $.get(&apos;add&apos;,function(data,status)&#123;</div><div class="line">//                    document.write(data) ;</div><div class="line">//                &#125;) ;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>next.html的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;第二页面&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;This is an additional web page&lt;/h1&gt;</div><div class="line">&lt;p&gt;just for test&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Node 是一个服务器端 JavaScript 解释器，用于方便地搭建响应速度快、易于扩展的网络应用。
    
    </summary>
    
      <category term="node" scheme="http://code.youmeek.com/categories/node/"/>
    
      <category term="前端" scheme="http://code.youmeek.com/categories/node/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Node入门" scheme="http://code.youmeek.com/tags/Node%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Angular2入坑指南</title>
    <link href="http://code.youmeek.com/2016/12/05/Angular2%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://code.youmeek.com/2016/12/05/Angular2入坑指南/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-01-25T03:04:28.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>对后端开发来说，前端是神秘的，眼花缭乱的技术，繁多的框架，出名的不出名的好几百种，看是“繁荣”，其实显得杂乱无章，但是我们在做开发的时候，技术选型还是主流的那么几个：浅析angular，react，vue.js Node.js。</p>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>官网：<a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a><br>nodejs不是一个js框架，千万不要认为是类似jquery的框架，nodejs是js运行时，运行环境，类比java中jvm。做前端的没用过nodejs都不好意思说自己是前端。nodejs是和jvm同等地位的js运行环境，打开了前端人员走向后端的道路。</p>
<h2 id="react-js"><a href="#react-js" class="headerlink" title="react.js"></a>react.js</h2><p>官网：<a href="http://facebook.github.io/react/" target="_blank" rel="external">http://facebook.github.io/react/</a><br>react是facebook前不久出的一款框架，众前端膜拜之。类比Java中freemarker的宏。reactjs最大的作用就是用来开发ui组件，比如用它开发移动端页面，也是今年移动端前端化的推动者。</p>
<h2 id="angular-js"><a href="#angular-js" class="headerlink" title="angular.js"></a>angular.js</h2><p>官网：<a href="http://www.apjs.net/" target="_blank" rel="external">http://www.apjs.net/</a><br>angular是一款优秀的前端JS框架，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：MVC、模块化、自动化双向数据绑定、语义化标签、依赖注入等等。因为背靠google也收到了开发者的推崇。</p>
<h1 id="概念与区别"><a href="#概念与区别" class="headerlink" title="概念与区别"></a>概念与区别</h1><p>本人也在React与Angular两大体系里纠结了好久，还使用React Native做了几个UI，彷徨于两大前端框架之前。<br>React缺点：</p>
<ol>
<li>Web Componet的MVC分离不够彻底。 JSX描述的页面模板与JS代码没有办法完全分开。<br>无法接受代码的同时还夹个HTML代码这样原始的方式。</li>
<li>对UI的描述自成一体，而不是采用CSS或者SCSS。</li>
<li>数据的传递不够直接还有一堆乱七八槽的属性</li>
<li>Android与IOS的代码不够一致</li>
<li>核心太小，一堆补充的库<br>Angular2的优点：<br>1、推荐TypeScript而不是原生的Javascript<br>2、类库特别多，概念也是特别多<br>3、体量大<br>4、成熟度相对偏低，版本2才刚发布<br>5、不兼容1.x<br>6、Router还不成熟<br>综合以上我最终决定选择Angular2作为我前端开发的首选框架。<br>同时还有以下几个Bonus：</li>
<li>配置nativescript写原生应用，并且nativescript支持css子集，这一点比react要强一些，可以更小的降低学习成本与维护成本。<ol>
<li>有官方的UI方案Material Design供选择</li>
<li>官工具链相对于React要成熟 有angular-cli这个便利化的工具，并提供E2E的测试，用以方便测试，并保证项目的质量。</li>
<li>维护团队强大<br>来看一张图：<br><img src="http://img.blog.csdn.net/20161225121233493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><h1 id="Angular2快速安装与入门"><a href="#Angular2快速安装与入门" class="headerlink" title="Angular2快速安装与入门"></a>Angular2快速安装与入门</h1>安装angular-cli</li>
</ol>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g angular-cli</div></pre></td></tr></table></figure>
<p>创建项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new PROJECT_NAMEcd PROJECT_NAMEng serve</div></pre></td></tr></table></figure>
<p>就这么 简单，这时候你的项目已经运行起来了。<br><img src="http://img.blog.csdn.net/20161225121618854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们看一下项目结构<br><img src="http://img.blog.csdn.net/20161225121652321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后打开localhost:4200就可以查看效果了。<br>附：<a href="https://github.com/angular/angular-cli" target="_blank" rel="external">angular-cli的教程与源码地址</a></p>]]></content>
    
    <summary type="html">
    
      对后端开发来说，前端是神秘的，眼花缭乱的技术，繁多的框架，出名的不出名的好几百种，看是“繁荣”，其实显得杂乱无章，但是我们在做开发的时候，技术选型还是主流的那么几个：浅析angular，React，vue.js Node.js。
    
    </summary>
    
      <category term="Angular2" scheme="http://code.youmeek.com/categories/Angular2/"/>
    
      <category term="前端" scheme="http://code.youmeek.com/categories/Angular2/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Angular2" scheme="http://code.youmeek.com/tags/Angular2/"/>
    
      <category term="前端开发" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>gulp+webpack工具整合简介</title>
    <link href="http://code.youmeek.com/2016/12/05/gulp+webpack%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88%E7%AE%80%E4%BB%8B/"/>
    <id>http://code.youmeek.com/2016/12/05/gulp+webpack工具整合简介/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-01-25T03:06:59.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h2><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。<br><img src="http://img.blog.csdn.net/20170103123129506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="webpack特点"><a href="#webpack特点" class="headerlink" title="webpack特点"></a>webpack特点</h3><ul>
<li><p>Webpack<br>有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p>
</li>
<li><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript<br>模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p>
</li>
<li><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS<br>文件。甚至在加载依赖的时候，允许使用动态表达式 require(“./templates/“ + name + “.jade”)。</p>
</li>
<li><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack<br>插件，来满足各式各样的需求。</p>
</li>
<li><p>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p>
</li>
</ul>
<h3 id="webpack配置及使用"><a href="#webpack配置及使用" class="headerlink" title="webpack配置及使用"></a>webpack配置及使用</h3><p>首先需要安装node环境和npm包管理工具，不知道的可以自行百度。基本环境好了后需要安装webpack插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack --save-dev</div></pre></td></tr></table></figure>
<p>接下来就是写一个demo验证了。创建一个静态页面 index.html 和一个 JS 入口文件 entry.js<br><!-- index.html --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p> entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(&apos;It works.&apos;)</div></pre></td></tr></table></figure></p>
<p>编译 entry.js 并打包到 bundle.js：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack entry.js bundle.js</div></pre></td></tr></table></figure>
<p>然后在浏览器上就可以看到输出结果了“It works”。</p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。首先安装loader：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader</div></pre></td></tr></table></figure>
<p>然后我们写代码的时候通过require函数引入进来就可以了，具体使用请自行搜索。</p>
<h2 id="gulp-简介"><a href="#gulp-简介" class="headerlink" title="gulp 简介"></a>gulp 简介</h2><p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用它，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。<br>gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。<br>gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。</p>
<h3 id="gulp安装使用"><a href="#gulp安装使用" class="headerlink" title="gulp安装使用"></a>gulp安装使用</h3><h4 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装nodejs</h4><p>1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs；<br>1.2、安装：打开<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs官网</a>，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后一路next。</p>
<h4 id="2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）"><a href="#2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）" class="headerlink" title="2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）"></a>2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）</h4><p>2.1、说明：什么是命令行？命令行在OSX是终端（Terminal），在windows是命令提示符（Command Prompt）；<br>2.2、注：之后操作都是在windows系统下；<br>2.3、简单介绍gulp在使用过程中常用命令，打开命令提示符执行下列命令（打开方式：window + r 输入cmd回车）：<br>node -v查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs。PS：未能出现版本号，请尝试注销电脑重试；<br>npm -v查看npm的版本号，npm是在安装nodejs时一同安装的nodejs包管理器，那它有什么用呢？稍后解释；<br>cd定位到目录，用法：cd + 路径 ；<br>dir列出文件列表；<br>cls清空命令提示符窗口内容。<br><img src="http://img.blog.csdn.net/20170103204436639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="3、npm介绍"><a href="#3、npm介绍" class="headerlink" title="3、npm介绍"></a>3、npm介绍</h4><p>在这里直接略过，<a href="http://blog.csdn.net/xiangzhihong8/article/details/53422926" target="_blank" rel="external">npm详解</a></p>
<h4 id="4、选装cnpm"><a href="#4、选装cnpm" class="headerlink" title="4、选装cnpm"></a>4、选装cnpm</h4><p>4.1、说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。32个！来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”；<br>4.2、官方网址：<a href="http://npm.taobao.org；" target="_blank" rel="external">http://npm.taobao.org；</a><br>4.3、安装：命令提示符执行npm install cnpm -g –registry=<a href="https://registry.npm.taobao.org；" target="_blank" rel="external">https://registry.npm.taobao.org；</a>  注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；<br>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。</p>
<h4 id="5、全局安装gulp"><a href="#5、全局安装gulp" class="headerlink" title="5、全局安装gulp"></a>5、全局安装gulp</h4><p>5.1、说明：全局安装gulp目的是为了通过她执行gulp任务；<br>5.2、安装：命令提示符执行cnpm install gulp -g；<br>5.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。</p>
<h4 id="6、新建package-json文件"><a href="#6、新建package-json文件" class="headerlink" title="6、新建package.json文件"></a>6、新建package.json文件</h4><p>这个也忽略，相当于maven组织项目的。</p>
<h4 id="7、本地安装gulp插件"><a href="#7、本地安装gulp插件" class="headerlink" title="7、本地安装gulp插件"></a>7、本地安装gulp插件</h4><p>7.1、安装：定位目录命令后提示符执行cnpm install –save-dev；<br>7.2、本示例以gulp-less为例（编译less文件），命令提示符执行cnpm install gulp-less –save-dev；<br><img src="http://img.blog.csdn.net/20170103205009580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>7.3、将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；<br>7.4、为了能正常使用，我们还得本地安装gulp：cnpm install gulp –save-dev；<br>PS：细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。</p>
<h4 id="8、新建gulpfile-js文件（重要）"><a href="#8、新建gulpfile-js文件（重要）" class="headerlink" title="8、新建gulpfile.js文件（重要）"></a>8、新建gulpfile.js文件（重要）</h4><p>8.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。<br>8.2、它大概是这样一个js文件（更多插件配置请<a href="http://www.ydcss.com/archives/tag/gulp" target="_blank" rel="external">查看这里</a>）<br>来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//导入工具包 require(&apos;node_modules里对应模块&apos;)</div><div class="line">var gulp = require(&apos;gulp&apos;), //本地安装gulp所用到的地方</div><div class="line">    less = require(&apos;gulp-less&apos;);</div><div class="line"> </div><div class="line">//定义一个testLess任务（自定义任务名称）</div><div class="line">gulp.task(&apos;testLess&apos;, function () &#123;</div><div class="line">    gulp.src(&apos;src/less/index.less&apos;) //该任务针对的文件</div><div class="line">        .pipe(less()) //该任务调用的模块</div><div class="line">        .pipe(gulp.dest(&apos;src/css&apos;)); //将会在src/css下生成index.css</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">gulp.task(&apos;default&apos;,[&apos;testLess&apos;, &apos;elseTask&apos;]); //定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务</div><div class="line"> </div><div class="line">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</div><div class="line">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </div><div class="line">//gulp.dest(path[, options]) 处理完后文件生成路径</div></pre></td></tr></table></figure>
<h4 id="9、运行gulp"><a href="#9、运行gulp" class="headerlink" title="9、运行gulp"></a>9、运行gulp</h4><p>9.1、说明：命令提示符执行gulp 任务名称；<br>9.2、编译less：命令提示符执行gulp testLess；<br>9.3、当执行gulp default或gulp将会调用default任务里的所有任务[‘testLess’,’elseTask’]。</p>
<h4 id="10、使用webstorm运行gulp任务"><a href="#10、使用webstorm运行gulp任务" class="headerlink" title="10、使用webstorm运行gulp任务"></a>10、使用webstorm运行gulp任务</h4><p>10.1、说明：使用webstorm可视化运行gulp任务；<br>10.2、使用方法：将项目导入webstorm，右键gulpfile.js 选择”Show Gulp Tasks”打开Gulp窗口，若出现”No task found”，选择右键”Reload tasks”，双击运行即可。<br><img src="http://img.blog.csdn.net/20170103211004745?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="webpack-amp-gulp集成"><a href="#webpack-amp-gulp集成" class="headerlink" title="webpack&amp;gulp集成"></a>webpack&amp;gulp集成</h2><p>接下来要到重点了，gulp和webpack各有各的优点，那么我们整合这两个工具呢？</p>
<h3 id="创建webpack对象"><a href="#创建webpack对象" class="headerlink" title="创建webpack对象"></a>创建webpack对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&quot;webpack&quot;)</div></pre></td></tr></table></figure>
<h3 id="创建gulp任务"><a href="#创建gulp任务" class="headerlink" title="创建gulp任务"></a>创建gulp任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//gulp --product</div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">  isProduct = argv.product;</div><div class="line">  isWatch = !isProduct;</div><div class="line">  console.log(&apos;正在处理：&apos; + (isProduct ? &apos;线上&apos; : &apos;本地&apos;) + &apos;环境&apos;);</div><div class="line">  fse.emptydirSync(&apos;./dist&apos;);</div><div class="line">  gulp.start(&apos;webpack&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ps:本地开发(命令：gulp)和线上(命令：gulp –product)部署gulp命令分开，本地会做文件更改的监听，并且不会压缩。</p>
<h3 id="webpack任务配置"><a href="#webpack任务配置" class="headerlink" title="webpack任务配置"></a>webpack任务配置</h3><p>入口文件配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">            index: &apos;./index.js&apos;</div><div class="line">            common: [</div><div class="line">                &apos;jquery&apos;,</div><div class="line">                &apos;understore&apos;,</div><div class="line">                &apos;template&apos;,</div><div class="line">                &apos;store&apos;</div><div class="line">            ]</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>该参数主要是配置入口文件，打包出来的文件就是以里面的key作为名字的文件（即bundle）。<br>输出路径配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">            path: &apos;./dist/&apos;,</div><div class="line">            filename: &apos;[name].js&apos;,</div><div class="line">            publicPath: &apos;&apos;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>别名配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">            alias: &#123;</div><div class="line">                jquery: path.resolve(&apos;../global/lib/jquery.js&apos;),</div><div class="line">                template: path.resolve(&apos;../global/lib/template.js&apos;),</div><div class="line">                understore: path.resolve(&apos;../global/lib/underscore.js&apos;),</div><div class="line">                store: path.resolve(&apos;../global/lib/store.js&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>配置完别名，就可以用别名来进行require了，不管是在webpack配置中，还是在js代码中。</p>
<h3 id="webpack插件配置"><a href="#webpack插件配置" class="headerlink" title="webpack插件配置"></a>webpack插件配置</h3><p>webpack内部全局变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line">    $: &apos;jquery&apos;,</div><div class="line">    jQuery: &apos;jquery&apos;,</div><div class="line">    template: &apos;template&apos;,</div><div class="line">    store: &apos;store&apos;,</div><div class="line">    _: &apos;understore&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>配置完全局的变量，在js中就直接可以用，不需要再require。该全局不是挂载到window对象上，只对webpack打包出来的js有用。<br>合并相同的模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.DedupePlugin()</div></pre></td></tr></table></figure>
<p>说明:该插件会把相同的模块合并，不推荐使用，最好自己做到模块唯一性，如果打出来两个相同的模块，说明你的代码潜藏出错风险。<br>css抽离插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ExtractTextPlugin(&quot;[name].css&quot;)</div></pre></td></tr></table></figure>
<p>该插件会把css抽离出来作为单独的css文件进行打包，如果不使用该插件，会把css打包到js中，然后以style标签的形式，把css作为内联样式使用。<br>公共文件插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;, &apos;common.js&apos;)</div></pre></td></tr></table></figure>
<p>该插件会把公共的模块进行抽离到公共的js模块里面，防止js重复引用打包。<br>压缩插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">        compress: &#123;</div><div class="line">            warnings: false</div><div class="line">        &#125;,</div><div class="line">        mangle: &#123;</div><div class="line">            except: [&apos;$&apos;, &apos;m&apos;, &apos;webpackJsonpCallback&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>该插件会把js进行压缩，在线上环境进行使用。<br>注：mangle该关键词不需要混淆，因为在我们实践过程中，压缩后的代码有很多地方报错。<br>由于webpack会把所有的js都打包到一个js文件中，这样就不方便开发人员debug，故需要进行sourcemap的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool: (isProduct ? false : &apos;source-map&apos;)</div></pre></td></tr></table></figure>
<h3 id="加载器loader"><a href="#加载器loader" class="headerlink" title="加载器loader"></a>加载器loader</h3><p>js加载器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.js[x]?$/,</div><div class="line">    exclude: /node_modules/,</div><div class="line">    loader: &apos;babel-loader&apos;,</div><div class="line">    query: &#123;</div><div class="line">        compact: false</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>js使用babel来进行加载，这样就可以使用一些es6的特性来开发，IE8下面使用如下方案来进行解决转换后的代码不兼容问题。</p>
<p>ps：解决IE8 babel 转换：我们把shim.js &amp; sham.js，自己合并到一起吧。<br>css、less、sass加载器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.css$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues&apos;)</div><div class="line">&#125;, &#123;</div><div class="line">    test: /\.less$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!less-loader&apos;)</div><div class="line">&#125;, &#123;</div><div class="line">    test: /\.scss$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!sass-loader&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ExtractTextPlugin是抽离css的插件。css-loader是处理css，会把url(xxx.png)处理成require，然后通过对应后缀名的其他加载器进行处理。==如果是线上环境，css会进行压缩，很多配置要进行调整如果直接采用默认的，转换后的css会出现一些问题，常见问题如：</p>
<ul>
<li>问题一，压缩后字体文件不能处理。解决方法：把iconfont.css里面的注释删除掉即可</li>
<li>问题二，压缩后的px单位会转换成pc,pt。解决方法：在加载器里面加上-convertValues参数。</li>
<li>问题三，css require的优先级问题，按照常理是后require的css是后加载。但是在实践过程中，(1)通过import引入的js模块中引入的css是优先于require引入的js模块中引入的css；(2)js中require的css名称如果和js所在模块的文件夹名字相同即使部分相同的话，优先级也会提高。</li>
<li>关于更多的问题请参照Loader配置。<br>图片字体文件加载器，file-loader：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.(png|jpg|gif|woff|woff2|ttf|eot|svg)$/,</div><div class="line">    loader: &quot;file-loader?name=[name]_[sha512:hash:base64:7].[ext]&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对一些图片和字体资源进行加载，我们会把相关文件抽离出来进行名字加上hash值的前7位做了处理后的名字。<br>html加载器;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.html/,</div><div class="line">    loader: &quot;html-loader&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="gulp脚本文件-重要"><a href="#gulp脚本文件-重要" class="headerlink" title="gulp脚本文件(重要)"></a>gulp脚本文件(重要)</h3><p>gulpfile.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    argv = require(&apos;yargs&apos;).argv,</div><div class="line">    fs = require(&apos;fs&apos;),</div><div class="line">    fse = require(&apos;fs-extra&apos;),</div><div class="line">    path = require(&apos;path&apos;),</div><div class="line">    util = require(&apos;util&apos;);</div><div class="line">var webpack = require(&quot;webpack&quot;),</div><div class="line">    ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</div><div class="line"></div><div class="line">var isWatch = true;</div><div class="line">var isProduct = false;</div><div class="line">var project = &apos;iwjw-pc&apos;;</div><div class="line">//gulp --product</div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">    isProduct = argv.product;</div><div class="line">    isWatch = !isProduct;</div><div class="line"></div><div class="line">    console.log(&apos;正在处理：&apos; + (isProduct ? &apos;线上&apos; : &apos;本地&apos;) + &apos;环境&apos;);</div><div class="line"></div><div class="line">    fse.emptydirSync(&apos;./dist&apos;);</div><div class="line"></div><div class="line">    gulp.start(&apos;webpack&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//webpack静态处理</div><div class="line">gulp.task(&apos;webpack&apos;, function(callback) &#123;</div><div class="line">    var minfy = [];</div><div class="line">    isProduct &amp;&amp; minfy.push(new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">        compress: &#123;</div><div class="line">            warnings: false</div><div class="line">        &#125;,</div><div class="line">        mangle: &#123;</div><div class="line">            except: [&apos;$&apos;, &apos;m&apos;, &apos;webpackJsonpCallback&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">    //webpack配置文件</div><div class="line">    var config = &#123;</div><div class="line">        watch: isWatch,</div><div class="line">        entry: &#123;</div><div class="line">            index: &apos;./index.js&apos;,</div><div class="line">            common: [</div><div class="line">                &apos;jquery&apos;,</div><div class="line">                &apos;understore&apos;,</div><div class="line">                &apos;template&apos;,</div><div class="line">                &apos;store&apos;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        debug: true,</div><div class="line"></div><div class="line">        devtool: (isProduct ? false : &apos;source-map&apos;),</div><div class="line"></div><div class="line">        output: &#123;</div><div class="line">            path: &apos;./dist/&apos;,</div><div class="line">            filename: &apos;[name].js&apos;,</div><div class="line">            publicPath: &apos;&apos;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        resolve: &#123;</div><div class="line">            alias: &#123;</div><div class="line">                jquery: path.resolve(&apos;../global/lib/jquery.js&apos;),</div><div class="line">                template: path.resolve(&apos;../global/lib/template.js&apos;),</div><div class="line">                understore: path.resolve(&apos;../global/lib/underscore.js&apos;),</div><div class="line">                store: path.resolve(&apos;../global/lib/store.js&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line"></div><div class="line">        plugins: [</div><div class="line">            new webpack.ProvidePlugin(&#123;</div><div class="line">                $: &apos;jquery&apos;,</div><div class="line">                jQuery: &apos;jquery&apos;,</div><div class="line">                template: &apos;template&apos;,</div><div class="line">                store: &apos;store&apos;,</div><div class="line">                _: &apos;understore&apos;</div><div class="line">            &#125;),</div><div class="line">            new webpack.optimize.DedupePlugin(),</div><div class="line">            new ExtractTextPlugin(&quot;[name].css&quot;),</div><div class="line">            new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;, &apos;common.js&apos;)</div><div class="line">        ].concat(minfy),</div><div class="line">        module: &#123;</div><div class="line">            loaders: [&#123;</div><div class="line">                test: /\.js[x]?$/,</div><div class="line">                exclude: /node_modules/,</div><div class="line">                loader: &apos;babel-loader&apos;,</div><div class="line">                query: &#123;</div><div class="line">                    compact: false</div><div class="line">                &#125;</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.css$/,</div><div class="line">                loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues&apos;)</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.less$/,</div><div class="line">                loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!less-loader&apos;)</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.scss$/,</div><div class="line">                loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!sass-loader&apos;)</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.(png|jpg|gif|woff|woff2|ttf|eot|svg)$/,</div><div class="line">                loader: &quot;file-loader?name=[name]_[sha512:hash:base64:7].[ext]&quot;</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.html/,</div><div class="line">                loader: &quot;html-loader&quot;</div><div class="line">            &#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;; </div><div class="line">    webpack(config, function(err, stats) &#123;</div><div class="line">        console.log(stats.toString());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;sham&apos;, function()&#123;</div><div class="line">    gulp.src(&apos;../global/lib/es5-shim-sham.js&apos;).pipe(gulp.dest(&apos;./dist&apos;));</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>pacakge.json（根据项目情况配置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;name&quot;: &quot;iwfe&quot;,</div><div class="line">&quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">&quot;private&quot;: true,</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;node ./bin/server&quot;</div><div class="line">&#125;,</div><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">  &quot;babel-loader&quot;: &quot;^5.3.2&quot;,</div><div class="line">  &quot;bundle-loader&quot;: &quot;^0.5.4&quot;,</div><div class="line">  &quot;css-loader&quot;: &quot;^0.16.0&quot;,</div><div class="line">  &quot;exports-loader&quot;: &quot;^0.6.2&quot;,</div><div class="line">  &quot;extract-text-webpack-plugin&quot;: &quot;^0.8.2&quot;,</div><div class="line">  &quot;file-loader&quot;: &quot;~0.8.4&quot;,</div><div class="line">  &quot;fs-extra&quot;: &quot;*&quot;,</div><div class="line">  &quot;html-loader&quot;: &quot;^0.4.0&quot;,</div><div class="line">  &quot;imports-loader&quot;: &quot;^0.6.5&quot;,</div><div class="line">  &quot;jquery&quot;: &quot;~2.1.4&quot;,</div><div class="line">  &quot;sass-loader&quot;: &quot;^3.1.2&quot;,</div><div class="line">  &quot;source-map-loader&quot;: &quot;^0.1.5&quot;,</div><div class="line">  &quot;style-loader&quot;: &quot;~0.12.3&quot;,</div><div class="line">  &quot;through2&quot;: &quot;*&quot;,</div><div class="line">  &quot;url-loader&quot;: &quot;~0.5.6&quot;,</div><div class="line">  &quot;webpack&quot;: &quot;*&quot;,</div><div class="line">  &quot;webpack-dev-server&quot;: &quot;^1.10.1&quot;,</div><div class="line">  &quot;yargs&quot;: &quot;*&quot;,</div><div class="line">  &quot;gulp-zip&quot;: &quot;*&quot;</div><div class="line">&#125;,</div><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;gulp&quot;: &quot;*&quot;,</div><div class="line">  &quot;gulp-util&quot;: &quot;*&quot;</div><div class="line">&#125;,</div><div class="line">&quot;description&quot;: &quot;前端静态库&quot;,</div><div class="line">&quot;repository&quot;: &#123;</div><div class="line">  &quot;type&quot;: &quot;git&quot;,</div><div class="line">  &quot;url&quot;: &quot;xxx&quot;</div><div class="line">&#125;,</div><div class="line">&quot;author&quot;: &quot;jade&quot;,</div><div class="line">&quot;license&quot;: &quot;ISC&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">http://www.ydcss.com/archives/18</a><br><a href="https://github.com/webpack" target="_blank" rel="external">https://github.com/webpack</a></p>]]></content>
    
    <summary type="html">
    
      Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。
    
    </summary>
    
      <category term="gulp" scheme="http://code.youmeek.com/categories/gulp/"/>
    
      <category term="前端" scheme="http://code.youmeek.com/categories/gulp/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="webpack" scheme="http://code.youmeek.com/tags/webpack/"/>
    
      <category term="gulp" scheme="http://code.youmeek.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Swift基础语法</title>
    <link href="http://code.youmeek.com/2016/12/05/swift/"/>
    <id>http://code.youmeek.com/2016/12/05/swift/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-01-24T08:23:08.864Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自Swift中文开发组，感谢翻译者的分享。<br>本文将分几部分对Swift对iOS的语法做讲解。本文为第一节，主要讲解基础语法。<br>常量和变量</p>
<p>常量和变量把一个名字（比如maximumNumberOfLoginAttempts或者welcomeMessage）和一个指定类型的值（比如数字10或者字符串”Hello”）关联起来。常量的值一旦设定就不能改变，而变量的值可以随意更改。<br>声明常量和变量</p>
<p>常量和变量必须在使用前声明，用let来声明常量，用var来声明变量。下面的例子展示了如何用常量和变量来记录用户尝试登录的次数：<br>[html] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let maximumNumberOfLoginAttempts = 10<br>var currentLoginAttempt = 0<br>这两行代码可以被理解为：“声明一个名字是maximumNumberOfLoginAttempts的新常量，并给它一个值10。然后，声明一个名字是currentLoginAttempt的变量并将它的值初始化为0.”</p>
<p>在这个例子中，允许的最大尝试登录次数被声明为一个常量，因为这个值不会改变。当前尝试登录次数被声明为一个变量，因为每次尝试登录失败的时候都需要增加这个值。</p>
<p>你可以在一行中声明多个常量或者多个变量，用逗号隔开：<br>[html] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var x = 0.0, y = 0.0, z = 0.0<br>注意：如果你的代码中有不需要改变的值，请使用let关键字将它声明为常量。只将需要改变的值声明为变量。<br>类型标注</p>
<p>当你声明常量或者变量的时候可以加上类型标注(type annotation)，说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。</p>
<p>这个例子给welcomeMessage变量添加了类型标注，表示这个变量可以存储String类型的值：<br>[html] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var welcomeMessage: String<br>声明中的冒号代表着“是…类型”，所以这行代码可以被理解为：“声明一个类型为String，名字为welcomeMessage的变量。”</p>
<p>“类型为String”的意思是“可以存储任意String类型的值。”</p>
<p>welcomeMessage变量现在可以被设置成任意字符串：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>welcomeMessage = “Hello”<br>注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给welcomeMessage赋初始值，所以变量welcomeMessage的类型是通过一个类型标注指定的，而不是通过初始值推断的。<br>常量和变量的命名</p>
<p>你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let π = 3.14159<br>let 你好 = “你好世界”<br>常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>
<p>一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。<br>注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。<br>你可以更改现有的变量值为其他同类型的值，在下面的例子中，friendlyWelcome的值从”Hello!”改为了”Bonjour!”:<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var friendlyWelcome = “Hello!”<br>friendlyWelcome = “Bonjour!”<br>// friendlyWelcome 现在是 “Bonjour!”<br>与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let languageName = “Swift”<br>languageName = “Swift++”<br>// 这会报编译时错误 - languageName 不可改变<br>输出常量和变量</p>
<p>你可以用println函数来输出当前常量或变量的值:<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(friendlyWelcome) // 输出 “Bonjour!”<br>println是一个用来输出的全局函数，输出的内容会在最后换行。如果你用 Xcode，println将会输出内容到“console”面板上。(另一种函数叫print，唯一区别是在输出内容最后不会换行。)</p>
<p>println函数输出传入的String值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“This is a string”) // 输出 “This is a string”<br>与 Cocoa 里的NSLog函数类似的是，println函数可以输出更复杂的信息。这些信息可以包含当前常量和变量的值。</p>
<p>Swift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“The current value of friendlyWelcome is (friendlyWelcome)”)<br>// 输出 “The current value of friendlyWelcome is Bonjour!<br>注意：字符串插值所有可用的选项，请参考字符串插值。</p>
<p>注释</p>
<p>请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。</p>
<p>Swift 中的注释与C 语言的注释非常相似。单行注释以双正斜杠作(//)为起始标记；<br>// 这是一个注释<br>你也可以进行多行注释，其起始标记为单个正斜杠后跟随一个星号(/<em>)，终止标记为一个星号后跟随单个正斜杠(</em>/)<br>/<em> 这是一个, 多行注释 </em>/<br>与C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：<br>/<em> 这是第一个多行注释的开头<br>/</em> 这是第二个被嵌套的多行注释 <em>/<br>这是第一个多行注释的结尾 </em>/<br>通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。</p>
<p>分号</p>
<p>与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let cat = “<br>整数</p>
<p>整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。</p>
<p>Swift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是UInt8，32位有符号整数类型是Int32。就像 Swift 的其他类型一样，整数类型采用大写命名法。<br>整数范围</p>
<p>你可以访问不同整数类型的min和max属性来获取对应类型的最大值和最小值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let minValue = UInt8.min // minValue 为 0，是 UInt8 类型的最小值<br>let maxValue = UInt8.max // maxValue 为 255，是 UInt8 类型的最大值<br>Int</p>
<p>一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：<br>在32位平台上，Int和Int32长度相同。<br>在64位平台上，Int和Int64长度相同。</p>
<p>除非你需要特定长度的整数，一般来说使用Int就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，Int可以存储的整数范围也可以达到-2147483648~2147483647，大多数时候这已经足够大了。<br>UInt</p>
<p>Swift 也提供了一个特殊的无符号类型UInt，长度与当前平台的原生字长相同：<br>在32位平台上，UInt和UInt32长度相同。<br>在64位平台上，UInt和UInt64长度相同。<br>注意：尽量不要使用UInt，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用Int，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推测，请参考类型安全和类型推测。<br>浮点数</p>
<p>浮点数是有小数部分的数字，比如3.14159，0.1和-273.15。</p>
<p>浮点类型比整数类型表示的范围更大，可以存储比Int类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：<br>Double表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。<br>Float表示32位浮点数。精度要求不高的话可以使用此类型。<br>注意：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。<br>类型安全和类型推测</p>
<p>Swift 是一个类型安全(type safe )的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个String，你绝对不可能不小心传进去一个Int。</p>
<p>由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查(type checks)，并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。</p>
<p>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推测(type inference)来选择合适的类型。有了类型推测，编译器可以在编译代码的时候自动推测出表达式的类型。原理很简单，只要检查你赋的值即可。</p>
<p>因为有类型推测，和 C 或者 Objective-C 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。</p>
<p>当你声明常量或者变量并赋初值的时候类型推测非常有用。当你在声明常量或者变量的时候赋给它们一个字面量(literal value 或 literal)即可触发类型推测。（字面量就是会直接出现在你代码中的值，比如42和3.14159。）</p>
<p>例如，如果你给一个新常量赋值42并且没有标明类型，Swift 可以推测出常量类型是Int，因为你给它赋的初始值看起来像一个整数：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let meaningOfLife = 42 // meaningOfLife 会被推测为 Int 类型<br>同理，如果你没有给浮点字面量标明类型，Swift 会推测你想要的是Double：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let pi = 3.14159 // pi 会被推测为 Double 类型<br>当推测浮点数的类型时，Swift 总是会选择Double而不是Float。</p>
<p>如果表达式中同时出现了整数和浮点数，会被推测为Double类型：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let anotherPi = 3 + 0.14159 // anotherPi 会被推测为 Double 类型<br>原始值3没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推测为Double类型。<br>数值型字面量</p>
<p>整数字面量可以被写作：<br>一个十进制数，没有前缀<br>一个二进制数，前缀是0b<br>一个八进制数，前缀是0o<br>一个十六进制数，前缀是0x</p>
<p>下面的所有整数字面量的十进制值都是17:<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let decimalInteger = 17<br>let binaryInteger = 0b10001 // 二进制的17<br>let octalInteger = 0o21 // 八进制的17<br>let hexadecimalInteger = 0x11 // 十六进制的17<br>浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是0x）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。浮点字面量还有一个可选的指数(exponent)，在十进制浮点数中通过大写或者小写的e来指定，在十六进制浮点数中通过大写或者小写的p来指定。</p>
<p>如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积：<br>1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。<br>1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。</p>
<p>如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积：<br>0xFp2 表示 $15 × 2^{2}$，等于 60.0。<br>0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。</p>
<p>下面的这些浮点字面量都等于十进制的12.1875：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let decimalDouble = 12.1875<br>let exponentDouble = 1.21875e1<br>let hexadecimalDouble = 0xC.3p0<br>数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let paddedDouble = 000123.456<br>let oneMillion = 1_000_000<br>let justOverOneMillion = 1_000_000.000_000_1<br>数值型类型转换</p>
<p>通常来讲，即使代码中的整数常量和变量已知非负，也请使用Int类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推测。 只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。<br>整数转换</p>
<p>不同整数类型的变量和常量可以存储不同范围的数字。Int8类型的常量或者变量可以存储的数字范围是-128~127，而UInt8类型的常量或者变量能存储的数字范围是0~255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let cannotBeNegative: UInt8 = -1 // UInt8 类型不能存储负数，所以会报错<br>let tooBig: Int8 = Int8.max + 1 // Int8 类型不能存储超过最大值的数，所以会报错<br>由于每中整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。</p>
<p>要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量twoThousand是UInt16类型，然而常量one是Uint8类型。它们不能直接相加，因为它们类型不同。所以要调用UInt16(one)来创建一个新的UInt16数字并用one的值来初始化，然后使用这个新数字来计算：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let twoThousand: UInt16 = 2_000<br>let one: UInt8 = 1<br>let twoThousandAndOne = twoThousand + UInt16(one)<br>现在两个数字的类型都是UInt16，可以进行相加。目标常量twoThousandAndOne的类型被推测为UInt16，因为它是两个UInt16值的和。</p>
<p>SomeType(ofInitialValue)是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，UInt16有一个构造器，可以接受一个UInt8类型的值，所以这个构造器可以用现有的UInt8来创建一个新的UInt16。注意，你并不能传入任意类型的值，只能传入UInt16内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型），请参考扩展。<br>整数和浮点数转换</p>
<p>整数和浮点数的转换必须显式指定类型：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let three = 3<br>let pointOneFourOneFiveNine = 0.14159<br>let pi = Double(three) + pointOneFourOneFiveNine<br>// pi 等于 3.14159，所以被推测为 Double 类型<br>这个例子中，常量three的值被用来创建一个Double类型的值，所以加号两边的数类型相同。如果不进行转换，两者无法相加。</p>
<p>浮点数到整数的反向转换同样行，整数类型可以用Double或者Float类型来初始化：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let integerPi = Int(pi) // integerPi 等于 3，所以被推测为 Int 类型<br>当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说4.75会变成4，-3.9会变成-3。<br>注意：结合数字类常量和变量不同于结合数字类字面量。字面量3可以直接和字面量0.14159相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。<br>类型别名</p>
<p>类型别名(type aliases)就是给现有类型定义另一个名字。你可以使用typealias关键字来定义类型别名。</p>
<p>当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>typealias AudioSample = UInt16<br>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var maxAmplitudeFound = AudioSample.min // maxAmplitudeFound 现在是 0<br>本例中，AudioSample被定义为UInt16的一个别名。因为它是别名，AudioSample.min实际上是UInt16.min，所以会给maxAmplitudeFound赋一个初值0。<br>布尔值</p>
<p>Swift 有一个基本的布尔(Boolean)类型，叫做Bool。布尔值指逻辑上的(logical)，因为它们只能是真或者假。Swift 有两个布尔常量，true和false：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let orangesAreOrange = true<br>let turnipsAreDelicious = false<br>orangesAreOrange和turnipsAreDelicious的类型会被推测为Bool，因为它们的初值是布尔字面量。就像之前提到的Int和Double一样，如果你创建变量的时候给它们赋值true或者false，那你不需要将常量或者变量声明为Bool类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推测，这让 Swift 代码更加简洁并且可读性更高。</p>
<p>当你编写条件语句比如if语句的时候，布尔值非常有用：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if turnipsAreDelicious {<br>    println(“Mmm, tasty turnips!”)<br>} else {<br>    println(“Eww, turnips are horrible.”)<br>}<br>// 输出 “Eww, turnips are horrible.”<br>条件语句，例如if，请参考控制流。</p>
<p>如果你在需要使用Bool类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let i = 1 if i { // 这个例子不会通过编译，会报错 }<br>然而，下面的例子是合法的：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let i = 1 if i == 1 { // 这个例子会编译成功 }<br>i == 1的比较结果是Bool类型，所以第二个例子可以通过类型检查。类似i == 1这样的比较，请参考基本操作符。</p>
<p>和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。<br>元组</p>
<p>元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。</p>
<p>下面这个例子中，(404, “Not Found”)是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个404 Not Found状态码。<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let http404Error = (404, “Not Found”) // http404Error 的类型是 (Int, String)，值是 (404, “Not Found”)<br>(404, “Not Found”)元组把一个Int值和一个String值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为(Int, String)的元组”。</p>
<p>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为(Int, Int, Int)或者(String, Bool)或者其他任何你想要的组合的元组。</p>
<p>你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let (statusCode, statusMessage) = http404Error<br>println(“The status code is (statusCode)”)<br>// 输出 “The status code is 404”<br>println(“The status message is (statusMessage)”)<br>// 输出 “The status message is Not Found”<br>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（<em>）标记：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let (justTheStatusCode, </em>) = http404Error<br>println(“The status code is (justTheStatusCode)”)<br>// 输出 “The status code is 404”<br>此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“The status code is (http404Error.0)”) // 输出 “The status code is 404”<br>println(“The status message is (http404Error.1)”) // 输出 “The status message is Not Found”<br>你可以在定义元组的时候给单个元素命名：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let http200Status = (statusCode: 200, description: “OK”)<br>给元组中的元素命名后，你可以通过名字来获取这些元素的值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“The status code is (http200Status.statusCode)”) // 输出 “The status code is 200”<br>println(“The status message is (http200Status.description)”) // 输出 “The status message is OK”<br>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个(Int, String)元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。请参考[函数参数与返回值(06_Functions.html#Function_Parameters_and_Return_Values)。<br>注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。请参考类和结构体。<br>可选</p>
<p>使用可选（optionals）来处理值可能缺失的情况。可选表示：<br>有值，等于 x<br>或者<br>没有值<br>注意：C 和 Objective-C 中并没有可选这个概念。最接近的是 Objective-C 中的一个特性，一个方法要不返回一个对象要不返回nil，nil表示“缺少一个合法的对象”。然而，这只对对象起作用——对于结构体，基本的 C 类型或者枚举类型不起作用。对于这些类型，Objective-C 方法一般会返回一个特殊值（比如NSNotFound）来暗示值缺失。这种方法假设方法的调用者知道并记得对特殊值进行判断。然而，Swift 的可选可以让你暗示任意类型的值缺失，并不需要一个特殊值。<br>来看一个例子。Swift 的String类型有一个叫做toInt的方法，作用是将一个String值转换成一个Int值。然而，并不是所有的字符串都可以转换成一个整数。字符串”123”可以被转换成数字123，但是字符串”hello, world”不行。</p>
<p>下面的例子使用toInt方法来尝试将一个String转换成Int：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let possibleNumber = “123”<br>let convertedNumber = possibleNumber.toInt()<br>// convertedNumber 被推测为类型 “Int?”， 或者类型 “optional Int”<br>因为toInt方法可能会失败，所以它返回一个可选的（optional）Int，而不是一个Int。一个可选的Int被写作Int?而不是Int。问号暗示包含的值是可选，也就是说可能包含Int值也可能不包含值。（不能包含其他任何值比如Bool值或者String值。只能是Int或者什么都没有。）<br>if 语句以及强制解析</p>
<p>你可以使用if语句来判断一个可选是否包含值。如果可选有值，结果是true；如果没有值，结果是false。</p>
<p>当你确定可选包确实含值之后，你可以在可选的名字后面加一个感叹号(!)来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if convertedNumber {<br>    println(“(possibleNumber) has an integer value of (convertedNumber!)”)<br>} else {<br>    println(“(possibleNumber) could not be converted to an integer”)<br>}<br>// 输出 “123 has an integer value of 123”<br>更多关于if语句的内容，请参考控制流。<br>注意：使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。<br>可选绑定</p>
<p>使用可选绑定（optional binding）来判断可选是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选的值进行判断并把值赋给一个常量或者变量。if和while语句，请参考控制流。</p>
<p>像下面这样在if语句中写一个可选绑定：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if let constantName = someOptional { statements }<br>你可以像上面这样使用可选绑定来重写possibleNumber这个例子：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if let actualNumber = possibleNumber.toInt() {<br>    println(“(possibleNumber) has an integer value of (actualNumber)”)<br>} else {<br>    println(“(possibleNumber) could not be converted to an integer”)<br>}<br>// 输出 “123 has an integer value of 123”<br>这段代码可以被理解为：“如果possibleNumber.toInt返回的可选Int包含一个值，创建一个叫做actualNumber的新常量并将可选包含的值赋给它。”</p>
<p>如果转换成功，actualNumber常量可以在if语句的第一个分支中使用。它已经被可选包含的值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，actualNumber只被用来输出转换结果。</p>
<p>你可以在可选绑定中使用常量和变量。如果你想在if语句的第一个分支中操作actualNumber的值，你可以改成if var actualNumber，这样可选包含的值就会被赋给一个变量而非常量。<br>nil</p>
<p>你可以给可选变量赋值为nil来表示它没有值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var serverResponseCode: Int? = 404  // serverResponseCode 包含一个可选的 Int 值 404<br>serverResponseCode = nil // serverResponseCode 现在不包含值<br>注意：nil不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。<br>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var surveyAnswer: String? // surveyAnswer 被自动设置为 nil</p>
<p>注意：Swift 的nil和 Objective-C 中的nil并不一样。在 Objective-C 中，nil是一个指向不存在对象的指针。在 Swift 中，nil不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选都可以被设置为nil，不只是对象类型。<br>隐式解析可选</p>
<p>如上所述，可选暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。</p>
<p>有时候在程序架构中，第一次被赋值之后，可以确定一个可选总会有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。</p>
<p>这种类型的可选被定义为隐式解析可选（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（String?）改成感叹号（String!）来声明一个隐式解析可选。</p>
<p>当可选被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选非常有用。隐式解析可选主要被用在 Swift 中类的构造过程中，请参考类实例之间的循环强引用。</p>
<p>一个隐式解析可选其实就是一个普通的可选，但是可以被当做非可选来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选String和隐式解析可选String之间的区别：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let possibleString: String? = “An optional string.”<br>println(possibleString!) // 需要惊叹号来获取值<br>// 输出 “An optional string.”<br>let assumedString: String! = “An implicitly unwrapped optional string.”<br>println(assumedString) // 不需要感叹号<br>// 输出 “An implicitly unwrapped optional string.”<br>你可以把隐式解析可选当做一个可以自动解析的可选。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。<br>注意：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。<br>你仍然可以把隐式解析可选当做普通可选来判断它是否包含值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if assumedString {<br>    println(assumedString)<br>}<br>// 输出 “An implicitly unwrapped optional string.”<br>你也可以在可选绑定中使用隐式解析可选来检查并解析它的值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if let definiteString = assumedString {<br>    println(definiteString)<br>}<br>// 输出 “An implicitly unwrapped optional string.”<br>注意：如果一个变量之后可能变成nil的话请不要使用隐式解析可选。如果你需要在变量的生命周期中判断是否是nil的话，请使用普通可选类型。</p>]]></content>
    
    <summary type="html">
    
      Swift基础语法3.0
    
    </summary>
    
      <category term="ios" scheme="http://code.youmeek.com/categories/ios/"/>
    
    
      <category term="ios" scheme="http://code.youmeek.com/tags/ios/"/>
    
      <category term="swift" scheme="http://code.youmeek.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>React Native的Navigator详解</title>
    <link href="http://code.youmeek.com/2016/12/05/React%20Native%E7%9A%84Navigator%E8%AF%A6%E8%A7%A3/"/>
    <id>http://code.youmeek.com/2016/12/05/React Native的Navigator详解/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-03-02T11:53:37.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前，通过官方文档，我们对<a href="http://blog.csdn.net/xiangzhihong8/article/details/52624367" target="_blank" rel="external">Navigator简介</a>。<br>在React Native开发中，官方推荐使用Navigator作为导航指示器，在早期的版本中ios/android中都使用Navigator作为通用导航栏，不过在在后来的版本中，由于Navigator对ios系统兼容较差，所以使用导航往往使用NavigatorIOS组件。</p>
<h1 id="Navigator和NavigatorIOS属性"><a href="#Navigator和NavigatorIOS属性" class="headerlink" title="Navigator和NavigatorIOS属性"></a>Navigator和NavigatorIOS属性</h1><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>Navigator设置方法: 初始化路由(initialRoute), 配置场景动画(configureScene), 渲染场景(renderScene)。如常见的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class SimpleView extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Navigator</div><div class="line">        style=&#123;&#123;flex:1&#125;&#125;</div><div class="line">        initialRoute=&#123;&#123;component: FirstPage&#125;&#125;</div><div class="line">        configureScene=&#123;this.configureScene&#125;</div><div class="line">        renderScene=&#123;this.renderScene&#125;/&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul>
<li>getCurrentRoutes()    该进行返回存在的路由列表信息</li>
<li>jumpBack()    该进行回退操作  但是该不会卸载(删除)当前的页面</li>
<li>jumpForward()    进行跳转到相当于当前页面的下一个页面</li>
<li>jumpTo(route)    根据传入的一个路由信息，跳转到一个指定的页面(该页面不会卸载删除)</li>
<li>push(route)     导航切换到一个新的页面中，新的页面进行压入栈。通过jumpForward()方法可以回退过去</li>
<li>pop()   当前页面弹出来，跳转到栈中下一个页面，并且卸载删除掉当前的页面</li>
<li>replace(route)   只用传入的路由的指定页面进行替换掉当前的页面</li>
<li>replaceAtIndex(route,index)     传入路由以及位置索引，使用该路由指定的页面跳转到指定位置的页面</li>
<li>replacePrevious(route)    传入路由，通过指定路由的页面替换掉前一个页面</li>
<li>resetTo(route)  进行导航到新的界面，并且重置整个路由栈</li>
<li>immediatelyResetRouteStack(routeStack)   该通过一个路由页面数组来进行重置路由栈</li>
<li>popToRoute(route)   进行弹出相关页面，跳转到指定路由的页面，弹出来的页面会被卸载删除</li>
<li>popToTop()  进行弹出页面，导航到栈中的第一个页面，弹出来的所有页面会被卸载删除</li>
</ul>
<h2 id="Navigator-IOS"><a href="#Navigator-IOS" class="headerlink" title="Navigator.IOS"></a>Navigator.IOS</h2><p>NavigatorIOS包装了UIKit的导航功能，可以使用左划功能来返回到上一界面。</p>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul>
<li>push(route) ：导航器跳转到一个新的路由。</li>
<li>pop() ：回到上一页。</li>
<li>popN(n) ：回到N页之前。当N=1的时候，效果和 pop() 一样。</li>
<li>replace(route) ：替换当前页的路由，并立即加载新路由的视图。</li>
<li>replacePrevious(route) ：替换上一页的路由/视图。</li>
<li>replacePreviousAndPop(route) ：替换上一页的路由/视图并且立刻切换回上一页。</li>
<li>resetTo(route) ：替换最顶级的路由并且回到它。</li>
<li>popToRoute(route)： 一直回到某个指定的路由。</li>
<li>popToTop() ：回到最顶层的路由。<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3>barTintColor : 导航条的背景颜色<br>initalRoute : 在RN 中导航名为“路由”（学过网络的应该明白这个词的意思）, 作用就是指路的，大家可以这么理解，这个属性是一个方法，用来初始化导航的。<br>itemWrapperStyle : 为每一项定制样式，例如设置每一个页面的背景颜色<br>navigationBarHidden : 为true , 隐藏导航栏。<br>shadowHidden : 是否隐藏阴影，true／false。<br>tintColor : 导航栏上按钮的颜色设置。<br>titleTextColor : 导航栏上字体的颜色 。<br>translucent : 导航栏是否是半透明的，true／false。<br>push(route) : 加载一个新的界面（视图或者路由）并且路由到该界面。<br>pop() : 返回到上一个页面。<br>popN(n) : 一次性返回N个界面，当n ＝ 1 时，即相当于pop（）方法的效果。<br>replace（route）：替换当前的路由。<br>replacePrevious(route) : 替换前一个页面的视图并且回退过去。<br>resetTo(route) : 取代最顶层的路由并且回退过去。<br>popToTop() : 回到最上层视图。<br>完整代码实例:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class NavigatorDemo extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;NavigatorIOS</div><div class="line">        style=&#123;styles.container&#125;</div><div class="line">        initialRoute=&#123;&#123;</div><div class="line">          title:&apos;movies&apos;,//这是navigationController的title。</div><div class="line">          component:SearchScreen,//注释：这里是要写的是相当于iOS开发里navigationController的rootViewController页面。</div><div class="line">        &#125;&#125;</div><div class="line">      /&gt;</div><div class="line"></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>二级页面逻辑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">class SearchScreen extends Component&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;131231232</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line"></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: &apos;white&apos;,</div><div class="line">    top:64,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line">module.exports = SearchScreen;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      React Native的Navigator详解
    
    </summary>
    
      <category term="React Native" scheme="http://code.youmeek.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://code.youmeek.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>迭代子模式</title>
    <link href="http://code.youmeek.com/2016/12/03/Iterate/"/>
    <id>http://code.youmeek.com/2016/12/03/Iterate/</id>
    <published>2016-12-02T16:00:00.000Z</published>
    <updated>2017-01-24T08:02:53.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>概念：在阎宏博士的《JAVA与模式》中关于迭代子模式的定义是这样的：迭代子模式又叫游标(Cursor)模式，是对象的行为模式。迭代子模式可以顺序地访问一个聚集中的元素而不必暴露聚集的内部表象（internal representation）。</p>
<h2 id="迭代子模式的意图及组成"><a href="#迭代子模式的意图及组成" class="headerlink" title="迭代子模式的意图及组成"></a>迭代子模式的意图及组成</h2><p>迭代子模式有两种实现方式，分别是白箱聚集与外禀迭代子和黑箱聚集于内禀迭代子。</p>
<h3 id="白箱聚集与外禀迭代子"><a href="#白箱聚集与外禀迭代子" class="headerlink" title="白箱聚集与外禀迭代子"></a>白箱聚集与外禀迭代子</h3><p>如果一个聚集的接口提供了可以用来修改聚集元素的方法，这个接口就是所谓的宽接口。<br>如果聚集对象为所有对象提供同一个接口，也就是宽接口的话，当然会满足迭代子模式对迭代子对象的要求。但是，这样会破坏对聚集对象的封装。这种提供宽接口的聚集叫做白箱聚集。聚集对象向外界提供同样的宽接口，如下图所示：<br><img src="http://img.blog.csdn.net/20161215214253592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>由于聚集自己实现迭代逻辑，并向外部提供适当的接口，使得迭代子可以从外部控制聚集元素的迭代过程。这样一来迭代子所控制的仅仅是一个游标而已，这种迭代子叫做游标迭代子（Cursor Iterator）。由于迭代子是在聚集结构之外的，因此这样的迭代子又叫做外禀迭代子（Extrinsic Iterator）。<br>一个白箱聚集向外界提供访问自己内部元素的接口（称作遍历方法或者Traversing Method），从而使外禀迭代子可以通过聚集的遍历方法实现迭代功能。<br>　　因为迭代的逻辑是由聚集对象本身提供的，所以这样的外禀迭代子角色往往仅仅保持迭代的游标位置。<br>　　一个典型的由白箱聚集与外禀迭代子组成的系统如下图所示：<br><img src="http://img.blog.csdn.net/20161215214425814?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="迭代子模式组成"><a href="#迭代子模式组成" class="headerlink" title="迭代子模式组成"></a>迭代子模式组成</h3><p>迭代子模式的组成主要有以下几个角色：<br><strong>抽象迭代子(Iterator)角色</strong>：此抽象角色定义出遍历元素所需的接口。<br><strong>具体迭代子(ConcreteIterator)角色</strong>：此角色实现了Iterator接口，并保持迭代过程中的游标位置。<br><strong>聚集(Aggregate)角色</strong>：此抽象角色给出创建迭代子(Iterator)对象的接口。<br><strong>具体聚集(ConcreteAggregate)角色</strong>：实现了创建迭代子(Iterator)对象的接口，返回一个合适的具体迭代子实例。<br><strong>客户端(Client)角色</strong>：持有对聚集及其迭代子对象的引用，调用迭代子对象的迭代接口，也有可能通过迭代子操作聚集元素的增加和删除。</p>
<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><p>抽象聚集角色类<br>这个角色规定出所有的具体聚集必须实现的接口。迭代子模式要求聚集对象必须有一个工厂方法，也就是createIterator()方法，以向外界提供迭代子对象的实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public abstract class Aggregate &#123;  </div><div class="line">    /** </div><div class="line">     * 工厂方法，创建相应迭代子对象的接口 </div><div class="line">     */  </div><div class="line">    public abstract Iterator createIterator();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体聚集角色类<br>实现了抽象聚集角色类所要求的接口，也就是createIterator()方法。此外，还有方法getElement()向外界提供聚集元素，而方法size()向外界提供聚集的大小等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class ConcreteAggregate extends Aggregate &#123;  </div><div class="line">      </div><div class="line">    private Object[] objArray = null;  </div><div class="line">    /** </div><div class="line">     * 构造方法，传入聚合对象的具体内容 </div><div class="line">     */  </div><div class="line">    public ConcreteAggregate(Object[] objArray)&#123;  </div><div class="line">        this.objArray = objArray;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    @Override  </div><div class="line">    public Iterator createIterator() &#123;  </div><div class="line">          </div><div class="line">        return new ConcreteIterator(this);  </div><div class="line">    &#125;  </div><div class="line">    /** </div><div class="line">     * 取值方法：向外界提供聚集元素 </div><div class="line">     */  </div><div class="line">    public Object getElement(int index)&#123;  </div><div class="line">          </div><div class="line">        if(index &lt; objArray.length)&#123;  </div><div class="line">            return objArray[index];  </div><div class="line">        &#125;else&#123;  </div><div class="line">            return null;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    /** </div><div class="line">     * 取值方法：向外界提供聚集的大小 </div><div class="line">     */  </div><div class="line">    public int size()&#123;  </div><div class="line">        return objArray.length;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>抽象迭代子角色类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public interface Iterator &#123;  </div><div class="line">    /** </div><div class="line">     * 迭代方法：移动到第一个元素 </div><div class="line">     */  </div><div class="line">    public void first();  </div><div class="line">    /** </div><div class="line">     * 迭代方法：移动到下一个元素 </div><div class="line">     */  </div><div class="line">    public void next();  </div><div class="line">    /** </div><div class="line">     * 迭代方法：是否为最后一个元素 </div><div class="line">     */  </div><div class="line">    public boolean isDone();  </div><div class="line">    /** </div><div class="line">     * 迭代方法：返还当前元素 </div><div class="line">     */  </div><div class="line">    public Object currentItem();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体迭代子角色类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class ConcreteIterator implements Iterator &#123;  </div><div class="line">    //持有被迭代的具体的聚合对象  </div><div class="line">    private ConcreteAggregate agg;  </div><div class="line">    //内部索引，记录当前迭代到的索引位置  </div><div class="line">    private int index = 0;  </div><div class="line">    //记录当前聚集对象的大小  </div><div class="line">    private int size = 0;  </div><div class="line">      </div><div class="line">    public ConcreteIterator(ConcreteAggregate agg)&#123;  </div><div class="line">        this.agg = agg;  </div><div class="line">        this.size = agg.size();  </div><div class="line">        index = 0;  </div><div class="line">    &#125;  </div><div class="line">    /** </div><div class="line">     * 迭代方法：返还当前元素 </div><div class="line">     */  </div><div class="line">    @Override  </div><div class="line">    public Object currentItem() &#123;  </div><div class="line">        return agg.getElement(index);  </div><div class="line">    &#125;  </div><div class="line">    /** </div><div class="line">     * 迭代方法：移动到第一个元素 </div><div class="line">     */  </div><div class="line">    @Override  </div><div class="line">    public void first() &#123;  </div><div class="line">          </div><div class="line">        index = 0;  </div><div class="line">    &#125;  </div><div class="line">    /** </div><div class="line">     * 迭代方法：是否为最后一个元素 </div><div class="line">     */  </div><div class="line">    @Override  </div><div class="line">    public boolean isDone() &#123;  </div><div class="line">        return (index &gt;= size);  </div><div class="line">    &#125;  </div><div class="line">    /** </div><div class="line">     * 迭代方法：移动到下一个元素 </div><div class="line">     */  </div><div class="line">    @Override  </div><div class="line">    public void next() &#123;  </div><div class="line">  </div><div class="line">        if(index &lt; size)  </div><div class="line">        &#123;  </div><div class="line">            index ++;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端测试类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;  </div><div class="line">    public void operation()&#123;  </div><div class="line">        Object[] objArray = &#123;&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;,&quot;Four&quot;,&quot;Five&quot;,&quot;Six&quot;&#125;;  </div><div class="line">        //创建聚合对象  </div><div class="line">        Aggregate agg = new ConcreteAggregate(objArray);  </div><div class="line">        //循环输出聚合对象中的值  </div><div class="line">        Iterator it = agg.createIterator();  </div><div class="line">        while(!it.isDone())&#123;  </div><div class="line">            System.out.println(it.currentItem());  </div><div class="line">            it.next();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">          </div><div class="line">        Client client = new Client();  </div><div class="line">        client.operation();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="黑箱聚集与内禀迭代子"><a href="#黑箱聚集与内禀迭代子" class="headerlink" title="黑箱聚集与内禀迭代子"></a>黑箱聚集与内禀迭代子</h3><p>如果一个聚集的接口没有提供修改聚集元素的方法，这样的接口就是所谓的窄接口。<br>　　聚集对象为迭代子对象提供一个宽接口，而为其他对象提供一个窄接口。换言之，聚集对象的内部结构应当对迭代子对象适当公开，以便迭代子对象能够对聚集对象有足够的了解，从而可以进行迭代操作。但是，聚集对象应当避免向其他的对象提供这些方法，因为其他对象应当经过迭代子对象进行这些工作，而不是直接操控聚集对象。<br><img src="http://img.blog.csdn.net/20161215215023673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>在JAVA语言中，实现双重接口的办法就是将迭代子类设计成聚集类的内部成员类。这样迭代子对象将可以像聚集对象的内部成员一样访问聚集对象的内部结构。下面给出一个示意性的实现，说明这种双重接口的结构时怎么样产生的，以及使用了双重接口结构之后迭代子模式的实现方案。这种同时保证聚集对象的封装和迭代子功能的实现的方案叫做黑箱实现方案。<br>　　由于迭代子是聚集的内部类，迭代子可以自由访问聚集的元素，所以迭代子可以自行实现迭代功能并控制对聚集元素的迭代逻辑。由于迭代子是在聚集的结构之内定义的，因此这样的迭代子又叫做内禀迭代子（Intrinsic Iterator）。<br>　　为了说明黑箱方案的细节，这里给出一个示意性的黑箱实现。在这个实现里，聚集类ConcreteAggregate含有一个内部成员类ConcreteIterator，也就是实现了抽象迭代子接口的具体迭代子类，同时聚集并不向外界提供访问自己内部元素的方法。</p>
<h4 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h4><p>抽象聚集角色类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public abstract class Aggregate &#123;</div><div class="line">    /**</div><div class="line">     * 工厂方法，创建相应迭代子对象的接口</div><div class="line">     */</div><div class="line">    public abstract Iterator createIterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>抽象迭代子角色类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public interface Iterator &#123;</div><div class="line">    /**</div><div class="line">     * 迭代方法：移动到第一个元素</div><div class="line">     */</div><div class="line">    public void first();</div><div class="line">    /**</div><div class="line">     * 迭代方法：移动到下一个元素</div><div class="line">     */</div><div class="line">    public void next();</div><div class="line">    /**</div><div class="line">     * 迭代方法：是否为最后一个元素</div><div class="line">     */</div><div class="line">    public boolean isDone();</div><div class="line">    /**</div><div class="line">     * 迭代方法：返还当前元素</div><div class="line">     */</div><div class="line">    public Object currentItem();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体聚集角色类，实现了抽象聚集角色所要求的接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">public class ConcreteAggregate extends Aggregate &#123;</div><div class="line">    </div><div class="line">    private Object[] objArray = null;</div><div class="line">    /**</div><div class="line">     * 构造方法，传入聚合对象的具体内容</div><div class="line">     */</div><div class="line">    public ConcreteAggregate(Object[] objArray)&#123;</div><div class="line">        this.objArray = objArray;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Iterator createIterator() &#123;</div><div class="line"></div><div class="line">        return new ConcreteIterator();</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 内部成员类，具体迭代子类</div><div class="line">     */</div><div class="line">    private class ConcreteIterator implements Iterator</div><div class="line">    &#123;</div><div class="line">        //内部索引，记录当前迭代到的索引位置</div><div class="line">        private int index = 0;</div><div class="line">        //记录当前聚集对象的大小</div><div class="line">        private int size = 0;</div><div class="line">        /**</div><div class="line">         * 构造函数</div><div class="line">         */</div><div class="line">        public ConcreteIterator()&#123;</div><div class="line">            </div><div class="line">            this.size = objArray.length;</div><div class="line">            index = 0;</div><div class="line">        &#125;</div><div class="line">        /**</div><div class="line">         * 迭代方法：返还当前元素</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public Object currentItem() &#123;</div><div class="line">            return objArray[index];</div><div class="line">        &#125;</div><div class="line">        /**</div><div class="line">         * 迭代方法：移动到第一个元素</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void first() &#123;</div><div class="line">            </div><div class="line">            index = 0;</div><div class="line">        &#125;</div><div class="line">        /**</div><div class="line">         * 迭代方法：是否为最后一个元素</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public boolean isDone() &#123;</div><div class="line">            return (index &gt;= size);</div><div class="line">        &#125;</div><div class="line">        /**</div><div class="line">         * 迭代方法：移动到下一个元素</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void next() &#123;</div><div class="line"></div><div class="line">            if(index &lt; size)</div><div class="line">            &#123;</div><div class="line">                index ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端测试类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line"></div><div class="line">    public void operation()&#123;</div><div class="line">        Object[] objArray = &#123;&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;,&quot;Four&quot;,&quot;Five&quot;,&quot;Six&quot;&#125;;</div><div class="line">        //创建聚合对象</div><div class="line">        Aggregate agg = new ConcreteAggregate(objArray);</div><div class="line">        //循环输出聚合对象中的值</div><div class="line">        Iterator it = agg.createIterator();</div><div class="line">        while(!it.isDone())&#123;</div><div class="line">            System.out.println(it.currentItem());</div><div class="line">            it.next();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        </div><div class="line">        Client client = new Client();</div><div class="line">        client.operation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用迭代子模式的优点"><a href="#使用迭代子模式的优点" class="headerlink" title="使用迭代子模式的优点"></a>使用迭代子模式的优点</h2><p>　（1）迭代子模式简化了聚集的接口。迭代子具备了一个遍历接口，这样聚集的接口就不必具备遍历接口。<br>　　（2）每一个聚集对象都可以有一个或多个迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。因此，一个聚集对象可以同时有几个迭代在进行之中。<br>　　（3）由于遍历算法被封装在迭代子角色里面，因此迭代的算法可以独立于聚集角色变化。</p>]]></content>
    
    <summary type="html">
    
      迭代子模式
    
    </summary>
    
      <category term="设计模式" scheme="http://code.youmeek.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="迭代子模式" scheme="http://code.youmeek.com/tags/%E8%BF%AD%E4%BB%A3%E5%AD%90%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://code.youmeek.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://code.youmeek.com/2016/12/01/robot/"/>
    <id>http://code.youmeek.com/2016/12/01/robot/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2017-01-24T08:02:37.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>什么是机器学习？<br>机器学习是英文名称Machine Learning(简称ML)的直译。机器学习涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。<br>相对于传统的计算机工作，我们给它一串指令，然后它遵照这个指令一步步执行下去即可。机器学习根本不接受你输入的指令，相反，它只接受你输入的数据!也就是说它某种意义上具有了我们人处理事情的能力。</p>
<h2 id="机器学习发展史"><a href="#机器学习发展史" class="headerlink" title="机器学习发展史"></a>机器学习发展史</h2><p>机器学习是人工智能研究较为年轻的分支，它的发展过程大体上可分为4个时期。<br>第一阶段是在20世纪50年代中叶到60年代中叶，属于热烈时期。<br>第二阶段是在20世纪60年代中叶至70年代中叶，被称为机器学习的冷静时期。<br>第三阶段是从20世纪70年代中叶至80年代中叶，称为复兴时期。<br>机器学习的最新阶段始于1986年。机器学习进入新阶段的重要表现在下列诸方面：<br>(1) 机器学习已成为新的边缘学科并在高校形成一门课程。它综合应用心理学、生物学和神经生理学以及数学、自动化和计算机科学形成机器学习理论基础。<br>(2) 结合各种学习方法，取长补短的多种形式的集成学习系统研究正在兴起。特别是连接学习符号学习的耦合可以更好地解决连续性信号处理中知识与技能的获取与求精问题而受到重视。<br>(3) 机器学习与人工智能各种基础问题的统一性观点正在形成。例如学习与问题求解结合进行、知识表达便于学习的观点产生了通用智能系统SOAR的组块学习。类比学习与问题求解结合的基于案例方法已成为经验学习的重要方向。<br>(4) 各种学习方法的应用范围不断扩大，一部分已形成商品。归纳学习的知识获取工具已在诊断分类型专家系统中广泛使用。连接学习在声图文识别中占优势。分析学习已用于设计综合型专家系统。遗传算法与强化学习在工程控制中有较好的应用前景。与符号系统耦合的神经网络连接学习将在企业的智能管理与智能机器人运动规划中发挥作用。<br>(5) 与机器学习有关的学术活动空前活跃。国际上除每年一次的机器学习研讨会外，还有计算机学习理论会议以及遗传算法会议。</p>
<h2 id="机器学习的范围"><a href="#机器学习的范围" class="headerlink" title="机器学习的范围"></a>机器学习的范围</h2><p>机器学习跟模式识别，统计学习，数据挖掘，计算机视觉，语音识别，自然语言处理等领域有着很深的联系。从范围上来说，机器学习跟模式识别，统计学习，数据挖掘是类似的，同时，机器学习与其他领域的处理技术的结合，形成了计算机视觉、语音识别、自然语言处理等交叉学科。因此，一般说数据挖掘时，可以等同于说机器学习。同时，我们平常所说的机器学习应用，应该是通用的，不仅仅局限在结构化数据，还有图像，音频等应用。</p>
<h3 id="模式识别"><a href="#模式识别" class="headerlink" title="模式识别"></a>模式识别</h3><p>模式识别=机器学习。两者的主要区别在于前者是从工业界发展起来的概念，后者则主要源自计算机学科。在著名的《Pattern Recognition And Machine Learning》这本书中，Christopher M. Bishop在开头是这样说的“模式识别源自工业界，而机器学习来自于计算机学科。不过，它们中的活动可以被视为同一个领域的两个方面，同时在过去的10年间，它们都有了长足的发展”。</p>
<h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><p>数据挖掘=机器学习+数据库，记得大学的最后一学期开了一门数据挖掘的课，何为数据挖掘，就是从海量的数据中挖掘出有用的数据，其实从某种意义上来说和大数据分析很像。数据挖掘通常与计算机科学有关，并通过统计、在线分析处理、情报检索、机器学习、专家系统（依靠过去的经验法则）和模式识别等诸多方法来实现上述目标。</p>
<h3 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h3><p>统计学习近似等于机器学习。统计学习是个与机器学习高度重叠的学科。因为机器学习中的大多数方法来自统计学，甚至可以认为，统计学的发展促进机器学习的繁荣昌盛。例如著名的支持向量机算法，就是源自统计学科。但是在某种程度上两者是有分别的，这个分别在于：统计学习者重点关注的是统计模型的发展与优化，偏数学，而机器学习者更关注的是能够解决问题，偏实践，因此机器学习研究者会重点研究学习算法在计算机上执行的效率与准确性的提升。</p>
<h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉=图像处理+机器学习。图像处理技术用于将图像处理为适合进入机器学习模型中的输入，机器学习则负责从图像中识别出相关的模式。随着机器学习的新领域深度学习的发展，大大促进了计算机图像识别的效果，因此未来计算机视觉界的发展前景不可估量。</p>
<h3 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h3><p>语音识别=语音处理+机器学习。语音识别就是音频处理技术与机器学习的结合。语音识别技术一般不会单独使用，一般会结合自然语言处理的相关技术。目前的相关应用有苹果的语音助手siri，讯飞等国内很多的科技公司和机构。</p>
<h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>自然语言处理=文本处理+机器学习。自然语言处理技术主要是让机器理解人类的语言的一门领域。在自然语言处理技术中，大量使用了编译原理相关的技术，例如词法分析，语法分析等等，除此之外，在理解这个层面，则使用了语义理解，机器学习等技术。</p>
<h2 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h2><h3 id="监督式学习"><a href="#监督式学习" class="headerlink" title="监督式学习"></a>监督式学习</h3><p>监督式学习算法包括一个目标变量（因变量）和用来预测目标变量的预测变量（自变量）。通过这些变量我们可以搭建一个模型，从而对于一个已知的预测变量值，我们可以得到对应的目标变量值。重复训练这个模型，直到它能在训练数据集上达到预定的准确度。 属于监督式学习的算法有：回归模型，决策树，随机森林，K邻近算法，逻辑回归等。</p>
<h3 id="无监督式学习"><a href="#无监督式学习" class="headerlink" title="无监督式学习"></a>无监督式学习</h3><p>与监督式学习不同的是，无监督学习中我们没有需要预测或估计的目标变量。无监督式学习是用来对总体对象进行分类的。它在根据某一指标将客户分类上有广泛应用。 属于无监督式学习的算法有：关联规则，K-means聚类算法等。</p>
<h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>这个算法可以训练程序做出某一决定。程序在某一情况下尝试所有的可能行动，记录不同行动的结果并试着找出最好的一次尝试来做决定。 属于这一类算法的有马尔可夫决策过程。</p>
<h3 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h3><p>常见的机器学习算法<br>以下是最常用的机器学习算法，大部分数据问题都可以通过它们解决：<br>1.线性回归 (Linear Regression)<br>2.逻辑回归 (Logistic Regression)<br>3.决策树 (Decision Tree)<br>4.支持向量机（SVM）<br>5.朴素贝叶斯 (Naive Bayes)<br>6.K邻近算法（KNN）<br>7.K-均值算法（K-means）<br>8.随机森林 (Random Forest)<br>9.降低维度算法（DimensionalityReduction Algorithms）<br>10.GradientBoost和Adaboost算法</p>
<h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><h3 id="基于学习策略的分类"><a href="#基于学习策略的分类" class="headerlink" title="基于学习策略的分类"></a>基于学习策略的分类</h3><p>学习策略是指学习过程中系统所采用的推理策略。一个学习系统总是由学习和环境两部分组成。由环境（如书本或教师）提供信息，学习部分则实现信息转换，用能够理解的形式记忆下来，并从中获取有用的信息。在学习过程中，学生（学习部分）使用的推理越少，他对教师（环境）的依赖就越大，教师的负担也就越重。学习策略的分类标准就是根据学生实现信息转换所需的推理多少和难易程度来分类的，依从简单到复杂，从少到多的次序分为以下六种基本类型：</p>
<h4 id="1）机械学习-Rote-learning"><a href="#1）机械学习-Rote-learning" class="headerlink" title="1）机械学习 (Rote learning)"></a>1）机械学习 (Rote learning)</h4><p>学习者无需任何推理或其它的知识转换，直接吸取环境所提供的信息。如塞缪尔的跳棋程序，纽厄尔和西蒙的LT系统。这类学习系统主要考虑的是如何索引存贮的知识并加以利用。系统的学习方法是直接通过事先编好、构造好的程序来学习，学习者不作任何工作，或者是通过直接接收既定的事实和数据进行学习，对输入信息不作任何的推理。</p>
<h4 id="2）示教学习-Learning-from-instruction或Learning-by-being-told"><a href="#2）示教学习-Learning-from-instruction或Learning-by-being-told" class="headerlink" title="2）示教学习 (Learning from instruction或Learning by being told)"></a>2）示教学习 (Learning from instruction或Learning by being told)</h4><p>学生从环境（教师或其它信息源如教科书等）获取信息，把知识转换成内部可使用的表示形式，并将新的知识和原有知识有机地结合为一体。所以要求学生有一定程度的推理能力，但环境仍要做大量的工作。教师以某种形式提出和组织知识，以使学生拥有的知识可以不断地增加。这种学习方法和人类社会的学校教学方式相似，学习的任务就是建立一个系统，使它能接受教导和建议，并有效地存贮和应用学到的知识。不少专家系统在建立知识库时使用这种方法去实现知识获取。示教学习的一个典型应用例是FOO程序。</p>
<h4 id="3）演绎学习-Learning-by-deduction"><a href="#3）演绎学习-Learning-by-deduction" class="headerlink" title="3）演绎学习 (Learning by deduction)"></a>3）演绎学习 (Learning by deduction)</h4><p>学生所用的推理形式为演绎推理。推理从公理出发，经过逻辑变换推导出结论。这种推理是”保真”变换和特化(specialization)的过程，使学生在推理过程中可以获取有用的知识。这种学习方法包含宏操作(macro-operation)学习、知识编辑和组块(Chunking)技术。演绎推理的逆过程是归纳推理。</p>
<h4 id="4）类比学习-Learning-by-analogy"><a href="#4）类比学习-Learning-by-analogy" class="headerlink" title="4）类比学习 (Learning by analogy)"></a>4）类比学习 (Learning by analogy)</h4><p>利用二个不同领域（源域、目标域）中的知识相似性，可以通过类比，从源域的知识（包括相似的特征和其它性质）推导出目标域的相应知识，从而实现学习。类比学习系统可以使一个已有的计算机应用系统转变为适应于新的领域，来完成原先没有设计的相类似的功能。<br>类比学习需要比上述三种学习方式更多的推理。它一般要求先从知识源（源域）中检索出可用的知识，再将其转换成新的形式，用到新的状况（目标域）中去。类比学习在人类科学技术发展史上起着重要作用，许多科学发现就是通过类比得到的。例如著名的卢瑟福类比就是通过将原子结构（目标域）同太阳系（源域）作类比，揭示了原子结构的奥秘。</p>
<h4 id="5）基于解释的学习-Explanation-based-learning-EBL"><a href="#5）基于解释的学习-Explanation-based-learning-EBL" class="headerlink" title="5）基于解释的学习 (Explanation-based learning, EBL)"></a>5）基于解释的学习 (Explanation-based learning, EBL)</h4><p>学生根据教师提供的目标概念、该概念的一个例子、领域理论及可操作准则，首先构造一个解释来说明为什该例子满足目标概念，然后将解释推广为目标概念的一个满足可操作准则的充分条件。EBL已被广泛应用于知识库求精和改善系统的性能。<br>著名的EBL系统有迪乔恩（G.DeJong）的GENESIS,米切尔（T.Mitchell）的LEXII和LEAP, 以及明顿（S.Minton）等的PRODIGY。</p>
<h4 id="6）归纳学习-Learning-from-induction"><a href="#6）归纳学习-Learning-from-induction" class="headerlink" title="6）归纳学习 (Learning from induction)"></a>6）归纳学习 (Learning from induction)</h4><p>归纳学习是由教师或环境提供某概念的一些实例或反例，让学生通过归纳推理得出该概念的一般描述。这种学习的推理工作量远多于示教学习和演绎学习，因为环境并不提供一般性概念描述（如公理）。从某种程度上说，归纳学习的推理量也比类比学习大，因为没有一个类似的概念可以作为”源概念”加以取用。归纳学习是最基本的，发展也较为成熟的学习方法，在人工智能领域中已经得到广泛的研究和应用。</p>
<h3 id="基于所获取知识的表示形式分类"><a href="#基于所获取知识的表示形式分类" class="headerlink" title="基于所获取知识的表示形式分类　"></a>基于所获取知识的表示形式分类　</h3><p>学习系统获取的知识可能有：行为规则、物理对象的描述、问题求解策略、各种分类及其它用于任务实现的知识类型。<br>对于学习中获取的知识，主要有以下一些表示形式：</p>
<h4 id="1）代数表达式参数"><a href="#1）代数表达式参数" class="headerlink" title="1）代数表达式参数"></a>1）代数表达式参数</h4><p>学习的目标是调节一个固定函数形式的代数表达式参数或系数来达到一个理想的性能。</p>
<h4 id="2）决策树"><a href="#2）决策树" class="headerlink" title="2）决策树"></a>2）决策树</h4><p>用决策树来划分物体的类属，树中每一内部节点对应一个物体属性，而每一边对应于这些属性的可选值，树的叶节点则对应于物体的每个基本分类。</p>
<h4 id="3）形式文法"><a href="#3）形式文法" class="headerlink" title="3）形式文法"></a>3）形式文法</h4><p>在识别一个特定语言的学习中，通过对该语言的一系列表达式进行归纳，形成该语言的形式文法。</p>
<h4 id="4）产生式规则"><a href="#4）产生式规则" class="headerlink" title="4）产生式规则"></a>4）产生式规则</h4><p>产生式规则表示为条件—动作对，已被极为广泛地使用。学习系统中的学习行为主要是：生成、泛化、特化（Specialization）或合成产生式规则。</p>
<h4 id="5）形式逻辑表达式"><a href="#5）形式逻辑表达式" class="headerlink" title="5）形式逻辑表达式"></a>5）形式逻辑表达式</h4><p>形式逻辑表达式的基本成分是命题、谓词、变量、约束变量范围的语句，及嵌入的逻辑表达式。</p>
<h4 id="6）图和网络"><a href="#6）图和网络" class="headerlink" title="6）图和网络"></a>6）图和网络</h4><p>有的系统采用图匹配和图转换方案来有效地比较和索引知识。</p>
<h4 id="7）框架和模式（schema）"><a href="#7）框架和模式（schema）" class="headerlink" title="7）框架和模式（schema）"></a>7）框架和模式（schema）</h4><p>每个框架包含一组槽，用于描述事物（概念和个体）的各个方面。</p>
<h4 id="8）计算机程序和其它的过程编码"><a href="#8）计算机程序和其它的过程编码" class="headerlink" title="8）计算机程序和其它的过程编码"></a>8）计算机程序和其它的过程编码</h4><p>获取这种形式的知识，目的在于取得一种能实现特定过程的能力，而不是为了推断该过程的内部结构。</p>
<h4 id="9）神经网络"><a href="#9）神经网络" class="headerlink" title="9）神经网络"></a>9）神经网络</h4><p>这主要用在联接学习中。学习所获取的知识，最后归纳为一个神经网络。</p>
<h4 id="10）多种表示形式的组合"><a href="#10）多种表示形式的组合" class="headerlink" title="10）多种表示形式的组合"></a>10）多种表示形式的组合</h4><p>根据表示的精细程度，可将知识表示形式分为两大类：泛化程度高的粗粒度符号表示、??泛化程度低的精粒度亚符号(sub-symbolic)表示。像决策树、形式文法、产生式规则、形式逻辑表达式、框架和模式等属于符号表示类；而代数表达式参数、图和网络、神经网络等则属亚符号表示类。</p>
<h3 id="按应用领域分类"><a href="#按应用领域分类" class="headerlink" title="按应用领域分类　"></a>按应用领域分类　</h3><p>最主要的应用领域有：专家系统、认知模拟、规划和问题求解、数据挖掘、网络信息服务、图象识别、故障诊断、自然语言理解、机器人和博弈等领域。<br>从机器学习的执行部分所反映的任务类型上看，大部分的应用研究领域基本上集中于以下两个范畴：分类和问题求解。<br>（1）分类任务要求系统依据已知的分类知识对输入的未知模式（该模式的描述）作分析，以确定输入模式的类属。相应的学习目标就是学习用于分类的准则（如分类规则）。<br>（2）问题求解任务要求对于给定的目标状态,??寻找一个将当前状态转换为目标状态的动作序列；机器学习在这一领域的研究工作大部分集中于通过学习来获取能提高问题求解效率的知识（如搜索控制知识，启发式知识等）。</p>
<h3 id="综合分类"><a href="#综合分类" class="headerlink" title="综合分类"></a>综合分类</h3><h4 id="1）经验性归纳学习-empirical-inductive-learning"><a href="#1）经验性归纳学习-empirical-inductive-learning" class="headerlink" title="1）经验性归纳学习 (empirical inductive learning)"></a>1）经验性归纳学习 (empirical inductive learning)</h4><p>经验性归纳学习采用一些数据密集的经验方法（如版本空间法、ID3法，定律发现方法）对例子进行归纳学习。其例子和学习结果一般都采用属性、谓词、关系等符号表示。它相当于基于学习策略分类中的归纳学习，但扣除联接学习、遗传算法、加强学习的部分。</p>
<h4 id="2）分析学习（analytic-learning）"><a href="#2）分析学习（analytic-learning）" class="headerlink" title="2）分析学习（analytic learning）"></a>2）分析学习（analytic learning）</h4><p>分析学习方法是从一个或少数几个实例出发，运用领域知识进行分析。其主要特征为：<br>·推理策略主要是演绎，而非归纳；<br>·使用过去的问题求解经验（实例）指导新的问题求解，或产生能更有效地运用领域知识的搜索控制规则。<br>分析学习的目标是改善系统的性能，而不是新的概念描述。分析学习包括应用解释学习、演绎学习、多级结构组块以及宏操作学习等技术。</p>
<h4 id="3）类比学习"><a href="#3）类比学习" class="headerlink" title="3）类比学习"></a>3）类比学习</h4><p>它相当于基于学习策略分类中的类比学习。在这一类型的学习中比较引人注目的研究是通过与过去经历的具体事例作类比来学习，称为基于范例的学习(case_based learning)，或简称范例学习。</p>
<h2 id="机器学习代码示例"><a href="#机器学习代码示例" class="headerlink" title="机器学习代码示例"></a>机器学习代码示例</h2><p>机器学习语音设计到pytho和R等最新语言。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">//在gcc-4.7.2下编译通过。</div><div class="line">//命令行：g++-Wall-ansi-O2test.cpp-otest</div><div class="line">#include&lt;iostream&gt;</div><div class="line">usingnamespacestd;</div><div class="line">voidinput(int&amp;oper,constboolmeth)</div><div class="line">&#123;</div><div class="line">//meth为true则只判断1，为false则判断1或0</div><div class="line">while(true)</div><div class="line">&#123;</div><div class="line">cin&gt;&gt;oper;</div><div class="line">if(meth&amp;&amp;oper==1)</div><div class="line">break;</div><div class="line">elseif(oper==0||oper==1)</div><div class="line">break;</div><div class="line">cout&lt;&lt;&quot;输入错误，请重新输入。&quot;&lt;&lt;endl;//判断参数</div><div class="line">cin.sync();//避免极端输入导致死循环</div><div class="line">cin.clear();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">intmain(void)</div><div class="line">&#123;</div><div class="line">cout&lt;&lt;&quot;1+1=2吗？那要看您怎么教我了，不要惊讶我会学习的&quot;&lt;&lt;endl;</div><div class="line">intladd,radd,aprs,rcnt(0),wcnt(0);//定义输入与结果，正确次数与错误次数</div><div class="line">cout&lt;&lt;&quot;开始学习……&quot;&lt;&lt;endl;</div><div class="line">for(inti(0);i!=10;++i)</div><div class="line">&#123;</div><div class="line">cout&lt;&lt;&quot;参数1（必须是1）：&quot;&lt;&lt;flush;//提示输入参数</div><div class="line">input(ladd,true);</div><div class="line">cout&lt;&lt;&quot;参数2（必须是1）：&quot;&lt;&lt;flush;</div><div class="line">input(radd,true);</div><div class="line">cout&lt;&lt;&quot;结果：&quot;&lt;&lt;(ladd+radd)&lt;&lt;endl;//输出结果</div><div class="line">cout&lt;&lt;&quot;您对这满意吗（满意输入1，不满意输入0）：&quot;&lt;&lt;flush;//评价等级</div><div class="line">input(aprs,false);</div><div class="line">if(aprs)//判断用户评价</div><div class="line">++rcnt;</div><div class="line">else</div><div class="line">++wcnt;</div><div class="line">cout&lt;&lt;&quot;正确次数：&quot;&lt;&lt;rcnt&lt;&lt;&quot;错误次数：&quot;&lt;&lt;wcnt&lt;&lt;endl;//错误次数</div><div class="line">&#125;</div><div class="line">if(rcnt&gt;wcnt)//判断学习结果</div><div class="line">cout&lt;&lt;&quot;主人告诉我1+1=2。&quot;&lt;&lt;endl;</div><div class="line">else</div><div class="line">if(rcnt&lt;wcnt)</div><div class="line">cout&lt;&lt;&quot;主人告诉我1+1!=2。&quot;&lt;&lt;endl;</div><div class="line">else</div><div class="line">cout&lt;&lt;&quot;我不明白主人是什么意思。&quot;&lt;&lt;endl;</div><div class="line">intterm;//退出部分</div><div class="line">cout&lt;&lt;&quot;您对我的表现满意吗？满意请输入1不满意请输入0：&quot;&lt;&lt;flush;</div><div class="line">input(term,false);</div><div class="line">if(term)</div><div class="line">cout&lt;&lt;&quot;谢谢我会继续努力学习&quot;&lt;&lt;endl;</div><div class="line">else</div><div class="line">cout&lt;&lt;&quot;谢谢我会继续努力学习D&quot;&lt;&lt;endl;</div><div class="line">//cin&gt;&gt;term;//在Windows上测试时启用</div><div class="line">return0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      机器学习
    
    </summary>
    
      <category term="大数据" scheme="http://code.youmeek.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://code.youmeek.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="机器学习" scheme="http://code.youmeek.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>webpack+react环境搭建</title>
    <link href="http://code.youmeek.com/2016/11/05/webpack+react%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://code.youmeek.com/2016/11/05/webpack+react环境搭建/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2017-01-25T03:02:38.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道前端的框架纷繁复杂，各有各的优点。而我们选择使用React作为开发框架的时候，往往会选择Webpack+Babel+React来开始我们的项目。之前也讲过其他的前端框架，如<a href="http://blog.csdn.net/xiangzhihong8/article/details/53993980" target="_blank" rel="external"> gulp+webpack</a>，准确的说这不是一个框架，只是项目组织的形式而已。</p>
<h1 id="Webpack-Babel-React环境搭建"><a href="#Webpack-Babel-React环境搭建" class="headerlink" title="Webpack+Babel+React环境搭建"></a>Webpack+Babel+React环境搭建</h1><h2 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h2><p>关于Webpack的介绍这里不讲解，大家可以看之前的讲解<a href="http://blog.csdn.net/xiangzhihong8/article/details/53993980" target="_blank" rel="external">webpack介绍</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p>创建一个名叫learn-webpack项目，并进去项目目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir learn-webpack </div><div class="line">cd learn-webpack</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20170104224231893?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>接下来我们来创建2个文件:app.js和index.html，我们在也没上输出一个”Hello World”，<br>app.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.querySelector(&apos;#app&apos;).innerHTML = &apos;Hello World!&apos;;</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Learn-webpack&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>然后在终端执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./app.js ./dist/bundle.js</div></pre></td></tr></table></figure>
<p>最后执行启动本地的http服务，我们这里用python：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>
<p>然后我们访问：<a href="http://localhost:8000就可以看到效果了。" target="_blank" rel="external">http://localhost:8000就可以看到效果了。</a></p>
<h2 id="webpack文件配置"><a href="#webpack文件配置" class="headerlink" title="webpack文件配置"></a>webpack文件配置</h2><p>实际上每个项目下都应该包含一个webpack.config.js，用来告诉Webpack需要做些什么，这个我们之前文章也说过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们在终端运行命令，看看是不是和之前输入 webpack ./app.js ./dist/bundle.js 的打包编译结果一样呢，答案是肯定的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure>
<p>注：<br><strong>entry：指定打包的入口文件</strong></p>
<ul>
<li>单个文件打包为单个输出文件，直接写该文件的名字，例如：entry:”main.js”</li>
<li>多个文件打包为单个输出文件，将文件名放进一个数组，例如：entry:[‘main.js’,’xx.js’]</li>
<li>多个文件打包为多个输出文件，将文件名放入一个键字对，例如：entry: {a:’main.js’,b:’xx.js’}<br><strong>output：配置打包结果</strong><br>path为定义输出文件夹，filename为打包结果文件的名称，如果指定打包入口文件为上面的1、2种情况，filename里面直接跟你想输出的文件名。若为第3种情况filename里面需写成[name].文件名.js，filename里面的[name]为entry中的键。<h3 id="监听变化自动打包"><a href="#监听变化自动打包" class="headerlink" title="监听变化自动打包"></a>监听变化自动打包</h3>当我们在不停的对代码进行变动的时候，为了不修改一次然后又手动去进行打包一次，可以使用webpack的watch功能。这也算是webpack的一个黑科技，以前做后端的时候必须重新部署，这个是很蛋疼的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch 或者 webpack -w</div></pre></td></tr></table></figure>
<p>或者我们可以直接在配置代码里面把watch设置为true。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;,</div><div class="line">  watch: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Babel配置"><a href="#Babel配置" class="headerlink" title="Babel配置"></a>Babel配置</h2><p>Babel 是一个 JavaScript 编译器。使用它可以将ES6的语法转换为ES5的语法，以便在现在有的环境执行之前的代码。<br>首先安装basel。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack babel-loader babel-core babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>
<p>执行安装完成后需要将之前的webpack.config.js修改为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;./app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?$/,</div><div class="line">        loader: &apos;babel-loader&apos;,</div><div class="line">        exclude: /node_modules/,</div><div class="line">        query: &#123;</div><div class="line">          presets: [&apos;es2015&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [&apos;&apos;,&apos;.coffee&apos;,&apos;.js&apos;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在就能在文件里面以ES6的语法进行代码编写，如在app.js加入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var func = str =&gt; &#123;</div><div class="line">  console.log(str);</div><div class="line">&#125;;</div><div class="line">func(&apos;Hello Babel!&apos;);</div></pre></td></tr></table></figure>
<p>我们再次运行，如果看到输出，就说明配置成功了。这里有关Loader的知识和配置就不讲究了，大家可以网上补补。</p>
<h2 id="与React结合"><a href="#与React结合" class="headerlink" title="与React结合"></a>与React结合</h2><p>终端输入以下代码对react和react-dom进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react react-dom --save</div></pre></td></tr></table></figure>
<p>安装Babel针对React的预设插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-preset-react --save-dev</div></pre></td></tr></table></figure>
<p>由于我们增加了react的预设插件，所以需要对webpack.config.js进行修改。将module -&gt; loaders下面的query修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">query: &#123;</div><div class="line">    presets: [&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们创建一个hello.js.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">class Hello extends React.Component&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">          Hello, World!</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Hello;</div></pre></td></tr></table></figure>
<p>在app.js做一下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import Hello from &quot;./hello&quot;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Hello /&gt;,</div><div class="line">  document.querySelector(&apos;#app&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>哈哈哈，这里如果大家做过React Native的，这里是不是感觉很亲切，只不过React Native还是用的npm在做管理。我们同样启动服务在看看，如果看到Hello World!就说明环境配置成功。</p>]]></content>
    
    <summary type="html">
    
      我们知道前端的框架纷繁复杂，各有各的优点。而我们选择使用React作为开发框架的时候，往往会选择Webpack+Babel+React来开始我们的项目。
    
    </summary>
    
      <category term="前端" scheme="http://code.youmeek.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="react" scheme="http://code.youmeek.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ExpandableListView实现商品列表折叠</title>
    <link href="http://code.youmeek.com/2016/11/05/Android%20ExpandableListView%E8%AF%A6%E8%A7%A3/"/>
    <id>http://code.youmeek.com/2016/11/05/Android ExpandableListView详解/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2017-03-02T11:52:15.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在日常的开发中，有可能会遇到需要一些可以展开的列表，比如QQ的好友列表，电商的购物车折叠显示。Android也给我们提供ExpandableListView类，完美实现这样类似的需求, 极大的方便了我们开发。结合之前的项目我们做一个简单的讲解。<br>首先懒看一下最终的实现效果：<br><img src="http://upload-images.jianshu.io/upload_images/2112446-0c0ff4aea2d67ffd.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>使用到的第三方框架：<br><a href="https://github.com/hongyangAndroid/AndroidAutoLayout" target="_blank" rel="external">AndroidAutoLayout</a> 屏幕适配框架</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>首先是布局需要用一个ExpandableListView，配合adapter就能实现上面额效果，直接上代码。<br>activity_main.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;com.zhy.autolayout.AutoLinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;match_parent&quot;</div><div class="line">  android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">  &lt;android.support.design.widget.AppBarLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line"></div><div class="line">      &lt;com.zhy.autolayout.AutoLinearLayout</div><div class="line">          android:id=&quot;@+id/ll_title_root&quot;</div><div class="line">          android:layout_width=&quot;match_parent&quot;</div><div class="line">          android:layout_height=&quot;wrap_content&quot;</div><div class="line">          android:background=&quot;#ec0f38&quot;</div><div class="line">          android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">          &lt;com.zhy.autolayout.AutoFrameLayout</div><div class="line">              android:layout_width=&quot;match_parent&quot;</div><div class="line">              android:layout_height=&quot;88px&quot;&gt;</div><div class="line"></div><div class="line">              &lt;TextView</div><div class="line">                  android:id=&quot;@+id/tv_title&quot;</div><div class="line">                  android:layout_width=&quot;wrap_content&quot;</div><div class="line">                  android:layout_height=&quot;fill_parent&quot;</div><div class="line">                  android:layout_gravity=&quot;center&quot;</div><div class="line">                  android:gravity=&quot;center&quot;</div><div class="line">                  android:text=&quot;优惠套餐&quot;</div><div class="line">                  android:textColor=&quot;#ffffff&quot;</div><div class="line">                  android:textSize=&quot;32px&quot; /&gt;</div><div class="line"></div><div class="line">              &lt;com.zhy.autolayout.AutoLinearLayout</div><div class="line">                  android:id=&quot;@+id/ll_back&quot;</div><div class="line">                  android:layout_width=&quot;100px&quot;</div><div class="line">                  android:layout_height=&quot;match_parent&quot;</div><div class="line">                  android:clickable=&quot;true&quot;</div><div class="line">                  android:gravity=&quot;center&quot;&gt;</div><div class="line"></div><div class="line">                  &lt;ImageView</div><div class="line">                      android:id=&quot;@+id/iv_back&quot;</div><div class="line">                      android:layout_width=&quot;44px&quot;</div><div class="line">                      android:layout_height=&quot;44px&quot;</div><div class="line">                      android:layout_gravity=&quot;center_vertical&quot;</div><div class="line">                      android:src=&quot;@mipmap/icon_back&quot; /&gt;</div><div class="line">              &lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div><div class="line">          &lt;/com.zhy.autolayout.AutoFrameLayout&gt;</div><div class="line">      &lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div><div class="line">  &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line"></div><div class="line">  &lt;ExpandableListView</div><div class="line">      android:id=&quot;@+id/elv_collocation&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;match_parent&quot;</div><div class="line">      android:background=&quot;#eeeff3&quot;</div><div class="line">      android:divider=&quot;#eeeff3&quot;</div><div class="line">      android:dividerHeight=&quot;0dp&quot;</div><div class="line">      android:groupIndicator=&quot;@null&quot;</div><div class="line">      android:listSelector=&quot;@null&quot; /&gt;</div><div class="line">&lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java<br>默认展开第一个，collocation.expandGroup(0);当然更好的写法是将数据写到Controller中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">  private ExpandableListView elv_collocation;</div><div class="line">  private List&lt;CollocationPackageBean&gt; collocationList;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">      super.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">      elv_collocation = (ExpandableListView) findViewById(R.id.elv_collocation);</div><div class="line">      initData();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private void initData() &#123;</div><div class="line">      collocationList = new ArrayList&lt;&gt;();</div><div class="line">      CollocationPackageBean collocation_1 = new CollocationPackageBean();</div><div class="line">      CollocationPackageBean collocation_2 = new CollocationPackageBean();</div><div class="line"></div><div class="line">      collocation_1.setTotalPrice(new BigDecimal(897));</div><div class="line">      collocation_1.setDiscountFee(new BigDecimal(20));</div><div class="line">      collocation_1.setName(&quot;818国货套餐3&quot;);</div><div class="line">      List&lt;CollocationPackageBean.CollocationSkuBean&gt; goodsList_1 = new ArrayList&lt;&gt;();</div><div class="line">      goodsList_1.add(new CollocationPackageBean.CollocationSkuBean(&quot;Meizu/魅族 魅蓝 note3 全网通 手机 银白 16GB&quot;, &quot;http://img11.hqbcdn.com/product/07/0a/070ac7abd57c6d9251d89547f3d62501.jpg&quot;));</div><div class="line">      goodsList_1.add(new CollocationPackageBean.CollocationSkuBean(&quot;VR PLUS 智能眼镜vr虚拟现实头盔 3D沉浸式 暴风魔镜 vr plus 智能头盔 白色&quot;, &quot;http://img15.hqbcdn.com/product/c6/10/c610075082199955a8d5dcf2aa765b17.jpg&quot;));</div><div class="line">      collocation_1.setCollocationSkuDoList(goodsList_1);</div><div class="line"></div><div class="line">      collocation_2.setTotalPrice(new BigDecimal(1034));</div><div class="line">      collocation_2.setDiscountFee(new BigDecimal(26));</div><div class="line">      collocation_2.setName(&quot;超值套餐&quot;);</div><div class="line">      List&lt;CollocationPackageBean.CollocationSkuBean&gt; goodsList_2 = new ArrayList&lt;&gt;();</div><div class="line">      goodsList_2.add(new CollocationPackageBean.CollocationSkuBean(&quot;Meizu/魅族 魅蓝 note3 全网通 手机 银白 16GB&quot;, &quot;http://img11.hqbcdn.com/product/07/0a/070ac7abd57c6d9251d89547f3d62501.jpg&quot;));</div><div class="line">      goodsList_2.add(new CollocationPackageBean.CollocationSkuBean(&quot;Uka/优加 Meizu/魅族 魅蓝 note3全覆盖全屏钢化玻璃膜 白色&quot;, &quot;http://img8.hqbcdn.com/product/9c/15/9c15571aa92905ea1edafb0a288f1ebb.jpg&quot;));</div><div class="line">      goodsList_2.add(new CollocationPackageBean.CollocationSkuBean(&quot;SanDisk/闪迪 至尊高速MicroSDHC-TF移动存储卡 Class10-48MB/S 升级版 16G&quot;, &quot;http://img14.hqbcdn.com/product/29/cd/29cda69f5036b38454b6592f96fde774.jpg&quot;));</div><div class="line">      goodsList_2.add(new CollocationPackageBean.CollocationSkuBean(&quot;Huawei/华为 AM116 金属耳机 三键线控耳机 尊爵版&quot;, &quot;http://img9.hqbcdn.com/product/0a/90/0a905d9988c91fb0625d9ee44377c8e0.jpg&quot;));</div><div class="line">      goodsList_2.add(new CollocationPackageBean.CollocationSkuBean(&quot;Lesimo/梵简 初见系列10000毫安充电宝 手机平板通用 移动电源 黑色&quot;, &quot;http://img11.hqbcdn.com/product/67/3a/673ac0343758ce64e97c2d9986cbbef3.jpg&quot;));</div><div class="line">      collocation_2.setCollocationSkuDoList(goodsList_2);</div><div class="line"></div><div class="line">      collocationList.add(collocation_1);</div><div class="line">      collocationList.add(collocation_2);</div><div class="line">      elv_collocation.setAdapter(new CollocationListAdapter(this, elv_collocation, collocationList));</div><div class="line">      elv_collocation.expandGroup(0);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CollocationListAdapter.java<br>CollocationListAdapter负责数据的填充，主要注意两个方法：getGroupView和getChildView</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line">public class CollocationListAdapter extends BaseExpandableListAdapter &#123;</div><div class="line">    private LayoutInflater inflater;</div><div class="line">    private Context context;</div><div class="line">    private ExpandableListView elv_collocation;</div><div class="line">    private List&lt;CollocationPackageBean&gt; data;</div><div class="line"></div><div class="line">    public CollocationListAdapter(Context context, ExpandableListView elv_collocation, List&lt;CollocationPackageBean&gt; data) &#123;</div><div class="line">        this.context = context;</div><div class="line">        this.elv_collocation = elv_collocation;</div><div class="line">        this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">        this.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getGroupCount() &#123;</div><div class="line">        return data.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getChildrenCount(int groupPosition) &#123;</div><div class="line">        return data.get(groupPosition).getCollocationSkuDoList().size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getGroup(int groupPosition) &#123;</div><div class="line">        return data.get(groupPosition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getChild(int groupPosition, int childPosition) &#123;</div><div class="line">        return data.get(groupPosition).getCollocationSkuDoList().get(childPosition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getGroupId(int groupPosition) &#123;</div><div class="line">        return groupPosition;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getChildId(int groupPosition, int childPosition) &#123;</div><div class="line">        return childPosition;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasStableIds() &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isChildSelectable(int groupPosition, int childPosition) &#123;</div><div class="line">        return true;//如果子条目需要响应click事件,必需返回true</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getGroupView(final int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) &#123;</div><div class="line">        ParentViewHolder parentViewHolder;</div><div class="line">        if (null == convertView) &#123;</div><div class="line">            convertView = inflater.inflate(R.layout.collocation_list_item_parent, parent, false);</div><div class="line">            parentViewHolder = new ParentViewHolder(convertView);</div><div class="line">            convertView.setTag(parentViewHolder);</div><div class="line">            AutoUtils.auto(convertView);</div><div class="line">        &#125; else &#123;</div><div class="line">            parentViewHolder = (ParentViewHolder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line">        CollocationPackageBean collocationPackageBean = data.get(groupPosition);</div><div class="line">        parentViewHolder.tv_collocation_name.setText(TextUtils.isEmpty(collocationPackageBean.getName()) ? &quot;优惠套餐&quot; : collocationPackageBean.getName());</div><div class="line">        parentViewHolder.tv_save_text.setText(&quot;立省￥&quot; + collocationPackageBean.getDiscountFee());</div><div class="line">        parentViewHolder.iv_status.setImageResource(isExpanded ? R.mipmap.icon_top : R.mipmap.icon_bottom);</div><div class="line">        parentViewHolder.v_space.setVisibility(isExpanded ? View.GONE : View.VISIBLE);</div><div class="line">        parentViewHolder.hsv_goods_list.setVisibility(isExpanded ? View.GONE : View.VISIBLE);</div><div class="line">        parentViewHolder.hsv_goods_list.setFocusable(false);//设置后解决套餐无法正常展开的bug</div><div class="line">        if (!isExpanded) &#123;</div><div class="line">            //设置套餐折叠时显示套餐商品的图片</div><div class="line">            initGoodsImage(collocationPackageBean, parentViewHolder, groupPosition);</div><div class="line">        &#125;</div><div class="line">        return convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getChildView(final int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) &#123;</div><div class="line">        ChildViewHolder childViewHolder;</div><div class="line">        if (null == convertView) &#123;</div><div class="line">            convertView = inflater.inflate(R.layout.collocation_list_item_child, parent, false);</div><div class="line">            childViewHolder = new ChildViewHolder(convertView);</div><div class="line">            convertView.setTag(childViewHolder);</div><div class="line">            AutoUtils.auto(convertView);</div><div class="line">        &#125; else &#123;</div><div class="line">            childViewHolder = (ChildViewHolder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line">        final CollocationPackageBean.CollocationSkuBean collocationSkuBean = data.get(groupPosition).getCollocationSkuDoList().get(childPosition);</div><div class="line">        childViewHolder.sdv_goods_img.setImageURI(Uri.parse(collocationSkuBean.getImageMd5()));</div><div class="line">        childViewHolder.tv_goods_title.setText(collocationSkuBean.getSkuTitle());</div><div class="line">        childViewHolder.ll_root_view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                //进入商品详情页操作</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        if (childPosition == data.get(groupPosition).getCollocationSkuDoList().size() - 1) &#123;</div><div class="line">            //当前套餐的最后一个商品</div><div class="line">            childViewHolder.ll_bottom.setVisibility(View.VISIBLE);</div><div class="line">            childViewHolder.tv_collocation_price.setText(data.get(groupPosition).getTotalPrice().toString());</div><div class="line">            childViewHolder.tv_add_cart.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(View v) &#123;</div><div class="line">                    //把套餐商品加入购物车操作</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; else &#123;</div><div class="line">            childViewHolder.ll_bottom.setVisibility(View.GONE);</div><div class="line">        &#125;</div><div class="line">        return convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class ParentViewHolder &#123;</div><div class="line">        private View v_space;</div><div class="line">        private ImageView iv_status;</div><div class="line">        private HorizontalScrollView hsv_goods_list;</div><div class="line">        private TextView tv_collocation_name, tv_save_text;</div><div class="line"></div><div class="line">        private ParentViewHolder (View view) &#123;</div><div class="line">            v_space = view.findViewById(R.id.v_space);</div><div class="line">            iv_status = (ImageView) view.findViewById(R.id.iv_status);</div><div class="line">            hsv_goods_list = (HorizontalScrollView) view.findViewById(R.id.hsv_goods_list);</div><div class="line">            tv_collocation_name = (TextView) view.findViewById(R.id.tv_collocation_name);</div><div class="line">            tv_save_text = (TextView) view.findViewById(R.id.tv_save_text);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class ChildViewHolder &#123;</div><div class="line">        private SimpleDraweeView sdv_goods_img;</div><div class="line">        private LinearLayout ll_bottom, ll_root_view;</div><div class="line">        private TextView tv_add_cart, tv_goods_title, tv_collocation_price;</div><div class="line"></div><div class="line">        private ChildViewHolder (View view) &#123;</div><div class="line">            sdv_goods_img = (SimpleDraweeView) view.findViewById(R.id.sdv_goods_img);</div><div class="line">            ll_bottom = (LinearLayout) view.findViewById(R.id.ll_bottom);</div><div class="line">            ll_root_view = (LinearLayout) view.findViewById(R.id.ll_root_view);</div><div class="line">            tv_add_cart = (TextView) view.findViewById(R.id.tv_add_cart);</div><div class="line">            tv_goods_title = (TextView) view.findViewById(R.id.tv_goods_title);</div><div class="line">            tv_collocation_price = (TextView) view.findViewById(R.id.tv_collocation_price);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化并设置套餐折叠时的所有商品图片</div><div class="line">     * @param collocationPackageBean</div><div class="line">     * @param parentViewHolder</div><div class="line">     * @param groupPosition</div><div class="line">     */</div><div class="line">    private void initGoodsImage(CollocationPackageBean collocationPackageBean,</div><div class="line">                                ParentViewHolder parentViewHolder, final int groupPosition) &#123;</div><div class="line">        View collocationView;</div><div class="line">        SimpleDraweeView sdv_cart_image;</div><div class="line">        RelativeLayout rl_middle;</div><div class="line">        LinearLayout rootview = new LinearLayout(context);</div><div class="line">        for (int i = 0, len = collocationPackageBean.getCollocationSkuDoList().size(); i &lt; len; i++) &#123;</div><div class="line">            collocationView = inflater.inflate(R.layout.item_gift_img, null);</div><div class="line">            sdv_cart_image = (SimpleDraweeView) collocationView.findViewById(R.id.sdv_cart_image);</div><div class="line">            rl_middle = (RelativeLayout) collocationView.findViewById(R.id.rl_middle);</div><div class="line">            sdv_cart_image.setImageURI(Uri.parse(collocationPackageBean.getCollocationSkuDoList().get(i).getImageMd5()));</div><div class="line">            rl_middle.setVisibility(View.INVISIBLE);</div><div class="line">            collocationView.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(View v) &#123;</div><div class="line">                    //手动实现展开操作</div><div class="line">                    elv_collocation.expandGroup(groupPosition);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            AutoUtils.auto(collocationView);</div><div class="line">            rootview.addView(collocationView);</div><div class="line">        &#125;</div><div class="line">        parentViewHolder.hsv_goods_list.removeAllViews();</div><div class="line">        parentViewHolder.hsv_goods_list.addView(rootview);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>collocation_list_item_child.xml<br>子布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">&lt;com.zhy.autolayout.AutoLinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  xmlns:fresco=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;match_parent&quot;</div><div class="line">  android:background=&quot;#ffffff&quot;</div><div class="line">  android:clickable=&quot;true&quot;</div><div class="line">  android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">  &lt;com.zhy.autolayout.AutoLinearLayout</div><div class="line">      android:id=&quot;@+id/ll_root_view&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;</div><div class="line">      android:background=&quot;@drawable/selector_me_bg_item&quot;</div><div class="line">      android:paddingBottom=&quot;28px&quot;</div><div class="line">      android:paddingLeft=&quot;24px&quot;</div><div class="line">      android:paddingRight=&quot;24px&quot;</div><div class="line">      android:paddingTop=&quot;30px&quot;&gt;</div><div class="line"></div><div class="line">      &lt;com.facebook.drawee.view.SimpleDraweeView</div><div class="line">          android:id=&quot;@+id/sdv_goods_img&quot;</div><div class="line">          android:layout_width=&quot;120px&quot;</div><div class="line">          android:layout_height=&quot;120px&quot;</div><div class="line">          android:background=&quot;@drawable/shape_cart_goods_border&quot;</div><div class="line">          android:padding=&quot;1dp&quot;</div><div class="line">          fresco:placeholderImage=&quot;@mipmap/icon_loading_bg&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;TextView</div><div class="line">          android:id=&quot;@+id/tv_goods_title&quot;</div><div class="line">          android:layout_width=&quot;0dp&quot;</div><div class="line">          android:layout_height=&quot;wrap_content&quot;</div><div class="line">          android:layout_marginLeft=&quot;20px&quot;</div><div class="line">          android:layout_weight=&quot;1&quot;</div><div class="line">          android:ellipsize=&quot;end&quot;</div><div class="line">          android:maxLines=&quot;2&quot;</div><div class="line">          android:textColor=&quot;#222222&quot;</div><div class="line">          android:textSize=&quot;30px&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;View</div><div class="line">          android:layout_width=&quot;118px&quot;</div><div class="line">          android:layout_height=&quot;1px&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;ImageView</div><div class="line">          android:layout_width=&quot;18px&quot;</div><div class="line">          android:layout_height=&quot;28px&quot;</div><div class="line">          android:src=&quot;@mipmap/icon_right&quot; /&gt;</div><div class="line">  &lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div><div class="line"></div><div class="line">  &lt;View</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;1px&quot;</div><div class="line">      android:layout_marginLeft=&quot;24px&quot;</div><div class="line">      android:background=&quot;#dddddd&quot; /&gt;</div><div class="line"></div><div class="line">  &lt;com.zhy.autolayout.AutoLinearLayout</div><div class="line">      android:id=&quot;@+id/ll_bottom&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;</div><div class="line">      android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">      &lt;com.zhy.autolayout.AutoLinearLayout</div><div class="line">          android:layout_width=&quot;match_parent&quot;</div><div class="line">          android:layout_height=&quot;wrap_content&quot;</div><div class="line">          android:gravity=&quot;center_vertical&quot;</div><div class="line">          android:paddingLeft=&quot;24px&quot;</div><div class="line">          android:paddingRight=&quot;24px&quot;</div><div class="line">          android:paddingTop=&quot;20px&quot;&gt;</div><div class="line"></div><div class="line">          &lt;TextView</div><div class="line">              android:layout_width=&quot;wrap_content&quot;</div><div class="line">              android:layout_height=&quot;wrap_content&quot;</div><div class="line">              android:text=&quot;套餐价格:&quot;</div><div class="line">              android:textColor=&quot;#888888&quot;</div><div class="line">              android:textSize=&quot;30px&quot; /&gt;</div><div class="line"></div><div class="line">          &lt;TextView</div><div class="line">              android:layout_width=&quot;wrap_content&quot;</div><div class="line">              android:layout_height=&quot;wrap_content&quot;</div><div class="line">              android:layout_marginLeft=&quot;20px&quot;</div><div class="line">              android:text=&quot;￥&quot;</div><div class="line">              android:textColor=&quot;#ec0f38&quot;</div><div class="line">              android:textSize=&quot;22px&quot; /&gt;</div><div class="line"></div><div class="line">          &lt;TextView</div><div class="line">              android:id=&quot;@+id/tv_collocation_price&quot;</div><div class="line">              android:layout_width=&quot;wrap_content&quot;</div><div class="line">              android:layout_height=&quot;wrap_content&quot;</div><div class="line">              android:textColor=&quot;#ec0f38&quot;</div><div class="line">              android:textSize=&quot;30px&quot; /&gt;</div><div class="line"></div><div class="line">          &lt;View</div><div class="line">              android:layout_width=&quot;0dp&quot;</div><div class="line">              android:layout_height=&quot;0dp&quot;</div><div class="line">              android:layout_weight=&quot;1&quot; /&gt;</div><div class="line"></div><div class="line">          &lt;TextView</div><div class="line">              android:id=&quot;@+id/tv_add_cart&quot;</div><div class="line">              android:layout_width=&quot;180px&quot;</div><div class="line">              android:layout_height=&quot;50px&quot;</div><div class="line">              android:background=&quot;@drawable/selector_add_cart_red_btn&quot;</div><div class="line">              android:gravity=&quot;center&quot;</div><div class="line">              android:text=&quot;加入购物车&quot;</div><div class="line">              android:textColor=&quot;@drawable/selector_add_cart_red_tv&quot;</div><div class="line">              android:textSize=&quot;28px&quot; /&gt;</div><div class="line">      &lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div><div class="line"></div><div class="line">      &lt;View</div><div class="line">          android:layout_width=&quot;match_parent&quot;</div><div class="line">          android:layout_height=&quot;20px&quot;</div><div class="line">          android:layout_marginTop=&quot;20px&quot;</div><div class="line">          android:background=&quot;#eeeff3&quot; /&gt;</div><div class="line">  &lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div><div class="line">&lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div></pre></td></tr></table></figure>
<p>collocation_list_item_parent.xml<br>父布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;com.zhy.autolayout.AutoLinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;match_parent&quot;</div><div class="line">  android:background=&quot;#ffffff&quot;</div><div class="line">  android:orientation=&quot;vertical&quot;</div><div class="line">  android:paddingTop=&quot;20px&quot;&gt;</div><div class="line"></div><div class="line">  &lt;com.zhy.autolayout.AutoLinearLayout</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;50px&quot;</div><div class="line">      android:layout_marginBottom=&quot;30px&quot;</div><div class="line">      android:gravity=&quot;center_vertical&quot;</div><div class="line">      android:paddingLeft=&quot;24px&quot;</div><div class="line">      android:paddingRight=&quot;24px&quot;&gt;</div><div class="line"></div><div class="line">      &lt;TextView</div><div class="line">          android:id=&quot;@+id/tv_collocation_name&quot;</div><div class="line">          android:layout_width=&quot;wrap_content&quot;</div><div class="line">          android:layout_height=&quot;wrap_content&quot;</div><div class="line">          android:textColor=&quot;#222222&quot;</div><div class="line">          android:textSize=&quot;30px&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;TextView</div><div class="line">          android:id=&quot;@+id/tv_save_text&quot;</div><div class="line">          android:layout_width=&quot;wrap_content&quot;</div><div class="line">          android:layout_height=&quot;40px&quot;</div><div class="line">          android:layout_marginLeft=&quot;20px&quot;</div><div class="line">          android:background=&quot;@drawable/shape_save_money&quot;</div><div class="line">          android:gravity=&quot;center&quot;</div><div class="line">          android:paddingLeft=&quot;18px&quot;</div><div class="line">          android:paddingRight=&quot;18px&quot;</div><div class="line">          android:textColor=&quot;#ffffff&quot;</div><div class="line">          android:textSize=&quot;24px&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;View</div><div class="line">          android:layout_width=&quot;0dp&quot;</div><div class="line">          android:layout_height=&quot;1px&quot;</div><div class="line">          android:layout_weight=&quot;1&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;ImageView</div><div class="line">          android:id=&quot;@+id/iv_status&quot;</div><div class="line">          android:layout_width=&quot;28px&quot;</div><div class="line">          android:layout_height=&quot;18px&quot;</div><div class="line">          android:layout_gravity=&quot;right|center_vertical&quot;</div><div class="line">          android:src=&quot;@mipmap/icon_top&quot; /&gt;</div><div class="line">  &lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div><div class="line"></div><div class="line">  &lt;HorizontalScrollView</div><div class="line">      android:id=&quot;@+id/hsv_goods_list&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;</div><div class="line">      android:paddingLeft=&quot;24px&quot;</div><div class="line">      android:scrollbars=&quot;none&quot; /&gt;</div><div class="line"></div><div class="line">  &lt;View</div><div class="line">      android:id=&quot;@+id/v_space&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;20px&quot;</div><div class="line">      android:layout_marginTop=&quot;20px&quot;</div><div class="line">      android:background=&quot;#eeeff3&quot;</div><div class="line">      android:visibility=&quot;gone&quot; /&gt;</div><div class="line">&lt;/com.zhy.autolayout.AutoLinearLayout&gt;</div></pre></td></tr></table></figure>
<p>这样就基本实现了。<a href="http://download.csdn.net/detail/xiangzhihong8/9740942" target="_blank" rel="external">源码地址</a></p>]]></content>
    
    <summary type="html">
    
      ExpandableListView实现商品列表折叠
    
    </summary>
    
      <category term="Android" scheme="http://code.youmeek.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://code.youmeek.com/tags/Android/"/>
    
      <category term="高仿" scheme="http://code.youmeek.com/tags/%E9%AB%98%E4%BB%BF/"/>
    
  </entry>
  
  <entry>
    <title>高仿ios斗鱼界面</title>
    <link href="http://code.youmeek.com/2016/11/05/ios%E9%AB%98%E4%BB%BF%E6%96%97%E9%B1%BCapp/"/>
    <id>http://code.youmeek.com/2016/11/05/ios高仿斗鱼app/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2017-03-02T11:48:27.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>过去的2016年是一个直播年，各大平台都相继接入了直播频道，电商，社交…更是火了一批做视频的，譬如喵播，映客，都斗鱼等直播平台。全民直播，一下子掀起了直播的技术潮，今天要聊聊如何实现一个ios的直播app。<br>首先来看最终的效果：<br><img src="http://upload-images.jianshu.io/upload_images/428088-59c0c6faf4804622.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>最近也是因为入门swift不久，在网上找了一个项目就开始模仿，本项目用到的第三方库：<br><a href="https://github.com/Alamofire/Alamofire/" target="_blank" rel="external">Alamofire</a><br><a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="external">Kingfisher</a></p>
<h1 id="Swift3-0的蝶变"><a href="#Swift3-0的蝶变" class="headerlink" title="Swift3.0的蝶变"></a>Swift3.0的蝶变</h1><p>swift3.0相对于2.x，渐渐的脱离了oc和c的风格，不管是从命名规范还是新能上都有了较大的提升，笔者认为应该是未来一个相对稳定的版本，而不是1.0和2.0时代的实验版本。相对于2.x，我们来看3.0或以后的3.x主要有哪些特性：<br><strong>稳定二进制接口（ABI)</strong><br>API大家都知道是应用程序接口 API只是提供函数签名，而ABI是系统和语言层面的 如果ABI稳定 意味着以后Swift版本更新升级 我们不需要再修改老版本 Swift 语言编译的库了。<br><strong>弹性/韧性 解决易碎二进制接口问题</strong><br><a href="https://en.wikipedia.org/wiki/Fragile_binary_interface_problem" target="_blank" rel="external">Fragile binary interface problem</a>是面向对象编程语言的通病 如果在程序中引入了外部库 我们的的程序中使用并继承了该外部库中的类 如果外部库有改动 我们必须重新编译所有该类的继承树 而这类问题被称为<a href="https://en.wikipedia.org/wiki/Fragile_base_class" target="_blank" rel="external">脆弱的基类</a> (Fragile base class)<br><strong>可移植性</strong><br>这个对于高级语言是很重要的特性，这意味着Swift可被移植到其他平台上。<br><strong>全面支持泛型特性</strong><br>Swift 2.2已经很好的支持泛型 但是还不够完善，Swift 3.0开始 将全面支持泛型的所有特性。<br><strong>新的API设计规范</strong><br>Swift3.0 发布了新的语言设计规范 其中在Swift3.0中标准库和核心库将会遵循这个设计规范。<a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="external">规范地址</a><br><strong>从函数参数中删除var关键字</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func doSomethingWithVar(var i: Int) &#123;</div><div class="line">     i = 2 // This will NOT have an effect on the caller&apos;s Int that was passed, but i can be modified locally</div><div class="line">  &#125;</div><div class="line"></div><div class="line">func doSomethingWithInout(inout i: Int) &#123;</div><div class="line">       i = 2 // This will have an effect on the caller&apos;s Int that was passed.</div><div class="line">&#125;  </div><div class="line"></div><div class="line">doSomethingWithVar(x)  </div><div class="line"> print(x) // 1</div><div class="line"></div><div class="line">doSomethingWithInout(&amp;x)</div><div class="line"> print(x) // 2</div></pre></td></tr></table></figure>
<p>删除var是因为var与inout会产生歧义和混乱。<br><strong>为autoreleasepool添加错误处理</strong><br>旧版autoreleasepool处理错误方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">func doWork() throws -&gt; Result &#123;</div><div class="line">   var result: Result? = nil</div><div class="line">   var error: ErrorProtocol? = nil</div><div class="line">   autoreleasepool &#123; </div><div class="line">          do &#123;</div><div class="line">            ... actual computation which hopefully assigns to result but might not ...</div><div class="line">         &#125; catch let e &#123;</div><div class="line">                       error = e</div><div class="line">          &#125;</div><div class="line">     &#125; </div><div class="line"></div><div class="line">    guard let result = result else &#123; </div><div class="line">              throw error! </div><div class="line">      &#125; </div><div class="line">          return result!</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>Swift3.0 autoreleasepool 处理错误方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public func autoreleasepool&lt;Result&gt;(@noescape body: () throws -&gt; Result) rethrows -&gt; Result</div><div class="line"></div><div class="line">  func doWork() throws -&gt; Result &#123;</div><div class="line"></div><div class="line">     return try autoreleasepool</div><div class="line">         &#123; </div><div class="line">                 ... actual computation which either returns or throws       ...         </div><div class="line">         &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>允许直接引用（Default, Private, Repeat）关键字成员</strong><br>在Swift3.0之前我们引用default和repeat成员时 需要这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let cell = UITableViewCell(style: .`default`, reuseIdentifier: nil)</div><div class="line">particleSystem.imageSequenceAnimationMode = SCNParticleImageSequenceAnimationMode.`repeat`</div></pre></td></tr></table></figure></p>
<p>Swift3.0时 允许我们直接访问default repeat 关键字成员：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let cell = UITableViewCell(style: .default, reuseIdentifier: nil)</div><div class="line">particleSystem.imageSequenceAnimationMode = SCNParticleImageSequenceAnimationMode.repeat</div></pre></td></tr></table></figure>
<p> <strong>将声明式@noescape和@autoclosure 改为类型属性</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func f(@noescape fn : () -&gt; ()) &#123;&#125; // declaration  attribute </div><div class="line"></div><div class="line">//新的语法</div><div class="line">func f(fn : @noescape () -&gt; ()) &#123;&#125; // type attribute.</div><div class="line">func f2(a : @autoclosure () -&gt; ()) &#123;&#125; // type attribute.</div></pre></td></tr></table></figure>
<p><strong>重命名 Debug 标示符</strong><br>Debug 标示符重命名后将会与#available #selector 关键字统一风格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">__FILE__ -&gt;  #file</div><div class="line">__LINE__ -&gt; #line</div><div class="line">__COLUMN__ -&gt; #column</div><div class="line">__FUNCTION__ -&gt; #function</div><div class="line">__DSO_HANDLE__ -&gt; #dsohandle</div></pre></td></tr></table></figure>
<h1 id="斗鱼部分代码分析"><a href="#斗鱼部分代码分析" class="headerlink" title="斗鱼部分代码分析"></a>斗鱼部分代码分析</h1><p>本app采用的是mvvm的开发架构，做到业务，数据，页面的真正分离，我们来看几个核心的类：<br>base</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">import UIKit  </div><div class="line">  </div><div class="line">private let kItemMargin : CGFloat = 10  </div><div class="line">private let kHeaderViewH : CGFloat = 50  </div><div class="line">private let NormalCellID = &quot;NormalCellID&quot;  </div><div class="line">private let HeaderViewID = &quot;HeaderViewID&quot;  </div><div class="line">let kNormalItemW = (kScreenW - 33 * kItemMargin) / 2  </div><div class="line">let kNormalItemH = kNormalItemW * 3 / 4  </div><div class="line">let kPrettyItemH = kNormalItemW * 5 / 4  </div><div class="line">let PrettyCellID = &quot;PrettyCellID&quot;  </div><div class="line">  </div><div class="line">class BaseAnchorVC: BaseVC &#123;  </div><div class="line">  </div><div class="line">    //!表示用到的时候保证有值  </div><div class="line">    var baseVM : BaseVM!  </div><div class="line">      </div><div class="line">    lazy var collectionView : UICollectionView = &#123;[unowned self] in  </div><div class="line">        let layout = UICollectionViewFlowLayout()  </div><div class="line">        layout.itemSize = CGSize(width: kNormalItemW, height: kNormalItemH)  </div><div class="line">        layout.minimumLineSpacing = 0  </div><div class="line">        layout.minimumInteritemSpacing = kItemMargin  </div><div class="line">        layout.headerReferenceSize = CGSize(width: kScreenW, height: kHeaderViewH)  </div><div class="line">        layout.sectionInset = UIEdgeInsets(top: 0, left: kItemMargin, bottom: 0, right: kItemMargin)  </div><div class="line">          </div><div class="line">        let collectionView = UICollectionView(frame: self.view.bounds, collectionViewLayout: layout)  </div><div class="line">        collectionView.backgroundColor = UIColor.white  </div><div class="line">        collectionView.dataSource = self  </div><div class="line">        collectionView.delegate = self  </div><div class="line">        collectionView.autoresizingMask = [.flexibleHeight, .flexibleWidth]  </div><div class="line">          </div><div class="line">        collectionView.register(UINib(nibName: &quot;CollectionNormalCell&quot;, bundle: nil), forCellWithReuseIdentifier: NormalCellID)  </div><div class="line">        collectionView.register(UINib(nibName: &quot;CollectionPrettyCell&quot;, bundle: nil), forCellWithReuseIdentifier: PrettyCellID)  </div><div class="line">        collectionView.register(UINib(nibName: &quot;CollectionHeaderView&quot;, bundle: nil), forSupplementaryViewOfKind: UICollectionElementKindSectionHeader, withReuseIdentifier: HeaderViewID)  </div><div class="line">          </div><div class="line">        return collectionView  </div><div class="line">        &#125;()  </div><div class="line">      </div><div class="line">    override func viewDidLoad() &#123;  </div><div class="line">        super.viewDidLoad()  </div><div class="line">        setupUI()  </div><div class="line">        loadData()  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">extension BaseAnchorVC &#123;  </div><div class="line">    override func setupUI() &#123;  </div><div class="line">        contentView = collectionView  </div><div class="line">        view.addSubview(collectionView)  </div><div class="line">        super.setupUI()  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">extension BaseAnchorVC &#123;  </div><div class="line">    func loadData() &#123;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">extension BaseAnchorVC : UICollectionViewDataSource &#123;  </div><div class="line">    func numberOfSections(in collectionView: UICollectionView) -&gt; Int &#123;  </div><div class="line">        return baseVM.anchorGroups.count  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int &#123;  </div><div class="line">        return baseVM.anchorGroups[section].anchors.count  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell &#123;  </div><div class="line">        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: NormalCellID, for: indexPath) as! CollectionNormalCell  </div><div class="line">        cell.anchor = baseVM.anchorGroups[indexPath.section].anchors[indexPath.item]  </div><div class="line">        return cell  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -&gt; UICollectionReusableView &#123;  </div><div class="line">        let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: HeaderViewID, for: indexPath) as! CollectionHeaderView  </div><div class="line">        headerView.group = baseVM.anchorGroups[indexPath.section]  </div><div class="line">        return headerView  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">extension BaseAnchorVC : UICollectionViewDelegate &#123;  </div><div class="line">    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) &#123;  </div><div class="line">        let anchor = baseVM.anchorGroups[indexPath.section].anchors[indexPath.item]  </div><div class="line">        anchor.isVertical == 0 ? pushNormalRoomVc(anchor) : presentShowRoomVc(anchor)  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    private func presentShowRoomVc(_ anchor : AnchorModel) &#123;  </div><div class="line">        let showVc = ShowRoomVC()  </div><div class="line">        showVc.anchor = anchor  </div><div class="line">        present(showVc, animated: true, completion: nil)  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    private func pushNormalRoomVc(_ anchor : AnchorModel) &#123;  </div><div class="line">        let normalVc = NormalRoomVC()  </div><div class="line">        normalVc.anchor = anchor  </div><div class="line">        navigationController?.pushViewController(normalVc, animated: true)  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import UIKit  </div><div class="line">  </div><div class="line">class GameVC: BaseAnchorVC &#123;  </div><div class="line">    fileprivate lazy var gameVM : GameVM = GameVM()  </div><div class="line">    fileprivate lazy var menuView : MenuView = &#123;  </div><div class="line">        let menuView = MenuView.menuView()  </div><div class="line">        menuView.frame = CGRect(x: 0, y: -kMenuViewH, width: kScreenW, height: kMenuViewH)//设置collectionView的-y,放置menuView  </div><div class="line">        return menuView  </div><div class="line">    &#125;()  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">extension GameVC &#123;  </div><div class="line">    override func setupUI() &#123;  </div><div class="line">        super.setupUI()  </div><div class="line">        collectionView.addSubview(menuView)  </div><div class="line">        collectionView.contentInset = UIEdgeInsets(top: kMenuViewH, left: 0, bottom: 0, right: 0)//设置内边距  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">extension GameVC&#123;  </div><div class="line">    override func loadData() &#123;  </div><div class="line">        baseVM = self.gameVM  </div><div class="line">        gameVM.requestData &#123;  </div><div class="line">            self.collectionView.reloadData()  </div><div class="line">            var gameGroups = Array(self.gameVM.anchorGroups[1...15])//0...15 &amp; gameGroups.removeFirst()  </div><div class="line">            let moreGroup = AnchorGroup()  </div><div class="line">            moreGroup.tag_name = &quot;更多分类&quot;  </div><div class="line">            gameGroups.append(moreGroup)  </div><div class="line">            self.menuView.groups = gameGroups  </div><div class="line">            self.loadDataFinished()  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import UIKit  </div><div class="line">import Alamofire  </div><div class="line">  </div><div class="line">enum MethodType &#123;  </div><div class="line">    case get  </div><div class="line">    case post  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">class HttpTools &#123;  </div><div class="line">    class func requestData(_ type : MethodType, URLString : String, parameters : [String : Any]? = nil, finishedCallback :  @escaping (_ result : Any) -&gt; ()) &#123;  </div><div class="line">        let method = type == .get ? HTTPMethod.get : HTTPMethod.post  </div><div class="line">        Alamofire.request(URLString, method: method, parameters: parameters).responseJSON &#123; (response) in  </div><div class="line">            guard let result = response.result.value else &#123;  </div><div class="line">                print(response.result.error)  </div><div class="line">                return  </div><div class="line">            &#125;  </div><div class="line">            finishedCallback(result)  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>附：<a href="https://github.com/xiangzhihong/douyu" target="_blank" rel="external">swift斗鱼app界面</a><br>     <a href="https://pan.baidu.com/s/1nv8iubJ?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0" target="_blank" rel="external">斗鱼完整代码oc</a><br>     <a href="http://www.jianshu.com/p/4d2032ca9cc5" target="_blank" rel="external">oc代码原文</a></p>]]></content>
    
    <summary type="html">
    
      高仿ios斗鱼界面
    
    </summary>
    
      <category term="ios" scheme="http://code.youmeek.com/categories/ios/"/>
    
    
      <category term="高仿" scheme="http://code.youmeek.com/tags/%E9%AB%98%E4%BB%BF/"/>
    
      <category term="ios" scheme="http://code.youmeek.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Node入门</title>
    <link href="http://code.youmeek.com/2016/11/05/visitor/"/>
    <id>http://code.youmeek.com/2016/11/05/visitor/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2017-01-24T08:06:38.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><p>Node 是一个服务器端 JavaScript 解释器，用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。<br>Node.js 是一个可以让 JavaScript 运行在浏览器之外的平台。它实现了诸如文件系统、模块、包、操作系统 API、网络通信等 Core JavaScript 没有或者不完善的功能。历史上将 JavaScript移植到浏览器外的计划不止一个，但Node.js 是最出色的一个。</p>
<h2 id="什么是v8引擎"><a href="#什么是v8引擎" class="headerlink" title="什么是v8引擎"></a>什么是v8引擎</h2><p>V8 JavaScript 引擎是 Google 用于其 Chrome 浏览器的底层 JavaScript 引擎。很少有人考虑 JavaScript 在客户机上实际做了些什么？实际上，JavaScript 引擎负责解释并执行代码。Google 使用 V8 创建了一个用 C++ 编写的超快解释器，该解释器拥有另一个独特特征；您可以下载该引擎并将其嵌入任何 应用程序。V8 JavaScript 引擎并不仅限于在一个浏览器中运行。因此，Node 实际上会使用 Google 编写的 V8 JavaScript 引擎，并将其重建为可在服务器上使用。</p>
<h2 id="Node-js的作用"><a href="#Node-js的作用" class="headerlink" title="Node.js的作用"></a>Node.js的作用</h2><p>Node 公开宣称的目标是 “旨在提供一种简单的构建可伸缩网络程序的方法”。我们来看一个简单的例子，在 Java™ 和 PHP 这类语言中，每个连接都会生成一个新线程，每个新线程可能需要 2 MB 的配套内存。在一个拥有 8 GB RAM 的系统上，理论上最大的并发连接数量是 4,000 个用户。随着您的客户群的增长，如果希望您的 Web 应用程序支持更多用户，那么，您必须添加更多服务器。所以在传统的后台开发中，整个 Web 应用程序架构（包括流量、处理器速度和内存速度）中的瓶颈是：服务器能够处理的并发连接的最大数量。这个不同的架构承载的并发数量是不一致的。<br>而Node的出现就是为了解决这个问题：更改连接到服务器的方式。在Node 声称它不允许使用锁，它不会直接阻塞 I/O 调用。Node在每个连接发射一个在 Node 引擎的进程中运行的事件，而不是为每个连接生成一个新的 OS 线程（并为其分配一些配套内存）。</p>
<h2 id="Node-js能做什么"><a href="#Node-js能做什么" class="headerlink" title="Node.js能做什么"></a>Node.js能做什么</h2><p>借用一句经典的描述Node.js的话:正如 JavaScript 为客户端而生，Node.js 为网络而生。<br>使用Node.js，你可以轻易的实现：</p>
<ul>
<li>具有复杂逻辑的网站；</li>
<li>基于社交网络的大规模 Web 应用；</li>
<li>Web Socket 服务器；</li>
<li>TCP/UDP 套接字应用程序；</li>
<li>命令行工具；</li>
<li>交互式终端程序；</li>
<li>带有图形用户界面的本地应用程序；</li>
<li>单元测试工具；</li>
<li>客户端 JavaScript 编译器。</li>
</ul>
<h2 id="什么是事件驱动编程"><a href="#什么是事件驱动编程" class="headerlink" title="什么是事件驱动编程"></a>什么是事件驱动编程</h2><p>在我们使用Java，PHP等语言实现编程的时候，我们面向对象编程是完美的编程设计，这使得他们对其他编程方法不屑一顾。却不知大名鼎鼎Node使用的却是事件驱动编程的思想。那什么是事件驱动编程。<br><strong>事件驱动编程，为需要处理的事件编写相应的事件处理程序。代码在事件发生时执行。</strong><br>为需要处理的事件编写相应的事件处理程序。要理解事件驱动和程序，就需要与非事件驱动的程序进行比较。实际上，现代的程序大多是事件驱动的，比如多线程的程序，肯定是事件驱动的。早期则存在许多非事件驱动的程序，这样的程序，在需要等待某个条件触发时，会不断地检查这个条件，直到条件满足，这是很浪费cpu时间的。而事件驱动的程序，则有机会释放cpu从而进入睡眠态（注意是有机会，当然程序也可自行决定不释放cpu），当事件触发时被操作系统唤醒，这样就能更加有效地使用cpu。<br>来看一张简单的事件驱动模型（uml）：</p>
<p><img src="http://img.blog.csdn.net/20161231115520916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>事件驱动模型主要包含3个对象：事件源、事件和事件处理程序。</p>
<ul>
<li>事件源：产生事件的地方(html元素)</li>
<li>事件：点击/鼠标操作/键盘操作等等</li>
<li>事件对象：当某个事件发生时，可能会产生一个事件对象，该时间对象会封装好该时间的信息，传递给事件处理程序</li>
<li>事件处理程序：响应用户事件的代码<br>其实我们使用的window系统也算得上是事件驱动了。我们来看一个简单的事例：监听鼠标点击事件，并能够显示鼠标点击的位置x,y。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt; </div><div class="line">   &lt;head&gt; </div><div class="line">   &lt;script&gt; </div><div class="line">   function test1(e)&#123; </div><div class="line">     window.alert(&quot;x=&quot;+e.clientX+&quot;y=&quot;+e.clientY); </div><div class="line">   &#125; </div><div class="line">   &lt;/script&gt; </div><div class="line">   &lt;/head&gt; </div><div class="line">   &lt;body onmousedown=&quot;test1(event)&quot;&gt; </div><div class="line">   &lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="Node-js运行原理分析"><a href="#Node-js运行原理分析" class="headerlink" title="Node.js运行原理分析"></a>Node.js运行原理分析</h1><p>当我们搜索Node.js时，夺眶而出的关键字就是 “单线程，异步I/O，事件驱动”，应用程序的请求过程可以分为俩个部分：CPU运算和I/O读写，CPU计算速度通常远高于磁盘读写速度，这就导致CPU运算已经完成，但是不得不等待磁盘I/O任务完成之后再继续接下来的业务。<br>    所以I/O才是应用程序的瓶颈所在，在I/O密集型业务中，假设请求需要100ms来完成，其中99ms化在I/O上。如果需要优化应用程序，让他能同时处理更多的请求，我们会采用多线程，同时开启100个、1000个线程来提高我们请求处理，当然这也是一种可观的方案。<br>     但是由于一个CPU核心在一个时刻只能做一件事情，操作系统只能通过将CPU切分为时间片的方法，让线程可以较为均匀的使用CPU资源。但操作系统在内核切换线程的同时也要切换线程的上线文，当线程数量过多时，时间将会被消耗在上下文切换中。所以在大并发时，多线程结构还是无法做到强大的伸缩性。<br> 那么是否可以另辟蹊径呢？！我们先来看看单线程，《深入浅出Node》一书提到 “单线程的最大好处，是不用像多线程编程那样处处在意状态的同步问题，这里没有死锁的存在，也没有线程上下文切换所带来的性能上的开销”，那么一个线程一次只能处理一个请求岂不是无稽之谈，先让我们看张图：<br> <img src="http://img.blog.csdn.net/20161231120417621?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br> Node.js的单线程并不是真正的单线程，只是开启了单个线程进行业务处理（cpu的运算），同时开启了其他线程专门处理I/O。当一个指令到达主线程，主线程发现有I/O之后，直接把这个事件传给I/O线程，不会等待I/O结束后，再去处理下面的业务，而是拿到一个状态后立即往下走，这就是“单线程”、“异步I/O”。<br> I/O操作完之后呢？Node.js的I/O 处理完之后会有一个回调事件，这个事件会放在一个事件处理队列里头，在进程启动时node会创建一个类似于While(true)的循环，它的每一次轮询都会去查看是否有事件需要处理，是否有事件关联的回调函数需要处理，如果有就处理，然后加入下一个轮询，如果没有就退出进程，这就是所谓的“事件驱动”。这也从Node的角度解释了什么是”事件驱动”。<br> 在node.js中，事件主要来源于网络请求，文件I/O等，根据事件的不同对观察者进行了分类，有文件I/O观察者，网络I/O观察者。事件驱动是一个典型的生产者/消费者模型，请求到达观察者那里，事件循环从观察者进行消费，主线程就可以马不停蹄的只关注业务不用再去进行I/O等待。</p>
<h1 id="Node-js的简单实践"><a href="#Node-js的简单实践" class="headerlink" title="Node.js的简单实践"></a>Node.js的简单实践</h1><p> 关于node的环境搭建这里就不说明了<a href="http://blog.csdn.net/xiangzhihong8/article/details/52842061" target="_blank" rel="external">node入门</a>。这里为了方便大家理解，我们写一个简单的登录实例。<br> 这里为了方便前端小白的理解，新增一个小节，如何使用Node搭建一个新的项目。</p>
<h2 id="使用Node创建项目"><a href="#使用Node创建项目" class="headerlink" title="使用Node创建项目"></a>使用Node创建项目</h2><p> 安装Express</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g express  </div><div class="line">npm install -g express-generator</div></pre></td></tr></table></figure>
<p>新建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express -t ejs newsproject</div></pre></td></tr></table></figure></p>
<p>按照提示进入项目目录，运行npm安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd newsprojec</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>运行项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure>
<p>浏览器访问:<a href="http://127.0.0.1:3000/即可见nodejs站点页面即可。" target="_blank" rel="external">http://127.0.0.1:3000/即可见nodejs站点页面即可。</a><br>接下来我们写一个简单的例子，来看一下效果图：<br><img src="http://img.blog.csdn.net/20161231215128577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br> 整个目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">根目录--------------</div><div class="line">    |-package.json</div><div class="line">    |-test.js</div><div class="line">    |-public</div><div class="line">        |-main.html</div><div class="line">        |-next.html</div></pre></td></tr></table></figure></p>
<p>整个目录包含三个文件，test.js（作为控制文件）、main.html和next.html作为页面的显示文件。<br>来看一下代码：<br>test.js（作为控制文件）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// file name :test.js</div><div class="line">var express             = require(&apos;express&apos;);</div><div class="line">var app                 = express();</div><div class="line">var bodyParse           = require(&apos;body-parser&apos;)</div><div class="line">var cookieParser        = require(&apos;cookie-parser&apos;) ;</div><div class="line">app.use(cookieParser()) ;</div><div class="line">app.use(bodyParse.urlencoded(&#123;extended:false&#125;)) ;</div><div class="line"></div><div class="line">// 处理根目录的get请求</div><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">    res.sendfile(&apos;public/main.html&apos;) ;</div><div class="line">    console.log(&apos;main page is required &apos;);</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">// 处理/login的get请求</div><div class="line">app.get(&apos;/add&apos;, function (req,res) &#123;</div><div class="line">    res.sendfile(&apos;public/add.html&apos;) ;</div><div class="line">    console.log(&apos;add page is required &apos;) ;</div><div class="line">&#125;) ;</div><div class="line"></div><div class="line">// 处理/login的post请求</div><div class="line">app.post(&apos;/login&apos;,function(req,res)&#123;</div><div class="line">    name=req.body.name ;</div><div class="line">    pwd=req.body.pwd   ;</div><div class="line">    console.log(name+&apos;--&apos;+pwd) ;</div><div class="line">    res.status(200).send(name+&apos;--&apos;+pwd) ;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 监听3000端口</div><div class="line">var server=app.listen(3000) ;</div></pre></td></tr></table></figure>
<p>main.html的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://fonts.useso.com/css?family=Tangerine|Inconsolata|Droid+Sans&quot;&gt;</div><div class="line"></div><div class="line">    &lt;style&gt;</div><div class="line">        div#test&#123;</div><div class="line">            font-family: &apos;Tangerine&apos;,serif;</div><div class="line">            font-size: 48px;</div><div class="line">        &#125;</div><div class="line">        p#link1&#123;</div><div class="line">            font-family: &apos;Tangerine&apos;,serif;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &lt;/style&gt;</div><div class="line"></div><div class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/2.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;test&quot;&gt;</div><div class="line">    &lt;h1&gt;Main Page&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p&gt;Register &amp; Login&lt;/p&gt;</div><div class="line">&lt;form action=&quot;test.jsp&quot; method=&quot;post&quot;&gt;</div><div class="line">    账号 :</div><div class="line">    &lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;</div><div class="line">    &lt;br/&gt;&lt;br/&gt;</div><div class="line">    密码 :</div><div class="line">    &lt;input type=&quot;text&quot; id=&quot;pwd&quot; /&gt;</div><div class="line">    &lt;br/&gt;&lt;br/&gt;</div><div class="line">    &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp</div><div class="line">    &lt;div&gt;&lt;a href=&quot;/add&quot; id=&quot;add&quot;&gt;EXTRA&lt;/a&gt;&lt;/div&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;Submit&quot; id=&quot;x&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line"></div><div class="line">        var after_login=function(data,status)&#123;</div><div class="line">            if (status==&apos;success&apos;)&#123;</div><div class="line">                alert(data+&apos;--&apos;+status) ;</div><div class="line">            &#125;</div><div class="line">            else alert(&apos;login refused&apos;) ;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $(document).ready(function()&#123;</div><div class="line">            $(&quot;#x&quot;).click(function()&#123;</div><div class="line">                var name    =   $(&quot;#name&quot;).val() ;</div><div class="line">                var pwd     =   $(&quot;#pwd&quot;).val() ;</div><div class="line">                $.post(&apos;http://127.0.0.1:3000/login&apos;,</div><div class="line">                &#123;</div><div class="line">                    name    :   name ,</div><div class="line">                    pwd     :   pwd</div><div class="line">                &#125;,</div><div class="line">//                        function(data,status)&#123;</div><div class="line">//                            alert(data+&apos;--&apos;+status) ;</div><div class="line">//                        &#125;</div><div class="line">                        after_login</div><div class="line">                );</div><div class="line">//                $.get(&apos;add&apos;,function(data,status)&#123;</div><div class="line">//                    document.write(data) ;</div><div class="line">//                &#125;) ;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>next.html的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;第二页面&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;This is an additional web page&lt;/h1&gt;</div><div class="line">&lt;p&gt;just for test&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Node入门
    
    </summary>
    
      <category term="前端" scheme="http://code.youmeek.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Node入门" scheme="http://code.youmeek.com/tags/Node%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS使用自签名证书实现HTTPS请求</title>
    <link href="http://code.youmeek.com/2016/11/05/iOS%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0HTTPS%E8%AF%B7%E6%B1%82/"/>
    <id>http://code.youmeek.com/2016/11/05/iOS使用自签名证书实现HTTPS请求/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2017-03-02T12:08:33.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在16年的WWDC中，Apple已表示将从2017年1月1日起，所有新提交的App必须强制性应用HTTPS协议来进行网络请求。<br>默认情况下非HTTPS的网络访问是禁止的并且不能再通过简单粗暴的向Info.plist中添加NSAllowsArbitraryLoads设置绕过ATS(App Transport Security)的限制（否则须在应用审核时进行说明并很可能会被拒）。所以还未进行相应配置的公司需要尽快将升级为HTTPS的事项提上进程了。</p>
<h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><p>HTTPS就是HTTP协议上再加一层加密处理的SSL协议,即HTTP安全版。相比HTTP，HTTPS可以保证内容在传输过程中不会被第三方查看、及时发现被第三方篡改的传输内容、防止身份冒充，从而更有效的保证网络数据的安全。至于深层次的原理和介绍请查询相关资料和文档。<br>HTTPS客户端与服务器交互过程：<br>1、 客户端第一次请求时，服务器会返回一个包含公钥的数字证书给客户端；<br>2、 客户端生成对称加密密钥并用其得到的公钥对其加密后返回给服务器；<br>3、 服务器使用自己私钥对收到的加密数据解密，得到对称加密密钥并保存；<br>4、 然后双方通过对称加密的数据进行传输。<br><img src="http://img.blog.csdn.net/20161223160614593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>在HTTPS客户端与服务器第一次交互时，服务端返回给客户端的数字证书是让客户端验证这个数字证书是不是服务端的，证书所有者是不是该服务器，确保数据由正确的服务端发来，没有被第三方篡改。数字证书可以保证数字证书里的公钥确实是这个证书的所有者(Subject)的，或者证书可以用来确认对方身份。证书由公钥、证书主题(Subject)、数字签名(digital signature)等内容组成。其中数字签名就是证书的防伪标签，目前使用最广泛的SHA-RSA加密。<br>证书一般分为两种：<br>一种是向权威认证机构购买的证书，服务端使用该种证书时，因为苹果系统内置了其受信任的签名根证书，所以客户端不需额外的配置。为了证书安全，在证书发布机构公布证书时，证书的指纹算法都会加密后再和证书放到一起公布以防止他人伪造数字证书。而证书机构使用自己的私钥对其指纹算法加密，可以用内置在操作系统里的机构签名根证书来解密，以此保证证书的安全。如x509、RSA。<br>另一种是自己制作的证书，即自签名证书。好处是不需要花钱购买，但使用这种证书是不会受信任的，所以需要我们在代码中将该证书配置为信任证书。这就是本文的主要目的。如12306官网的证书。</p>
<h1 id="创建自定义证书"><a href="#创建自定义证书" class="headerlink" title="创建自定义证书"></a>创建自定义证书</h1><p>我们在使用自签名证书来实现HTTPS请求时，因为不像机构颁发的证书一样其签名根证书在系统中已经内置了，所以我们需要在App中内置自己服务器的签名根证书来验证数字证书。<br>首先将服务端生成的.cer格式的根证书添加到项目中，注意在添加证书要一定要记得勾选要添加的targets。这里有个地方要注意：苹果的ATS要求服务端必须支持TLS 1.2或以上版本；必须使用支持前向保密的密码；证书必须使用SHA-256或者更好的签名hash算法来签名，如果证书无效，则会导致连接失败。由于我在生成的根证书时签名hash算法低于其要求，在配置完请求时一直报NSURLErrorServerCertificateUntrusted = -1202错误，希望大家可以注意到这一点。<br>本文使用AFNetworking 3.0来配置证书校验。其中AFSecurityPolicy类中封装了证书校验的过程。<br>AFSecurityPolicy分三种验证模式：<br>1、AFSSLPinningModeNone：只验证证书是否在新人列表中<br>2、AFSSLPinningModeCertificate：验证证书是否在信任列表中，然后再对比服务端证书和客户端证书是否一致<br>3、 AFSSLPinningModePublicKey：只验证服务端与客户端证书的公钥是否一致<br>这里我们选第二种模式，并且对AFSecurityPolicy的allowInvalidCertificates和 validatesDomainName进行设置。</p>
<h2 id="准备证书"><a href="#准备证书" class="headerlink" title="准备证书"></a>准备证书</h2><p>我这边使用的是xca来制作了根证书，制作流程请参考<a href="http://www.2cto.com/Article/201411/347512.html，由于xca无法导出.jsk的后缀，因此我们只要制作完根证书后以.p12的格式导出就行了，之后的证书制作由命令行来完成。自制一个批处理文件，添加如下命令：" target="_blank" rel="external">http://www.2cto.com/Article/201411/347512.html，由于xca无法导出.jsk的后缀，因此我们只要制作完根证书后以.p12的格式导出就行了，之后的证书制作由命令行来完成。自制一个批处理文件，添加如下命令：</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">set ip=%1%</div><div class="line">md %ip%</div><div class="line">keytool -importkeystore -srckeystore ca.p12 -srcstoretype PKCS12 -srcstorepass 123456 -destkeystore ca.jks -deststoretype JKS -deststorepass 123456</div><div class="line">keytool -genkeypair -alias server-%ip% -keyalg RSA -keystore ca.jks -storepass 123456 -keypass 123456 -validity 3650 -dname &quot;CN=%ip%, OU=ly, O=hik, L=hz, ST=zj, C=cn&quot;</div><div class="line">keytool -certreq -alias server-%ip% -storepass 123456 -file %ip%\server-%ip%.certreq -keystore ca.jks</div><div class="line">keytool -gencert -alias ca -storepass 123456 -infile %ip%\server-%ip%.certreq -outfile %ip%\server-%ip%.cer -validity 3650 -keystore ca.jks  </div><div class="line">keytool -importcert -trustcacerts -storepass 123456 -alias server-%ip% -file %ip%\server-%ip%.cer -keystore ca.jks</div><div class="line">keytool -delete -keystore ca.jks -alias ca -storepass 123456</div></pre></td></tr></table></figure>
<p>将上面加粗的ca.p12改成你导出的.p12文件的名称，123456改为你创建证书的密码。<br>然后在文件夹空白处按住ctrl+shift点击右键，选择在此处打开命令窗口，在命令窗口中输入“start.bat ip/域名”来执行批处理文件，其中start.bat是添加了上述命令的批处理文件，ip/域名即你服务器的ip或者域名。执行成功后会生成一个.jks文件和一个以你的ip或域名命名的文件夹，文件夹中有一个.cer的证书，这边的.jks文件将在服务端使用.cer文件将在客户端使用，到这里证书的准备工作就完成了。</p>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>打开tomcat/conf目录下的server.xml文件将HTTPS的配置打开，并进行如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Connector URIEncoding=&quot;UTF-8&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; port=&quot;8443&quot; maxThreads=&quot;200&quot; scheme=&quot;https&quot; secure=&quot;true&quot; SSLEnabled=&quot;true&quot; sslProtocol=&quot;TLSv1.2&quot; sslEnabledProtocols=&quot;TLSv1.2&quot; keystoreFile=&quot;$&#123;catalina.base&#125;/ca/ca.jks&quot; keystorePass=&quot;123456&quot; clientAuth=&quot;false&quot; SSLVerifyClient=&quot;off&quot; netZone=&quot;你的ip或域名&quot;/&gt;</div></pre></td></tr></table></figure>
<p>keystoreFile是你.jks文件放置的目录，keystorePass是你制作证书时设置的密码，netZone填写你的ip或域名。注意苹果要求协议要TLSv1.2以上。</p>
<h2 id="iOS端配置"><a href="#iOS端配置" class="headerlink" title="iOS端配置"></a>iOS端配置</h2><p>首先把前面生成的.cer文件添加到项目中，注意在添加的时候选择要添加的targets。</p>
<h3 id="使用NSURLSession进行请求"><a href="#使用NSURLSession进行请求" class="headerlink" title="使用NSURLSession进行请求"></a>使用NSURLSession进行请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSString *urlString = @&quot;https://xxxxxxx&quot;;</div><div class="line">NSURL *url = [NSURL URLWithString:urlString];</div><div class="line">NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:10.0f];</div><div class="line">NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[NSOperationQueue mainQueue]];</div><div class="line">NSURLSessionDataTask *task = [session dataTaskWithRequest:request];</div><div class="line">[task resume];</div></pre></td></tr></table></figure>
<p>需要实现NSURLSessionDataDelegate中的URLSession:didReceiveChallenge:completionHandler:方法来进行证书的校验：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge</div><div class="line"> completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler &#123;</div><div class="line">    NSLog(@&quot;证书认证&quot;);</div><div class="line">    if ([[[challenge protectionSpace] authenticationMethod] isEqualToString: NSURLAuthenticationMethodServerTrust]) &#123;</div><div class="line">        do</div><div class="line">        &#123;</div><div class="line">            SecTrustRef serverTrust = [[challenge protectionSpace] serverTrust];</div><div class="line">            NSCAssert(serverTrust != nil, @&quot;serverTrust is nil&quot;);</div><div class="line">            if(nil == serverTrust)</div><div class="line">                break; /* failed */</div><div class="line">            /**</div><div class="line">             *  导入多张CA证书（Certification Authority，支持SSL证书以及自签名的CA），请替换掉你的证书名称</div><div class="line">             */</div><div class="line">            NSString *cerPath = [[NSBundle mainBundle] pathForResource:@&quot;ca&quot; ofType:@&quot;cer&quot;];//自签名证书</div><div class="line">            NSData* caCert = [NSData dataWithContentsOfFile:cerPath];</div><div class="line"></div><div class="line">            NSCAssert(caCert != nil, @&quot;caCert is nil&quot;);</div><div class="line">            if(nil == caCert)</div><div class="line">                break; /* failed */</div><div class="line">            </div><div class="line">            SecCertificateRef caRef = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)caCert);</div><div class="line">            NSCAssert(caRef != nil, @&quot;caRef is nil&quot;);</div><div class="line">            if(nil == caRef)</div><div class="line">                break; /* failed */</div><div class="line">            </div><div class="line">            //可以添加多张证书</div><div class="line">            NSArray *caArray = @[(__bridge id)(caRef)];</div><div class="line">            </div><div class="line">            NSCAssert(caArray != nil, @&quot;caArray is nil&quot;);</div><div class="line">            if(nil == caArray)</div><div class="line">                break; /* failed */</div><div class="line">            </div><div class="line">            //将读取的证书设置为服务端帧数的根证书</div><div class="line">            OSStatus status = SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)caArray);</div><div class="line">            NSCAssert(errSecSuccess == status, @&quot;SecTrustSetAnchorCertificates failed&quot;);</div><div class="line">            if(!(errSecSuccess == status))</div><div class="line">                break; /* failed */</div><div class="line">            </div><div class="line">            SecTrustResultType result = -1;</div><div class="line">            //通过本地导入的证书来验证服务器的证书是否可信</div><div class="line">            status = SecTrustEvaluate(serverTrust, &amp;result);</div><div class="line">            if(!(errSecSuccess == status))</div><div class="line">                break; /* failed */</div><div class="line">            NSLog(@&quot;stutas:%d&quot;,(int)status);</div><div class="line">            NSLog(@&quot;Result: %d&quot;, result);</div><div class="line">            </div><div class="line">            BOOL allowConnect = (result == kSecTrustResultUnspecified) || (result == kSecTrustResultProceed);</div><div class="line">            if (allowConnect) &#123;</div><div class="line">                NSLog(@&quot;success&quot;);</div><div class="line">            &#125;else &#123;</div><div class="line">                NSLog(@&quot;error&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            /* kSecTrustResultUnspecified and kSecTrustResultProceed are success */</div><div class="line">            if(! allowConnect)</div><div class="line">            &#123;</div><div class="line">                break; /* failed */</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">#if 0</div><div class="line">            /* Treat kSecTrustResultConfirm and kSecTrustResultRecoverableTrustFailure as success */</div><div class="line">            /*   since the user will likely tap-through to see the dancing bunnies */</div><div class="line">            if(result == kSecTrustResultDeny || result == kSecTrustResultFatalTrustFailure || result == kSecTrustResultOtherError)</div><div class="line">                break; /* failed to trust cert (good in this case) */</div><div class="line">#endif</div><div class="line">            </div><div class="line">            // The only good exit point</div><div class="line">            NSLog(@&quot;信任该证书&quot;);</div><div class="line">            </div><div class="line">            NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];</div><div class="line">            completionHandler(NSURLSessionAuthChallengeUseCredential,credential);</div><div class="line">            return [[challenge sender] useCredential: credential</div><div class="line">                          forAuthenticationChallenge: challenge];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        while(0);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // Bad dog</div><div class="line">    NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];</div><div class="line">    completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge,credential);</div><div class="line">    return [[challenge sender] cancelAuthenticationChallenge: challenge];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时即可成功请求到服务端。</p>
<h3 id="使用AFNetworking进行请求"><a href="#使用AFNetworking进行请求" class="headerlink" title="使用AFNetworking进行请求"></a>使用AFNetworking进行请求</h3><p>AFNetworking首先需要配置AFSecurityPolicy类，AFSecurityPolicy类封装了证书校验的过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> AFSecurityPolicy分三种验证模式：</div><div class="line"> AFSSLPinningModeNone:只是验证证书是否在信任列表中</div><div class="line"> AFSSLPinningModeCertificate：该模式会验证证书是否在信任列表中，然后再对比服务端证书和客户端证书是否一致</div><div class="line"> AFSSLPinningModePublicKey：只验证服务端证书与客户端证书的公钥是否一致</div><div class="line">*/</div><div class="line"></div><div class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</div><div class="line">    securityPolicy.allowInvalidCertificates = YES;//是否允许使用自签名证书</div><div class="line">    securityPolicy.validatesDomainName = NO;//是否需要验证域名，默认YES</div><div class="line"></div><div class="line">    AFHTTPSessionManager *_manager = [AFHTTPSessionManager manager];</div><div class="line">    _manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    _manager.securityPolicy = securityPolicy;</div><div class="line">    //设置超时</div><div class="line">    [_manager.requestSerializer willChangeValueForKey:@&quot;timeoutinterval&quot;];</div><div class="line">    _manager.requestSerializer.timeoutInterval = 20.f;</div><div class="line">    [_manager.requestSerializer didChangeValueForKey:@&quot;timeoutinterval&quot;];</div><div class="line">    _manager.requestSerializer.cachePolicy = NSURLRequestReloadIgnoringCacheData;</div><div class="line">    _manager.responseSerializer.acceptableContentTypes  = [NSSet setWithObjects:@&quot;application/xml&quot;,@&quot;text/xml&quot;,@&quot;text/plain&quot;,@&quot;application/json&quot;,nil];</div><div class="line"> </div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    [_manager setSessionDidReceiveAuthenticationChallengeBlock:^NSURLSessionAuthChallengeDisposition(NSURLSession *session, NSURLAuthenticationChallenge *challenge, NSURLCredential *__autoreleasing *_credential) &#123;</div><div class="line">        </div><div class="line">        SecTrustRef serverTrust = [[challenge protectionSpace] serverTrust];</div><div class="line">        /**</div><div class="line">         *  导入多张CA证书</div><div class="line">         */</div><div class="line">        NSString *cerPath = [[NSBundle mainBundle] pathForResource:@&quot;ca&quot; ofType:@&quot;cer&quot;];//自签名证书</div><div class="line">        NSData* caCert = [NSData dataWithContentsOfFile:cerPath];</div><div class="line">        NSArray *cerArray = @[caCert];</div><div class="line">        weakSelf.manager.securityPolicy.pinnedCertificates = cerArray;</div><div class="line">        </div><div class="line">        SecCertificateRef caRef = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)caCert);</div><div class="line">        NSCAssert(caRef != nil, @&quot;caRef is nil&quot;);</div><div class="line">        </div><div class="line">        NSArray *caArray = @[(__bridge id)(caRef)];</div><div class="line">        NSCAssert(caArray != nil, @&quot;caArray is nil&quot;);</div><div class="line">        </div><div class="line">        OSStatus status = SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)caArray);</div><div class="line">        SecTrustSetAnchorCertificatesOnly(serverTrust,NO);</div><div class="line">        NSCAssert(errSecSuccess == status, @&quot;SecTrustSetAnchorCertificates failed&quot;);</div><div class="line">        </div><div class="line">        NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling;</div><div class="line">        __autoreleasing NSURLCredential *credential = nil;</div><div class="line">        if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) &#123;</div><div class="line">            if ([weakSelf.manager.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) &#123;</div><div class="line">                credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];</div><div class="line">                if (credential) &#123;</div><div class="line">                    disposition = NSURLSessionAuthChallengeUseCredential;</div><div class="line">                &#125; else &#123;</div><div class="line">                    disposition = NSURLSessionAuthChallengePerformDefaultHandling;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                disposition = NSURLSessionAuthChallengeCancelAuthenticationChallenge;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            disposition = NSURLSessionAuthChallengePerformDefaultHandling;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return disposition;</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>由于服务端使用.jks是一个证书库，客户端获取到的证书可能不止一本，我这边获取到了两本，具体获取到基本可通过SecTrustGetCertificateCount方法获取证书个数，AFNetworking在evaluateServerTrust：forDomain：方法中，AFSSLPinningMode的类型为AFSSLPinningModeCertificate和AFSSLPinningModePublicKey的时候都有校验服务端的证书个数与客户端信任的证书数量是否一样，如果不一样的话无法请求成功，所以这边我就修改他的源码，当有一个校验成功时即算成功。<br>参考：<a href="http://www.jianshu.com/p/e6a26ecd84aa" target="_blank" rel="external">http://www.jianshu.com/p/e6a26ecd84aa</a></p>]]></content>
    
    <summary type="html">
    
      iOS使用自签名证书实现HTTPS请求
    
    </summary>
    
      <category term="https" scheme="http://code.youmeek.com/categories/https/"/>
    
    
      <category term="ios" scheme="http://code.youmeek.com/tags/ios/"/>
    
      <category term="https" scheme="http://code.youmeek.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>深入理解React Native页面构建渲染原理</title>
    <link href="http://code.youmeek.com/2016/10/28/React%20%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>http://code.youmeek.com/2016/10/28/React 页面渲染原理/</id>
    <published>2016-10-27T16:00:00.000Z</published>
    <updated>2017-03-02T12:13:05.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React Native 是最近非常火的一个话题，因为它的语法简介，跨平台等特性，赢得了各大平台的青睐，虽然前期是有一些坑。</p>
<h2 id="基本概念解释"><a href="#基本概念解释" class="headerlink" title="基本概念解释"></a>基本概念解释</h2><p>React 是一套可以用简洁的语法高效绘制 DOM 的框架，所谓的“高效”，是因为 React 独创了 Virtual DOM 机制。Virtual DOM 是一个存在于内存中的 JavaScript 对象，它与 DOM 是一一对应的关系，也就是说只要有 Virtual DOM，我们就能渲染出 DOM。当界面发生变化时，得益于高效的 DOM Diff 算法，我们能够知道 Virtual DOM 的变化，从而高效的改动 DOM，避免了重新绘制 DOM。</p>
<p>我们知道React是一个专注于 UI 部分框架，对应到 MVC 结构中就是 View 层。要想实现完整的 MVC 架构，还需要 Model 和 Controller 的结构。在前端开发时，我们可以采用 Flux 和 Redux 架构，它们并非框架(Library)，而是和 MVC 一样都是一种架构设计(Architecture)。</p>
<p> 我们知道React Native之所以能再Android/ios等移动设备上运行起来，是因为react native和原生设备之间有一种交互，以ios为例，JavaScript 的形式告诉 Objective-C需要执行什么，然后ios自己去调用 UIKit 等框架绘制界面。所以，React Native 能够运行起来，全靠 Objective-C 和 JavaScript 的交互。</p>
<p>我们知道 C 系列的语言，经过编译，链接等操作后，会得到一个二进制格式的可执行文，所谓的运行程序，其实是运行这个二进制程序。而 JavaScript 是一种脚本语言，它不会经过编译、链接等操作，而是在运行时才动态的进行词法、语法分析，生成抽象语法树(AST)和字节码，然后由解释器负责执行或者使用 JIT 将字节码转化为机器码再执行。整个流程由 JavaScript 引擎负责完成。</p>
<p>苹果提供了一个叫做 JavaScript Core 的框架，这是一个 JavaScript 引擎。通过下面这段代码可以简单的感受一下 Objective-C 如何调用 JavaScript 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSContext *context = [[JSContext alloc] init];  </div><div class="line">JSValue *jsVal = [context evaluateScript:@&quot;21+7&quot;];  </div><div class="line">int iVal = [jsVal toInt32];</div></pre></td></tr></table></figure>
<p>JavaScript 是一种单线程的语言，它不具备自运行的能力，因此总是被动调用。很多介绍 React Native 的文章都会提到 “JavaScript 线程” 的概念，实际上，它表示的是 Objective-C 创建了一个单独的线程，这个线程只用于执行 JavaScript 代码，而且 JavaScript 代码只会在这个线程中执行。<br>要完全理解JavaScript和Objective-C之前的交互，可以看我之前关于这方面吗的介绍<a href="http://blog.csdn.net/xiangzhihong8/article/details/53366501" target="_blank" rel="external">React native和原生之间的通信</a></p>
<h1 id="React-Native源码剖析"><a href="#React-Native源码剖析" class="headerlink" title="React Native源码剖析"></a>React Native源码剖析</h1><p>在解释React Native的也没渲染原理之前，我们先看几个概念。</p>
<h2 id="ReactElement和ReactClass"><a href="#ReactElement和ReactClass" class="headerlink" title="ReactElement和ReactClass"></a>ReactElement和ReactClass</h2><p><strong>ReactElement</strong><br>一个描述DOM节点或component实例的字面级对象。它包含一些信息，包括组件类型 type 和属性 props 。就像一个描述DOM节点的元素（虚拟节点）。它们可以被创建通过 React.createElement 方法或 jsx 写法。<br>ReactElement分为 DOM Element 和 Component Elements 两类：<br>DOM Elements实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  type: &apos;button&apos;,</div><div class="line">  props: &#123;</div><div class="line">    className: &apos;button button-blue&apos;,</div><div class="line">    children: &#123;</div><div class="line">      type: &apos;b&apos;,</div><div class="line">      props: &#123;</div><div class="line">        children: &apos;OK!&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Component Elements</strong><br>当节点的type属性为一个函数或一个类时，它代表自定义的节点。<br>Component Elements实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Button extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; children, color &#125; = this.props;</div><div class="line">    return &#123;</div><div class="line">      type: &apos;button&apos;,</div><div class="line">      props: &#123;</div><div class="line">        className: &apos;button button-&apos; + color,</div><div class="line">        children: &#123;</div><div class="line">          type: &apos;b&apos;,</div><div class="line">          props: &#123;</div><div class="line">            children: children</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Component Elements</div><div class="line">&#123;</div><div class="line">  type: Button,</div><div class="line">  props: &#123;</div><div class="line">    color: &apos;blue&apos;,</div><div class="line">    children: &apos;OK!&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ReactClass"><a href="#ReactClass" class="headerlink" title="ReactClass"></a>ReactClass</h2><p>ReactClass是平时我们写的Component组件(类或函数)，例如上面的 Button 类。ReactClass实例化后调用render方法可返回 DOM Element 。<br><img src="http://img.blog.csdn.net/20170114225727446?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如上图所示：</p>
<ol>
<li>调用 React.render 方法，将我们的 element 根虚拟节点渲染到 container 元素中。element 可以是一个字符串文本元素，也可以是如上介绍的 ReactElement 。</li>
<li>根据 element 的类型不同，分别实例化 ReactDOMTextComponent , ReactDOMComponent , ReactCompositeComponent 类。这些类用来管理 ReactElement ,负责将不同的 ReactElement 转化成DOM，并更新DOM。</li>
<li>ReactCompositeComponent 实例调用 mountComponent 方法后内部调用 render 方法，返回了 DOM Elements 。再对如图的步骤:two:递归。<h2 id="React-Native工作原理介绍"><a href="#React-Native工作原理介绍" class="headerlink" title="React Native工作原理介绍"></a>React Native工作原理介绍</h2>要想深入理解 React Native 的工作原理，有两个阶段必须了解：初始化阶段和方法调用阶段。<h3 id="初始化-React-Native"><a href="#初始化-React-Native" class="headerlink" title="初始化 React Native"></a>初始化 React Native</h3>每个项目都有一个入口，然后进行初始化操作，React Native 也不例外。一个不含 Objective-C 代码的项目留给我们的唯一线索就是位于 AppDelegate 文件中，用户能看到的一切内容都来源于这个 RootView ，所有的初始化工作也都在这个方法内完成。</li>
</ol>
<p>在这个方法内部，在创建 RootView 之前，React Native 实际上先创建了一个 Bridge 对象。它是 Objective-C 与 JavaScript 交互的桥梁，后续的方法交互完全依赖于它，而整个初始化过程的最终目的其实也就是创建这个桥梁对象。<br>初始化方法的核心是 setUp 方法，而 setUp 方法的主要任务则是创建 BatchedBridge 。BatchedBridge 的作用是批量读取 JavaScript 对 Objective-C 的方法调用，同时它内部持有一个 JavaScriptExecutor 。创建 BatchedBridge 的关键是 start 方法，它可以分为五个步骤：</p>
<ul>
<li>读取 JavaScript 源码</li>
<li>初始化模块信息</li>
<li>初始化 JavaScript 代码的执行器，即 RCTJSCExecutor 对象</li>
<li>生成模块列表并写入 JavaScript 端</li>
<li>执行 JavaScript 源码<h3 id="JavaScript-调用-Objective-C"><a href="#JavaScript-调用-Objective-C" class="headerlink" title="JavaScript 调用 Objective-C"></a>JavaScript 调用 Objective-C</h3>在调用 Objective-C 代码时，如前文所述，JavaScript 会解析出方法的 ModuleId 、 MethodId 和 Arguments 并放入到 MessageQueue 中，等待 Objective-C 主动拿走，或者超时后主动发送给 Objective-C。</li>
</ul>
<p>Objective-C 负责处理调用的方法是 handleBuffer ，它的参数是一个含有四个元素的数组，每个元素也都是一个数组，分别存放了 ModuleId 、 MethodId 、 Params ，第四个元素目测用处不大。<br>函数内部在每一次方调用中调用 _handleRequestNumber:moduleID:methodID:params 方法。，通过查找模块配置表找出要调用的方法，并通过 runtime 动态的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[method invokeWithBridge:self module:moduleData.instance arguments:params];</div></pre></td></tr></table></figure>
<p>processMethodSignature ，它会根据 JavaScript 的 CallbackId 创建一个 Block，并且在调用完函数后执行这个 Block。</p>
<h2 id="React-Native更新机制"><a href="#React-Native更新机制" class="headerlink" title="React Native更新机制"></a>React Native更新机制</h2><p><img src="http://img.blog.csdn.net/20170114231157469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>之前我们说过，React是有个状态机这么一说的，就是不行的去检查当前的状态，是否需要刷新。</p>
<h3 id="调用this-setState"><a href="#调用this-setState" class="headerlink" title="调用this.setState"></a>调用this.setState</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ReactClass.prototype.setState = function(newState) &#123;</div><div class="line">    this._reactInternalInstance.receiveComponent(null, newState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用内部receiveComponent方法"><a href="#调用内部receiveComponent方法" class="headerlink" title="调用内部receiveComponent方法"></a>调用内部receiveComponent方法</h3><p>这里在接受元素的时候主要分三种情况，文本元素，基本元素，自定义元素。<br><strong>自定义元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ReactCompositeComponent.prototype.receiveComponent = function(nextElement, transaction, nextContext) &#123;</div><div class="line">    var prevElement = this._currentElement;</div><div class="line">    var prevContext = this._context;</div><div class="line"></div><div class="line">    this._pendingElement = null;</div><div class="line"></div><div class="line">    this.updateComponent(</div><div class="line">      transaction,</div><div class="line">      prevElement,</div><div class="line">      nextElement,</div><div class="line">      prevContext,</div><div class="line">      nextContext</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>updateComponent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ReactCompositeComponent.prototype.updateComponent = function(</div><div class="line">    transaction,</div><div class="line">    prevParentElement,</div><div class="line">    nextParentElement,</div><div class="line">    prevUnmaskedContext,</div><div class="line">    nextUnmaskedContext</div><div class="line">)&#123;</div><div class="line">//省略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用内部_performComponentUpdate方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">ReactCompositeComponent.prototype._updateRenderedComponentWithNextElement = function() &#123;</div><div class="line">   </div><div class="line">   // 判定两个element需不需要更新</div><div class="line">   if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) &#123;</div><div class="line">     // 如果需要更新，就继续调用子节点的receiveComponent的方法，传入新的element更新子节点。</div><div class="line">     ReactReconciler.receiveComponent(</div><div class="line">       prevComponentInstance,</div><div class="line">       nextRenderedElement,</div><div class="line">       transaction,</div><div class="line">       this._processChildContext(context)</div><div class="line">     );</div><div class="line">   &#125; else &#123;</div><div class="line">     // 卸载之前的子节点，安装新的子节点</div><div class="line">     var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);</div><div class="line">     ReactReconciler.unmountComponent(</div><div class="line">       prevComponentInstance,</div><div class="line">       safely,</div><div class="line">       false /* skipLifecycle */</div><div class="line">     );</div><div class="line"></div><div class="line">     var nodeType = ReactNodeTypes.getType(nextRenderedElement);</div><div class="line">     this._renderedNodeType = nodeType;</div><div class="line">     var child = this._instantiateReactComponent(</div><div class="line">       nextRenderedElement,</div><div class="line">       nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */</div><div class="line">     );</div><div class="line">     this._renderedComponent = child;</div><div class="line"></div><div class="line">     var nextMarkup = ReactReconciler.mountComponent(</div><div class="line">       child,</div><div class="line">       transaction,</div><div class="line">       this._hostParent,</div><div class="line">       this._hostContainerInfo,</div><div class="line">       this._processChildContext(context),</div><div class="line">       debugID</div><div class="line">     );</div><div class="line">   </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>文本元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ReactDOMTextComponent.prototype.receiveComponent(nextText, transaction) &#123;</div><div class="line">     //跟以前保存的字符串比较</div><div class="line">    if (nextText !== this._currentElement) &#123;</div><div class="line">      this._currentElement = nextText;</div><div class="line">      var nextStringText = &apos;&apos; + nextText;</div><div class="line">      if (nextStringText !== this._stringText) &#123;</div><div class="line">        this._stringText = nextStringText;</div><div class="line">        var commentNodes = this.getHostNode();</div><div class="line">        // 替换文本元素</div><div class="line">        DOMChildrenOperations.replaceDelimitedText(</div><div class="line">          commentNodes[0],</div><div class="line">          commentNodes[1],</div><div class="line">          nextStringText</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>基本元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactDOMComponent.prototype.receiveComponent = function(nextElement, transaction, context) &#123;</div><div class="line">    var prevElement = this._currentElement;</div><div class="line">    this._currentElement = nextElement;</div><div class="line">    this.updateComponent(transaction, prevElement, nextElement, context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>updateComponent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ReactDOMComponent.prototype.updateComponent = function(transaction, prevElement, nextElement, context) &#123;</div><div class="line">    // 略.....</div><div class="line">    //需要单独的更新属性</div><div class="line">    this._updateDOMProperties(lastProps, nextProps, transaction, isCustomComponentTag);</div><div class="line">    //再更新子节点</div><div class="line">    this._updateDOMChildren(</div><div class="line">      lastProps,</div><div class="line">      nextProps,</div><div class="line">      transaction,</div><div class="line">      context</div><div class="line">    );</div><div class="line"></div><div class="line">    // ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>this._updateDOMChildren 方法内部调用diff算法。<br><img src="http://img.blog.csdn.net/20170114232522307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">_updateChildren: function(nextNestedChildrenElements, transaction, context) &#123;</div><div class="line">    var prevChildren = this._renderedChildren;</div><div class="line">    var removedNodes = &#123;&#125;;</div><div class="line">    var mountImages = [];</div><div class="line">    </div><div class="line">    // 获取新的子元素数组</div><div class="line">    var nextChildren = this._reconcilerUpdateChildren(</div><div class="line">      prevChildren,</div><div class="line">      nextNestedChildrenElements,</div><div class="line">      mountImages,</div><div class="line">      removedNodes,</div><div class="line">      transaction,</div><div class="line">      context</div><div class="line">    );</div><div class="line">    </div><div class="line">    if (!nextChildren &amp;&amp; !prevChildren) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var updates = null;</div><div class="line">    var name;</div><div class="line">    var nextIndex = 0;</div><div class="line">    var lastIndex = 0;</div><div class="line">    var nextMountIndex = 0;</div><div class="line">    var lastPlacedNode = null;</div><div class="line"></div><div class="line">    for (name in nextChildren) &#123;</div><div class="line">      if (!nextChildren.hasOwnProperty(name)) &#123;</div><div class="line">        continue;</div><div class="line">      &#125;</div><div class="line">      var prevChild = prevChildren &amp;&amp; prevChildren[name];</div><div class="line">      var nextChild = nextChildren[name];</div><div class="line">      if (prevChild === nextChild) &#123;</div><div class="line">          // 同一个引用，说明是使用的同一个component,所以我们需要做移动的操作</div><div class="line">          // 移动已有的子节点</div><div class="line">          // NOTICE：这里根据nextIndex, lastIndex决定是否移动</div><div class="line">        updates = enqueue(</div><div class="line">          updates,</div><div class="line">          this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)</div><div class="line">        );</div><div class="line">        </div><div class="line">        // 更新lastIndex</div><div class="line">        lastIndex = Math.max(prevChild._mountIndex, lastIndex);</div><div class="line">        // 更新component的.mountIndex属性</div><div class="line">        prevChild._mountIndex = nextIndex;</div><div class="line">        </div><div class="line">      &#125; else &#123;</div><div class="line">        if (prevChild) &#123;</div><div class="line">          // 更新lastIndex</div><div class="line">          lastIndex = Math.max(prevChild._mountIndex, lastIndex);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 添加新的子节点在指定的位置上</div><div class="line">        updates = enqueue(</div><div class="line">          updates,</div><div class="line">          this._mountChildAtIndex(</div><div class="line">            nextChild,</div><div class="line">            mountImages[nextMountIndex],</div><div class="line">            lastPlacedNode,</div><div class="line">            nextIndex,</div><div class="line">            transaction,</div><div class="line">            context</div><div class="line">          )</div><div class="line">        );</div><div class="line">        </div><div class="line">        </div><div class="line">        nextMountIndex++;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      // 更新nextIndex</div><div class="line">      nextIndex++;</div><div class="line">      lastPlacedNode = ReactReconciler.getHostNode(nextChild);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 移除掉不存在的旧子节点，和旧子节点和新子节点不同的旧子节点</div><div class="line">    for (name in removedNodes) &#123;</div><div class="line">      if (removedNodes.hasOwnProperty(name)) &#123;</div><div class="line">        updates = enqueue(</div><div class="line">          updates,</div><div class="line">          this._unmountChild(prevChildren[name], removedNodes[name])</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>react的优点总结：</p>
<ul>
<li>虚拟节点。在UI方面，不需要立刻更新视图，而是生成虚拟DOM后统一渲染。</li>
<li>组件机制。各个组件独立管理,层层嵌套，互不影响，react内部实现的渲染功能。</li>
<li>差异算法。根据基本元素的key值，判断是否递归更新子节点，还是删除旧节点，添加新节点。</li>
</ul>]]></content>
    
    <summary type="html">
    
      深入理解React Native页面构建渲染原理
    
    </summary>
    
      <category term="React Native" scheme="http://code.youmeek.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://code.youmeek.com/tags/React-Native/"/>
    
      <category term="前端" scheme="http://code.youmeek.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Android渲染机制</title>
    <link href="http://code.youmeek.com/2016/10/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>http://code.youmeek.com/2016/10/13/深入理解Android渲染机制/</id>
    <published>2016-10-12T16:00:00.000Z</published>
    <updated>2017-03-23T07:06:12.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>CPU</strong>: 中央处理器,它集成了运算,缓冲,控制等单元,包括绘图功能.CPU将对象处理为多维图形,纹理(Bitmaps、Drawables等都是一起打包到统一的纹理)。</p>
<p><strong>GPU</strong>:一个类似于CPU的专门用来处理Graphics的处理器, 作用用来帮助加快格栅化操作,当然,也有相应的缓存数据(例如缓存已经光栅化过的bitmap等)机制。</p>
<p><strong>OpenGL ES</strong>：是手持嵌入式设备的3DAPI,跨平台的、功能完善的2D和3D图形应用程序接口API,有一套固定渲染管线流程. <a href="http://blog.csdn.net/xiangzhihong8/article/details/62893357" target="_blank" rel="external">OpenGL ES详解</a></p>
<p><strong>DisplayList</strong> 在Android把XML布局文件转换成GPU能够识别并绘制的对象。这个操作是在DisplayList的帮助下完成的。DisplayList持有所有将要交给GPU绘制到屏幕上的数据信息。</p>
<p><strong>格栅化</strong> 是 将图片等矢量资源,转化为一格格像素点的像素图,显示到屏幕上。</p>
<p><strong>垂直同步VSYNC</strong>:让显卡的运算和显示器刷新率一致以稳定输出的画面质量。它告知GPU在载入新帧之前，要等待屏幕绘制完成前一帧。下面的三张图分别是GPU和硬件同步所发生的情况,Refresh Rate:屏幕一秒内刷新屏幕的次数,由硬件决定,例如60Hz.而Frame Rate:GPU一秒绘制操作的帧数,单位是30fps,正常情况过程图如下：<br><img src="http://img.blog.csdn.net/20170318125548061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h1 id="渲染机制分析"><a href="#渲染机制分析" class="headerlink" title="渲染机制分析"></a>渲染机制分析</h1><h2 id="渲染流程简介"><a href="#渲染流程简介" class="headerlink" title="渲染流程简介"></a>渲染流程简介</h2><p>Android整体的绘制流程如下：<br>UI对象—-&gt;CPU处理为多维图形,纹理 —–通过OpeGL ES接口调用GPU—-&gt; GPU对图进行光栅化(Frame Rate ) —-&gt;硬件时钟(Refresh Rate)—-垂直同步—-&gt;投射到屏幕</p>
<p><img src="http://img.blog.csdn.net/20170318131012037?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>Android系统每隔16ms发出VSYNC信号(1000ms/60=16.66ms)，触发对UI进行渲染， 如果每次渲染都成功，这样就能够达到流畅的画面所需要的60fps，为了能够实现60fps，这意味着计算渲染的大多数操作都必须在16ms内完成。</p>
<h3 id="渲染时间线"><a href="#渲染时间线" class="headerlink" title="渲染时间线"></a>渲染时间线</h3><p><img src="http://img.blog.csdn.net/20170318131416790?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170318131615259?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>正常情况下Android的GPU会在16ms完成页面的绘制，如果一帧画面渲染时间超过16ms的时候,垂直同步机制会让显示器硬件 等待GPU完成栅格化渲染操作,然后再次绘制界面，这样就会看起来画面停顿。</p>
<p>当GPU渲染速度过慢,就会导致如下情况,某些帧显示的画面内容就会与上一帧的画面相同。</p>
<p><img src="http://img.blog.csdn.net/20170318132055924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="渲染常见问题"><a href="#渲染常见问题" class="headerlink" title="渲染常见问题"></a>渲染常见问题</h2><h3 id="GPU过度绘制"><a href="#GPU过度绘制" class="headerlink" title="GPU过度绘制"></a>GPU过度绘制</h3><p>OverDraw是开发中常见的优化点，是指一个界面出现层层绘制的情况，如：<br><img src="http://img.blog.csdn.net/20170318132444577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们可以使用一些第三方工具来查看是否过渡绘制。如小米魅族。</p>
<p><img src="http://img.blog.csdn.net/20170318134753149?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>任何时候View中的绘制内容发生变化时，都会重新执行创建DisplayList，渲染DisplayList，更新到屏幕上等一 系列操作。这个流程的表现性能取决于你的View的复杂程度，View的状态变化以及渲染管道的执行性能。</p>
<p>当View的大小发生改变,DisplayList就会重新创建,然后再渲染,而当View发生位移,则DisplayList不会重新创建,而是执行重新渲染的操作。<br>所以当界面过于复杂的时候，DisplayList绘制界面就会出现延迟而造成卡顿。</p>
<p>我们可以使用渲染工具检测，工具中,不同手机呈现方式可能会有差别.分别关于StatusBar，NavBar，激活的程序Activity区域的GPU Rending信息。激活的程序Activity区域的GPU Rending信息。</p>
<p>我们打开手机的GPU Rending呈现的信息，我们以魅族为例：<br><img src="http://img.blog.csdn.net/20170320153809760?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170318145401448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>说明：每一条柱状线都包含三部分，<br>蓝色代表测量绘制Display List的时间，<br>红色代表OpenGL渲染Display List所需要的时间，<br>黄色代表CPU等待GPU处理的时间。</p>
<h1 id="Android渲染优化"><a href="#Android渲染优化" class="headerlink" title="Android渲染优化"></a>Android渲染优化</h1><p>读懂Android的渲染机制对于优化，特别是在写布局的时候是很有帮助的。减少布局层级，减少GPU的渲染这对我们提供app的质量是很有帮助的。</p>
<h4 id="去掉不必要的界面："><a href="#去掉不必要的界面：" class="headerlink" title="去掉不必要的界面："></a>去掉不必要的界面：</h4><p><img src="http://img.blog.csdn.net/20170318150217499?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="布局层级优化"><a href="#布局层级优化" class="headerlink" title="布局层级优化"></a>布局层级优化</h4><p>使用Hierarchy Viewer工具可以查看界面的层级，关于这块的介绍请查看我之前的博客：<a href="http://blog.csdn.net/xiangzhihong8/article/details/52411976" target="_blank" rel="external">Android布局优化</a></p>
<p><img src="http://img.blog.csdn.net/20170318151736976?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>当然Android在某些系统版本也增加了检测overdraw的工具。如Android 在4。2版本中增加了Debug GPU Overdraw选项，如果你用的是Jelly Bean 4.3 或者 KitKat 设备，在屏幕的左下角会有一个计数展示屏幕overdraw的程度。</p>
<p>另一种查看overdraw的方式是在Debug GPU overdraw菜单里选择“Show Overdraw areas”选项。选择之后，会在app的不同区域覆盖不同的颜色来表示overdraw的次数。比较屏幕上这些不同的颜色，可以快速方便的定位overdraw问题。</p>
<h4 id="图片格式选择"><a href="#图片格式选择" class="headerlink" title="图片格式选择"></a>图片格式选择</h4><p>Android的界面能用png最好是用png了，因为32位的png颜色过渡平滑且支持透明。jpg是像素化压缩过的图片，质量已经下降了，再拿来做9path的按钮和平铺拉伸的控件必然惨不忍睹，要尽量避免。有条件的可以选择webpp，这种格式的图片占据的大小比较小，并且能满足手机显示的需要。</p>
<h4 id="当背景无法避免-尽量用Color-TRANSPARENT"><a href="#当背景无法避免-尽量用Color-TRANSPARENT" class="headerlink" title="当背景无法避免,尽量用Color.TRANSPARENT"></a>当背景无法避免,尽量用Color.TRANSPARENT</h4><p>因为透明色Color.TRANSPARENT是不会被渲染的,他是透明的。<br>所以我们在设置界面的时候需要做一个判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Bean bean=list.get(i);</div><div class="line"> if (bean.img == 0) &#123;</div><div class="line">            Picasso.with(getContext()).load(android.R.color.transparent).into(holder.imageView);</div><div class="line">            holder.imageView.setBackgroundColor(bean.backPic);</div><div class="line">        &#125; else &#123;</div><div class="line">            Picasso.with(getContext()).load(bean.img).into(holder.imageView);</div><div class="line">            holder.imageView.setBackgroundColor(Color.TRANSPARENT);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      深入理解Android渲染机制
    
    </summary>
    
      <category term="android" scheme="http://code.youmeek.com/categories/android/"/>
    
    
      <category term="android" scheme="http://code.youmeek.com/tags/android/"/>
    
      <category term="深入理解" scheme="http://code.youmeek.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Android仿网易云音乐播放界面</title>
    <link href="http://code.youmeek.com/2016/10/08/%E9%AB%98%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>http://code.youmeek.com/2016/10/08/高仿网易云音乐/</id>
    <published>2016-10-07T16:00:00.000Z</published>
    <updated>2017-03-02T11:54:46.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>网易云音乐是一款非常优秀的音乐播放器，尤其是播放界面，使用唱盘机风格，显得格外古典优雅。这里抛砖引玉，原文地址：<a href="http://www.jianshu.com/p/cb54990219d9" target="_blank" rel="external">http://www.jianshu.com/p/cb54990219d9</a><br>首先来看一下网易的播放效果。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-8676c6c0d84f8eec.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>要实现上面的功能，我们需要对界面进行一个拆分，拆分后大概包含如下结构：</p>
<ul>
<li>主界面布局设计</li>
<li>唱盘布局设计</li>
<li>动态布局</li>
<li>唱盘控件DiscView对外接口及方法</li>
<li>音乐状态控制时序图<h1 id="分析及实现"><a href="#分析及实现" class="headerlink" title="分析及实现"></a>分析及实现</h1><h2 id="主界面布局设计"><a href="#主界面布局设计" class="headerlink" title="主界面布局设计"></a>主界面布局设计</h2>主界面布局从上到下可以划分几大区域，如图：<br><img src="http://upload-images.jianshu.io/upload_images/3240261-0c5befe60db210e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>如图，由上到下主要分为：标题栏区、唱盘区域、时长显示区域、播放控制区域。<br><strong>标题栏</strong><br>使用ToolBar实现，字体可能需要自定义。<br><strong>唱盘区域</strong><br>唱盘区域包括唱盘、唱针、底盘、以及实现切换的ViewPager等控件，该布局比较复杂，本案例使用自定义控件实现唱盘区域。<br><strong>时长显示区域</strong><br>使用RelativeLayout作为根布局，进度条使用SeekBar实现。<br><strong>播放控制区域</strong><br>比较简单，使用LinearLayout作为根布局。<h2 id="唱盘布局实现（难点）"><a href="#唱盘布局实现（难点）" class="headerlink" title="唱盘布局实现（难点）"></a>唱盘布局实现（难点）</h2>唱盘区域由控件DiscView实现，以RelativeLayout为根布局，子控件包括：底盘、唱针、ViewPager等。其中，底盘和唱针均用ImageView实现，然后使用ViewPager加载ImageView实现唱片的切换。如图：<br><img src="http://upload-images.jianshu.io/upload_images/3240261-b7b82827b035741f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>唱片布局如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?ml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;com.achillesl.neteasedisc.widget.DiscView</div><div class="line">    mlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--底盘--&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/ivDiscBlackgound&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;!--ViewPager实现唱片切换--&gt;</div><div class="line">    &lt;android.support.v4.view.ViewPager</div><div class="line">        android:id=&quot;@+id/vpDiscContain&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;!--唱针--&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/ivNeedle&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:src=&quot;@drawable/ic_needle&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/com.achillesl.neteasedisc.widget.DiscView&gt;</div></pre></td></tr></table></figure>
<p>这里面涉及到一个DiscView类，这个是一个复合类，我们来看一些主要的功能。<br>唱盘控件DiscView提供一个接口IPlayInfo，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public interface IPlayInfo &#123;</div><div class="line">    /*用于更新标题栏变化*/</div><div class="line">    void onMusicInfoChanged(String musicName, String musicAuthor);</div><div class="line">    /*用于更新背景图片*/</div><div class="line">    void onMusicPicChanged(int musicPicRes);</div><div class="line">    /*用于更新音乐播放状态*/</div><div class="line">    void onMusicChanged(MusicChangedStatus musicChangedStatus);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这上面定义的三个函数作用：　分别用于更新标题栏（音乐名、作者名）、更新背景图片以及控制音乐播放状态（播放、暂停、上/下一首等）。<br>点击主界面播放/暂停、上/下一首按钮时，调用DiscView暴露的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onClick(View v) &#123;</div><div class="line">    if (v == mIvPlayOrPause) &#123;</div><div class="line">        mDisc.playOrPause();</div><div class="line">    &#125; else if (v == mIvNet) &#123;</div><div class="line">        mDisc.net();</div><div class="line">    &#125; else if (v == mIvLast) &#123;</div><div class="line">        mDisc.last();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当主界面收到DiscView回调时，调用相关方法控制音乐播放，这样逻辑就会很清晰，各分职责：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public void onMusicChanged(MusicChangedStatus musicChangedStatus) &#123;</div><div class="line">    switch (musicChangedStatus) &#123;</div><div class="line">        case PLAY:&#123;</div><div class="line">            play();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case PAUSE:&#123;</div><div class="line">            pause();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case NET:&#123;</div><div class="line">            net();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case LAST:&#123;</div><div class="line">            last();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case STOP:&#123;</div><div class="line">            stop();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="音乐状态控制时序图"><a href="#音乐状态控制时序图" class="headerlink" title="音乐状态控制时序图"></a>音乐状态控制时序图</h2><p><img src="http://upload-images.jianshu.io/upload_images/3240261-9159b69ee9ab13a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>音乐控制状态时序如图3-3所示，点击Activity的按钮时，先调用DiscView的相关方法，并在合适的时机（如动画结束）再将状态回调到Activity，并通过广播发送指令到Service，实现音乐状态切换，最后通过广播更新UI状态。<br>这个状态的切换只有你仔细观察就会明白它的流程了。项目架构介绍到这里，接下来是部分视觉效果以及设计思路的介绍和项目的一些难点介绍。</p>
<h2 id="解决加载大图OOM问题"><a href="#解决加载大图OOM问题" class="headerlink" title="解决加载大图OOM问题"></a>解决加载大图OOM问题</h2><p>解决大图加载一般有几种方案：</p>
<ol>
<li>设置largeHeap为true。</li>
<li>根据图片类型选定解码格式。</li>
<li>根据原始图片宽高及目标显示宽高，设置图片采样率。</li>
</ol>
<p>根据实际经验我们一般采用后两种，第一种虽然通过增加堆内存来延缓了oom的时机，但是治标不治本。这里我们整理一个类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private Bitmap getMusicPicBitmap(int musicPicSize, int musicPicRes) &#123;</div><div class="line">    BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">    options.inJustDecodeBounds = true;</div><div class="line"></div><div class="line">    BitmapFactory.decodeResource(getResources(),musicPicRes,options);</div><div class="line">    int imageWidth = options.outWidth;</div><div class="line"></div><div class="line">    int sample = imageWidth / musicPicSize;</div><div class="line">    int dstSample = 1;</div><div class="line">    if (sample &gt; dstSample) &#123;</div><div class="line">        dstSample = sample;</div><div class="line">    &#125;</div><div class="line">    options.inJustDecodeBounds = false;</div><div class="line">    //设置图片采样率</div><div class="line">    options.inSampleSize = dstSample;</div><div class="line">    //设置图片解码格式</div><div class="line">    options.inPreferredConfig = Bitmap.Config.RGB_565;</div><div class="line"></div><div class="line">    return Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),</div><div class="line">            musicPicRes, options), musicPicSize, musicPicSize, true);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我相信有过几年Java开发经验或Android经验的人都会知道这么一个常识：首先设置options.inJustDecodeBounds = true，这样BitmapFactory.decodeResource的时候仅仅会加载图片的一些信息，然后通过options.outWidth获取到图片的宽度，根据目标图片尺寸算出采样率。最后通过inPreferredConfig设置解码格式，才正式加载图片，这样有效的避免了图片的oom。</p>
<h2 id="生成圆图最简单方式"><a href="#生成圆图最简单方式" class="headerlink" title="生成圆图最简单方式"></a>生成圆图最简单方式</h2><p>以前我们使用圆圈一般会自定义一个View，然后实现onDraw()，不过Android在android.support.v4.graphics.drawable 里面为我们实现了一个类RoundedBitmapDrawable。使用如下，我们可以对其做一个简单的封装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private Drawable getDiscBlackgroundDrawable() &#123;</div><div class="line">    int discSize = (int) (mScreenWidth * DisplayUtil.SCALE_DISC_SIZE);</div><div class="line">    Bitmap bitmapDisc = Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R</div><div class="line">            .drawable.ic_disc_blackground), discSize, discSize, false);</div><div class="line">    RoundedBitmapDrawable roundDiscDrawable = RoundedBitmapDrawableFactory.create</div><div class="line">            (getResources(), bitmapDisc);</div><div class="line">    return roundDiscDrawable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用LayerDrawable进行图片合成"><a href="#使用LayerDrawable进行图片合成" class="headerlink" title="使用LayerDrawable进行图片合成"></a>使用LayerDrawable进行图片合成</h2><p><strong>LayerDrawable介绍</strong><br>　　LayerDrawable也可包含一个Drawable数组，因此系统将会按这些Drawable对象的数组顺序来绘制它们，索引最大的Drawable对象将会被绘制在最上面。 LayerDrawable有点类似PhotoShop图层的概念。<br>      我们在分析唱片布局的时候发现原View包含两个ImageView，估计是一个用来显示唱盘，一个用来显示专辑图片。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-dfd9f29c282b6b25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>使用LayerDrawable生成复合图片代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">private Drawable getDiscDrawable(int musicPicRes) &#123;</div><div class="line">    int discSize = (int) (mScreenWidth * DisplayUtil.SCALE_DISC_SIZE);</div><div class="line">    int musicPicSize = (int) (mScreenWidth * DisplayUtil.SCALE_MUSIC_PIC_SIZE);</div><div class="line"></div><div class="line">    Bitmap bitmapDisc = Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(), R</div><div class="line">            .drawable.ic_disc), discSize, discSize, false);</div><div class="line">    Bitmap bitmapMusicPic = getMusicPicBitmap(musicPicSize,musicPicRes);</div><div class="line">    BitmapDrawable discDrawable = new BitmapDrawable(bitmapDisc);</div><div class="line">    RoundedBitmapDrawable roundMusicDrawable = RoundedBitmapDrawableFactory.create</div><div class="line">            (getResources(), bitmapMusicPic);</div><div class="line"></div><div class="line">    //抗锯齿</div><div class="line">    discDrawable.setAntiAlias(true);</div><div class="line">    roundMusicDrawable.setAntiAlias(true);</div><div class="line"></div><div class="line">    Drawable[] drawables = new Drawable[2];</div><div class="line">    drawables[0] = roundMusicDrawable;</div><div class="line">    drawables[1] = discDrawable;</div><div class="line"></div><div class="line">    LayerDrawable layerDrawable = new LayerDrawable(drawables);</div><div class="line">    int musicPicMargin = (int) ((DisplayUtil.SCALE_DISC_SIZE - DisplayUtil</div><div class="line">            .SCALE_MUSIC_PIC_SIZE) * mScreenWidth / 2);</div><div class="line">    //调整专辑图片的四周边距</div><div class="line">    layerDrawable.setLayerInset(0, musicPicMargin, musicPicMargin, musicPicMargin,</div><div class="line">            musicPicMargin);</div><div class="line"></div><div class="line">    return layerDrawable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　在上面代码中，我们先生成了唱盘对象BitmapDrawable，然后通过RoundedBitmapDrawable生成圆形专辑图片，然后存放到Drawable[]数组中，并用来初始化LayerDrawable对象。最后，我们用setLayerInset方法调整专辑图片的四周边距，让它显示在唱盘正中。</p>
<h2 id="实现背景毛玻璃效果"><a href="#实现背景毛玻璃效果" class="headerlink" title="实现背景毛玻璃效果"></a>实现背景毛玻璃效果</h2><p>这个网上的资料很多，也有基于JNI实现的，这个使用JNI实现可以看一下我之前的博客<a href="http://www.jianshu.com/p/f8463b3bbffb" target="_blank" rel="external">JNI实现毛玻璃效果</a>，这里为了方便大家使用，我就直接使用工具类的方式，关于模糊化的实现逻辑大家可以搜索一下“BlurUtil”，考虑到这部分代码可能会阻塞UI线程，因此将其放着单独线程中执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private void try2UpdateMusicPicBackground(final int musicPicRes) &#123;</div><div class="line">    if (mRootLayout.isNeed2UpdateBackground(musicPicRes)) &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                final Drawable foregroundDrawable = getForegroundDrawable(musicPicRes);</div><div class="line">                runOnUiThread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        mRootLayout.setForeground(foregroundDrawable);</div><div class="line">                        mRootLayout.beginAnimation();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用LayerDrawable与属性动画，实现背景切换时渐变效果"><a href="#使用LayerDrawable与属性动画，实现背景切换时渐变效果" class="headerlink" title="使用LayerDrawable与属性动画，实现背景切换时渐变效果"></a>使用LayerDrawable与属性动画，实现背景切换时渐变效果</h2><p>仔细观察网易云音乐，发现切换歌曲时，背景图也会随着变化。其实这种也很好做，可以使用LayerDrawable加属性动画来实现。<br>　思路如下：<br>　　1. 给LayerDrawable设置两个图层，第一图层是前一个背景，第二图层是准备显示的背景。<br>　　2. 先把准备显示的背景透明度设为0，因此完全透明，此时只显示前一个背景图。<br>　　3. 通过属性动画，动态将第二图层的透明度从0调整至100，并不断更新控件的背景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public class BackgourndAnimationRelativeLayout etends RelativeLayout</div><div class="line"></div><div class="line">//初始化LayerDrawable对象</div><div class="line">private void initLayerDrawable() &#123;</div><div class="line">    Drawable backgroundDrawable = getContet().getDrawable(R.drawable.ic_blackground);</div><div class="line">    Drawable[] drawables = new Drawable[2];</div><div class="line"></div><div class="line">    /*初始化时先将前景与背景颜色设为一致*/</div><div class="line">    drawables[INDE_BACKGROUND] = backgroundDrawable;</div><div class="line">    drawables[INDE_FOREGROUND] = backgroundDrawable;</div><div class="line"></div><div class="line">    layerDrawable = new LayerDrawable(drawables);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void initObjectAnimator() &#123;</div><div class="line">    objectAnimator = ObjectAnimator.ofFloat(this, &quot;number&quot;, 0f, 1.0f);</div><div class="line">    objectAnimator.setDuration(DURATION_ANIMATION);</div><div class="line">    objectAnimator.setInterpolator(new AccelerateInterpolator());</div><div class="line">    objectAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            int foregroundAlpha = (int) ((float) animation.getAnimatedValue() * 255);</div><div class="line">            /*动态设置Drawable的透明度，让前景图逐渐显示*/</div><div class="line">            layerDrawable.getDrawable(INDE_FOREGROUND).setAlpha(foregroundAlpha);</div><div class="line">            BackgourndAnimationRelativeLayout.this.setBackground(layerDrawable);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    objectAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationStart(Animator animation) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onAnimationEnd(Animator animation) &#123;</div><div class="line">            /*动画结束后，记得将原来的背景图及时更新*/</div><div class="line">            layerDrawable.setDrawable(INDE_BACKGROUND, layerDrawable.getDrawable(</div><div class="line">                    INDE_FOREGROUND));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onAnimationCancel(Animator animation) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onAnimationRepeat(Animator animation) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//对外提供方法，用于播放渐变动画</div><div class="line">public void beginAnimation() &#123;</div><div class="line">    objectAnimator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="唱针变化逻辑"><a href="#唱针变化逻辑" class="headerlink" title="唱针变化逻辑"></a>唱针变化逻辑</h2><p>我们来看一下唱针的变化，为了真实的模拟真实的场景，唱针主要有以下状态：</p>
<ul>
<li>初始状态为暂停/停止时，点击播放按钮，此时唱针移动到底部。</li>
<li>初始状态为播放时，点击暂停按钮，此时唱针移到顶部。</li>
<li>初始状态为播放时，手指按住唱盘并稍微偏移，等唱针未移到顶部时，立刻松开手指，此时唱针回到顶部后立刻再回到唱盘位置。</li>
<li>初始状态为暂停/停止时，点击播放，此时唱针往下移动，当唱针还未移到底部，手指马上按住唱盘并偏移，此时唱针立刻往顶部移动。</li>
<li>初始状态为播放/暂停/停止时，左右滑动唱片进行音乐切换，唱针动画未结束时，立刻点击上/下一首按钮，进行音乐切换，此时唱针状态不能出现混乱。</li>
</ul>
<p>初始状态为暂停/停止时，点击播放按钮，此时唱针移动到底部。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-1ea7e25a1139f8e0.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>初始状态为播放时，点击暂停按钮，此时唱针移到顶部。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-d298744c7a9553a2.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>初始状态为播放时，手指按住唱盘并稍微偏移，等唱针未移到顶部时，立刻松开手指，此时唱针回到顶部后立刻再回到唱盘位置。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-d10a9206b303c189.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>初始状态为暂停/停止时，点击播放，此时唱针往下移动，当唱针还未移到底部，手指马上按住唱盘并偏移，此时唱针立刻往顶部移动。<br><a href="http://upload-images.jianshu.io/upload_images/3240261-bc47abb2298a5c36.gif?imageMogr2/auto-orient/strip" target="_blank" rel="external">这里写链接内容</a><br>初始状态为播放/暂停/停止时，左右滑动唱片进行音乐切换，唱针动画未结束时，立刻点击上/下一首按钮，进行音乐切换，此时唱针状态不能出现混乱，反复做了步骤1的动作。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-7ae16da08ca69c62.gif?imageMogr2/auto-orient/strip" alt="这里写图片描述"><br>我们队上面的图片仔细分析，然后结合ViewPager的原理我们来看看。<br><img src="http://upload-images.jianshu.io/upload_images/3240261-e99e774172afd536.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"><br>唱片(即ViewPager)的状态可以通过PageChangeListener得到。唱针的状态，笔者用枚举来表示，并且在动画的开始、结束时对唱针状态及时更新。那么我们很容易就想到case或者枚举。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private enum NeedleAnimatorStatus &#123;</div><div class="line">       /*移动时：从唱盘往远处移动*/</div><div class="line">       TO_FAR_END,</div><div class="line">       /*移动时：从远处往唱盘移动*/</div><div class="line">       TO_NEAR_END,</div><div class="line">       /*静止时：离开唱盘*/</div><div class="line">       IN_FAR_END,</div><div class="line">       /*静止时：贴近唱盘*/</div><div class="line">       IN_NEAR_END</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>动画开始时，更新唱针状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onAnimationStart(Animator animator) &#123;</div><div class="line">    /**</div><div class="line">     *根据动画开始前NeedleAnimatorStatus的状态，</div><div class="line">     *即可得出动画进行时NeedleAnimatorStatus的状态</div><div class="line">     **/</div><div class="line">    if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR_END) &#123;</div><div class="line">        needleAnimatorStatus = NeedleAnimatorStatus.TO_NEAR_END;</div><div class="line">    &#125; else if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR_END) &#123;</div><div class="line">        needleAnimatorStatus = NeedleAnimatorStatus.TO_FAR_END;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动画结束时，更新唱针状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onAnimationEnd(Animator animator) &#123;</div><div class="line">    if (needleAnimatorStatus == NeedleAnimatorStatus.TO_NEAR_END) &#123;</div><div class="line">        needleAnimatorStatus = NeedleAnimatorStatus.IN_NEAR_END;</div><div class="line">        int inde = mVpContain.getCurrentItem();</div><div class="line">        playDiscAnimator(inde);</div><div class="line">    &#125; else if (needleAnimatorStatus == NeedleAnimatorStatus.TO_FAR_END) &#123;</div><div class="line">        needleAnimatorStatus = NeedleAnimatorStatus.IN_FAR_END;</div><div class="line">    &#125;</div><div class="line">｝</div></pre></td></tr></table></figure>
<p>每种状态都定义清楚，每个动画负责的功能都拆分这样写起来就比较清楚了。<br>　比如需要播放动画时，就包含两个状态：　</p>
<ul>
<li>唱针动画暂停中，唱针处于远端。</li>
<li><p>唱针动画播放中，唱针处于从近端往远端移动</p>
<p>那么我们调用代码的时候就这么用：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*播放动画*/</div><div class="line">private void playAnimator() &#123;</div><div class="line">    /*唱针处于远端时，直接播放动画*/</div><div class="line">    if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR_END) &#123;</div><div class="line">        mNeedleAnimator.start();</div><div class="line">    &#125; </div><div class="line">    /*唱针处于往远端移动时，设置标记，等动画结束后再播放动画*/</div><div class="line">    else if (needleAnimatorStatus == NeedleAnimatorStatus.TO_FAR_END) &#123;</div><div class="line">        mIsNeed2StartPlayAnimator = true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于其他的比较跨组件的界面更新，一般会使用广播，大家也可以使用事件总线（EventBus）.<br>附上源码，这里可能需要大家自己编译。<br>附：<a href="https://github.com/AchillesLzg/jianshu-neteasedisc" target="_blank" rel="external">仿网易云音乐界面源码</a></p>]]></content>
    
    <summary type="html">
    
      Android仿网易云音乐播放界面
    
    </summary>
    
      <category term="Android" scheme="http://code.youmeek.com/categories/Android/"/>
    
    
      <category term="高仿" scheme="http://code.youmeek.com/tags/%E9%AB%98%E4%BB%BF/"/>
    
  </entry>
  
  <entry>
    <title>Android WindowManager详解</title>
    <link href="http://code.youmeek.com/2016/10/05/Android%20WindowManager%E8%AF%A6%E8%A7%A3/"/>
    <id>http://code.youmeek.com/2016/10/05/Android WindowManager详解/</id>
    <published>2016-10-04T16:00:00.000Z</published>
    <updated>2017-01-25T06:24:31.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>WindowManager是Android中一个重要的服务（Service ）。WindowManager Service 是全局的，是唯一的。它将用户的操作，翻译成为指令，发送给呈现在界面上的各个Window。Activity会将顶级的控件注册到 Window Manager 中，<br>当用户真是触碰屏幕或键盘的时候，Window Manager就会通知到，而当控件有一些请求产生，也会经由ViewParent送回到Window Manager中。从而完成整个通信流程。<br>整个Android的窗口机制是基于一个叫做 WindowManager，这个接口可以添加view到屏幕，也可以从屏幕删除view。它面向的对象一端是屏幕，另一端就是View，通过WindowManager的 addView方法创建View，这样产生出来的View根据<br>WindowManager.LayoutParams属性不同，效果也就不同了。比如创建 系统顶级窗口，实现悬浮窗口效果！WindowManager的方法很简单，基本用到的就三addView，removeView，updateViewLayout。接口，而WindowManager.LayoutParams的属性就多了，后面为大家一一详解。</p>
<h2 id="WindowManager小实例"><a href="#WindowManager小实例" class="headerlink" title="WindowManager小实例"></a>WindowManager小实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Button bb=new Button(getApplicationContext());  </div><div class="line">WindowManager wmManager=(WindowManager) getSystemService(Context.WINDOW_SERVICE);  </div><div class="line">WindowManager.LayoutParams wmParams = new WindowManager.LayoutParams();  </div><div class="line"></div><div class="line">       wmParams.type=2002;   </div><div class="line">       wmParams.format=1;  </div><div class="line">       </div><div class="line">       wmParams.flags=40;  </div><div class="line">       wmParams.width=40;  </div><div class="line">       wmParams.height=40;  </div><div class="line">         </div><div class="line">       wmManager.addView(bb, wmParams);</div></pre></td></tr></table></figure>
<p>解释：创建了一个Button对象然后通过WindowManager实例对象的addView添加这个ButtonVIew并根据相应的LayoutParams参数进行显示。</p>
<h1 id="WindowManager属性详解"><a href="#WindowManager属性详解" class="headerlink" title="WindowManager属性详解"></a>WindowManager属性详解</h1><p><strong>继承关系</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.lang.Object</div><div class="line">   ↳android.view.ViewGroup.LayoutParams</div><div class="line">       ↳android.view.WindowManager.LayoutParams</div></pre></td></tr></table></figure>
<p><strong>继承来的属性与常量</strong><br>从 ViewManager.LayoutParams 继承来的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android:layout_height</div><div class="line">        Specifies the basic height of the view.</div><div class="line"></div><div class="line">   android:layout_width</div><div class="line">        Specifies the basic width of the view.</div></pre></td></tr></table></figure>
<p>从 ViewManager.LayoutParams继承的常量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FILL_PARENT</div><div class="line">    WRAP_CONTENT</div><div class="line">    MATCH_PARENT</div></pre></td></tr></table></figure>
<h2 id="其他可用的常量定义"><a href="#其他可用的常量定义" class="headerlink" title="其他可用的常量定义"></a>其他可用的常量定义</h2><p><strong>public int x;</strong><br>如果忽略gravity属性，那么它表示窗口的绝对X位置。<br>当设置了 Gravity.LEFT 或 Gravity.RIGHT 之后，x值就表示到特定边的距离。</p>
<p><strong>public int y;</strong><br>如果忽略gravity属性，那么它表示窗口的绝对Y位置。<br>当设置了 Gravity.TOP 或 Gravity.BOTTOM 之后，y值就表示到特定边的距离。</p>
<p><strong>public float horizontalWeight/public float verticalWeight;</strong><br>在纵/横向上，为关联的view预留了多少扩展空间（像素）。如果是0，那么此view不能被拉伸。其他情况下，扩展空间（像素）将被widget所均分。</p>
<p><strong>public int type;</strong><br>窗口类型。有3种主要类型：<br> a)Applicationwindows：<br>        取值在 FIRST_APPLICATION_WINDOW 和 LAST_APPLICATION_WINDOW 之间。<br>        是通常的、顶层的应用程序窗口。必须将 token 设置成 activity 的 token 。</p>
<p>b)Sub_windows：<br>        取值在 FIRST_SUB_WINDOW 和 LAST_SUB_WINDOW 之间。<br>        与顶层窗口相关联，token 必须设置为它所附着的宿主窗口的 token。</p>
<p>c)Systemwindows：<br>        取值在 FIRST_SYSTEM_WINDOW 和 LAST_SYSTEM_WINDOW 之间。<br>        用于特定的系统功能。它不能用于应用程序，使用时需要特殊权限。</p>
<p><strong>public int memoryType;</strong><br>   指出窗口所使用的内存缓冲类型。默认为 NORMAL 。</p>
<p>下面定义了 memoryType 的取值：<br>窗口缓冲位于主内存。<br>public static final int MEMORY_TYPE_NORMAL = 0;</p>
<p>窗口缓冲位于可以被DMA访问，或者硬件加速的内存区域。<br>public static final int MEMORY_TYPE_HARDWARE = 1;</p>
<p>窗口缓冲位于可被图形加速器访问的区域。<br>public static final int MEMORY_TYPE_GPU = 2;</p>
<p>窗口缓冲不拥有自己的缓冲区，不能被锁定。缓冲区由本地方法提供。<br>public static final int MEMORY_TYPE_PUSH_BUFFERS = 3;</p>
<p><strong>public int flags</strong><br>行为选项/旗标，默认为 none .<br>下面定义了 flags 的取值：<br>窗口之后的内容变暗。<br>public static final int FLAG_DIM_BEHIND       = 0x00000002;</p>
<p>窗口之后的内容变模糊。<br>public static final int FLAG_BLUR_BEHIND       = 0x00000004;</p>
<p>不许获得焦点。<br>public static final int FLAG_NOT_FOCUSABLE     = 0x00000008;</p>
<p>不接受触摸屏事件。<br>public static final int FLAG_NOT_TOUCHABLE     = 0x00000010;</p>
<p>当窗口可以获得焦点（没有设置 FLAG_NOT_FOCUSALBE 选项）时，仍然将窗口范围之外的点设备事件（鼠标、触摸屏）发送给后面的窗口处理。否则它将独占所有的点设备事件，而不管它们是不是发生在窗口范围内。<br>public static final int FLAG_NOT_TOUCH_MODAL   = 0x00000020;</p>
<p> 如果设置了这个标志，当设备休眠时，点击触摸屏，设备将收到这个第一触摸事件。通常第一触摸事件被系统所消耗，用户不会看到他们点击屏幕有什么反应。<br>public static final int FLAG_TOUCHABLE_WHEN_WAKING = 0x00000040;</p>
<p>当此窗口为用户可见时，保持设备常开，并保持亮度不变。<br>public static final int FLAG_KEEP_SCREEN_ON    = 0x00000080;</p>
<p>窗口占满整个屏幕，忽略周围的装饰边框（例如状态栏）。此窗口需考虑到装饰边框的内容。<br>public static final int FLAG_LAYOUT_IN_SCREEN   =0x00000100;</p>
<p>允许窗口扩展到屏幕之外。<br>public static final int FLAG_LAYOUT_NO_LIMITS   =0x00000200;</p>
<p>窗口显示时，隐藏所有的屏幕装饰（例如状态条）。使窗口占用整个显示区域。<br>public static final int FLAG_FULLSCREEN     = 0x00000400;</p>
<p>此选项将覆盖FLAG_FULLSCREEN选项，并强制屏幕装饰（如状态条）弹出。<br>public static final int FLAG_FORCE_NOT_FULLSCREEN   =0x00000800;</p>
<p>抖动。指 对半透明的显示方法。又称“点透”。图形处理较差的设备往往用“点透”替代Alpha混合。<br>public static final int FLAG_DITHER = 0x00001000;</p>
<p>不允许屏幕截图。<br>public static final int FLAG_SECURE           = 0x00002000;</p>
<p>一种特殊模式，布局参数用于指示显示比例。<br>public static final int FLAG_SCALED           = 0x00004000;</p>
<p>当屏幕有可能贴着脸时，这一选项可防止面颊对屏幕造成误操作。<br>public static final int FLAG_IGNORE_CHEEK_PRESSES   = 0x00008000;</p>
<p>当请求布局时，你的窗口可能出现在状态栏的上面或下面，从而造成遮挡。当设置这一选项后，窗口管理器将确保窗口内容不会被装饰条（状态栏）盖住。<br>public static final int FLAG_LAYOUT_INSET_DECOR = 0x00010000;</p>
<p>反转FLAG_NOT_FOCUSABLE选项。<br>如果同时设置了FLAG_NOT_FOCUSABLE选项和本选项，窗口将能够与输入法交互，允许输入法窗口覆盖；      如果FLAG_NOT_FOCUSABLE没有设置而设置了本选项，窗口不能与输入法交互，可以覆盖输入法窗口。<br>public static final int FLAG_ALT_FOCUSABLE_IM = 0x00020000;</p>
<p>如果你设置了FLAG_NOT_TOUCH_MODAL，那么当触屏事件发生在窗口之外事，可以通过设置此标志接收到一个 MotionEvent.ACTION_OUTSIDE事件。注意，你不会收到完整的down/move/up事件，只有第一次down事件时可以收到 ACTION_OUTSIDE。<br>public static final int FLAG_WATCH_OUTSIDE_TOUCH = 0x00040000;</p>
<p>当屏幕锁定时，窗口可以被看到。这使得应用程序窗口优先于锁屏界面。可配合FLAG_KEEP_SCREEN_ON选项点亮屏幕并直接显示在锁屏界面之前。可使用FLAG_DISMISS_KEYGUARD选项直接解除非加锁的锁屏状态。此选项只用于最顶层的全屏幕窗口。      public static final int FLAG_SHOW_WHEN_LOCKED = 0x00080000;</p>
<p>请求系统墙纸显示在你的窗口后面。窗口必须是半透明的。<br>public static final int FLAG_SHOW_WALLPAPER = 0x00100000;</p>
<p>窗口一旦显示出来，系统将点亮屏幕，正如用户唤醒设备那样。<br>public static final int FLAG_TURN_SCREEN_ON = 0x00200000;</p>
<p>解除锁屏。只有锁屏界面不是加密的才能解锁。如果锁屏界面是加密的，那么用户解锁之后才能看到此窗口，除非设置了FLAG_SHOW_WHEN_LOCKED选项。<br>public static final int FLAG_DISMISS_KEYGUARD = 0x00400000;</p>
<p>锁屏界面淡出时，继续运行它的动画。<br>public static final int FLAG_KEEP_SURFACE_WHILE_ANIMATING =0x10000000;</p>
<p>以原始尺寸显示窗口。用于在兼容模式下运行程序。<br>public static final int FLAG_COMPATIBLE_WINDOW = 0x20000000;</p>
<p>用于系统对话框。设置此选项的窗口将无条件获得焦点。<br>public static final int FLAG_SYSTEM_ERROR = 0x40000000;</p>
<p><strong>public int softInputMode</strong>（重要）<br>以下选项与 softInputMode 有关：<br>软输入区域是否可见。<br>public static final int SOFT_INPUT_MASK_STATE = 0x0f;</p>
<p>未指定状态。<br>public static final int SOFT_INPUT_STATE_UNSPECIFIED = 0;</p>
<p>不要修改软输入法区域的状态。<br>public static final int SOFT_INPUT_STATE_UNCHANGED = 1;</p>
<p>隐藏输入法区域（当用户进入窗口时）。<br>public static final int SOFT_INPUT_STATE_HIDDEN = 2;</p>
<p>当窗口获得焦点时，隐藏输入法区域。<br>public static final int SOFT_INPUT_STATE_ALWAYS_HIDDEN = 3;</p>
<p>显示输入法区域（当用户进入窗口时）。<br>public static final int SOFT_INPUT_STATE_VISIBLE = 4;</p>
<p>当窗口获得焦点时，显示输入法区域。<br> public static final int SOFT_INPUT_STATE_ALWAYS_VISIBLE = 5;</p>
<p>窗口应当主动调整，以适应软输入窗口。<br>public static final int SOFT_INPUT_MASK_ADJUST = 0xf0;</p>
<p>未指定状态，系统将根据窗口内容尝试选择一个输入法样式。<br>public static final int SOFT_INPUT_ADJUST_UNSPECIFIED = 0x00;</p>
<p>当输入法显示时，允许窗口重新计算尺寸，使内容不被输入法所覆盖。不可与SOFT_INPUT_ADJUSP_PAN混合使用,如果两个都没有设置，系统将根据窗口内容自动设置一个选项。<br> public static final int SOFT_INPUT_ADJUST_RESIZE = 0x10;</p>
<p>输入法显示时平移窗口。它不需要处理尺寸变化，框架能够移动窗口以确保输入焦点可见。不可与SOFT_INPUT_ADJUST_RESIZE混合使用;如果两个都没设置,系统将根据窗口内容自动设置一个选项。<br> public static final int SOFT_INPUT_ADJUST_PAN = 0x20;</p>
<p>当用户转至此窗口时，由系统自动设置，所以你不要设置它。当窗口显示之后该标志自动清除。<br> public static final int SOFT_INPUT_IS_FORWARD_NAVIGATION = 0x100;</p>
<p><strong>public float horizontalMargin/public float verticalMargin</strong><br>水平边距/ 纵向边距，容器与widget之间的距离，占容器宽度的百分率。</p>
<p><strong>public int windowAnimations</strong><br> 窗口所使用的动画设置。它必须是一个系统资源而不是应用程序资源，因为窗口管理器不能访问应用程序。</p>
<p><strong>public float alpha</strong><br>整个窗口的透明值。</p>
<h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><p>public staticfinal int LAYOUT_CHANGED =1&lt;&lt;0;<br>    public staticfinal int TYPE_CHANGED =1&lt;&lt;1;<br>    public staticfinal int FLAGS_CHANGED =1&lt;&lt;2;<br>    public staticfinal int FORMAT_CHANGED =1&lt;&lt;3;<br>    public staticfinal int ANIMATION_CHANGED =1&lt;&lt;4;<br>    public staticfinal int DIM_AMOUNT_CHANGED =1&lt;&lt;5;<br>    public staticfinal int TITLE_CHANGED =1&lt;&lt;6;<br>    public staticfinal int ALPHA_CHANGED =1&lt;&lt;7;<br>    public staticfinal int MEMORY_TYPE_CHANGED =1&lt;&lt;8;<br>    public staticfinal int SOFT_INPUT_MODE_CHANGED =1&lt;&lt;9;<br>    public staticfinal int SCREEN_ORIENTATION_CHANGED =1&lt;&lt;10;<br>    public staticfinal int SCREEN_BRIGHTNESS_CHANGED =1&lt;&lt;11;</p>
<p>当然还有很多，这里列出了一些常用的。</p>]]></content>
    
    <summary type="html">
    
      WindowManager是Android中一个重要的服务（Service ）。WindowManager Service 是全局的，是唯一的。
    
    </summary>
    
      <category term="Android" scheme="http://code.youmeek.com/categories/Android/"/>
    
      <category term="WindowManager" scheme="http://code.youmeek.com/categories/Android/WindowManager/"/>
    
    
      <category term="Android" scheme="http://code.youmeek.com/tags/Android/"/>
    
      <category term="WindowManager" scheme="http://code.youmeek.com/tags/WindowManager/"/>
    
      <category term="系统服务" scheme="http://code.youmeek.com/tags/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>搭建网站</title>
    <link href="http://code.youmeek.com/2016/10/05/%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
    <id>http://code.youmeek.com/2016/10/05/搭建网站/</id>
    <published>2016-10-04T16:00:00.000Z</published>
    <updated>2017-01-24T08:09:47.897Z</updated>
    
    <content type="html"><![CDATA[<p>环境</p>
<p>Windows 10（64 位）<br>Git-2.7.4-64-bit<br>node-v4.4.7-x64<br>如果上述软件已经安装的，跳过，没有安装的下载安装。<br>1，git下载安装（<a href="https://git-for-windows.github.io/）" target="_blank" rel="external">https://git-for-windows.github.io/）</a></p>
<p>2，node下载安装（<a href="https://nodejs.org/en/）" target="_blank" rel="external">https://nodejs.org/en/）</a></p>
<p>3.安装npm工具（这里可以先不安装，我是之前做RN，所以已经安装好了）<br>4，验证安装是否成功。<br>     为了验证是否安装成功，我们在dos桌面输入如下的命令：<br>     git –version<br>     node -v<br>     npm –v<br>   出现如下表示成功</p>
<p>Github Pages</p>
<p>Github Pages免费的静态站点，其特点：免费托管、自带主题、支持自制页面等。<br>创建Github Pages比较简单，只要你有一个github账号在创建一个仓库就行了，但是这个仓库是有规则的，其格式必须为：yourusername.github.io。然后根据提示一直下一步即可，非常简单。</p>
<p>github项目创建完成，点击“Continue to layouts”，点击发布个人网站，我们网站就好了，不过这是一个github.io结尾的。</p>
<p>Hexo<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。官网也是搭建在GitHub上。在电脑上新建一个blog文件夹,一般放在非c盘（非系统盘），该文件夹用于存放你的博客文件,然后右键单击选择“Git Bash”（你也可以打开hexo官网（<a href="https://hexo.io/zh-cn/）按提示的步骤来）。" target="_blank" rel="external">https://hexo.io/zh-cn/）按提示的步骤来）。</a></p>
<p>•npm install hexo-cli -g<br>•hexo init blog<br>•cd blog<br>•npm install<br>•hexo server</p>
<p>现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令：hexo server<br>现在用浏览器访问：<a href="http://localhost:4000/，效果如下图" target="_blank" rel="external">http://localhost:4000/，效果如下图</a></p>
<p>选用其他主题</p>
<p>由于默认主题太大众了，所以现在我们换个主题。你可以去这里找主题：</p>
<p>exo-theme：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a><br>hexo-github-theme-list：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a><br>有那些好看的hexo主题？：<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">http://www.zhihu.com/question/24422335</a></p>
<p>我这里选择的 yelee：<a href="https://github.com/MOxFIVE/hexo-theme-yelee，如果你自己懂css.js，你可以自己写。输入命令：git" target="_blank" rel="external">https://github.com/MOxFIVE/hexo-theme-yelee，如果你自己懂css.js，你可以自己写。输入命令：git</a> clone <a href="https://github.com/MOxFIVE/hexo-theme-yelee.git" target="_blank" rel="external">https://github.com/MOxFIVE/hexo-theme-yelee.git</a> themes/yelee </p>
<p>找到_config.yml，把对应的主题目录名改下。</p>
<p>修改完成后，我们使用下面命令重新生成静态博客的所有内容：hexo generate，然后重启 hexo 本地服务：hexo server。</p>
<p>部署代码到github pages</p>
<p>创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上，其实也可以不生成本地的ssh，可以直接用命令或者工具上传代码（这个纯命令提交可以参考之前的博客点击打开链接），在 Git Bash 中，输入：ssh-keygen -t rsa -C “你的邮箱地址”，然后回车，回车，再回车，一共 3 次回车。</p>
<p>访问：<a href="https://github.com/settings/ssh，添加新秘钥" target="_blank" rel="external">https://github.com/settings/ssh，添加新秘钥</a></p>
<p>访接下来就是将本地的静态博客部署到gitHub上，要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件，可以实现如下命令：<br>npm install hexo -server –save<br>npm install hexo-deployer-git –save<br>编辑全局 hexo 的配置文件：_config.yml，这块可以参照网上的。<br>编辑全局配置后我们需要重新部署：<br>先清除掉已经生成的旧文件：hexo clean<br>再生成一次静态文件：hexo generate<br>在本地预览下：hexo server<br>本地没问题之后，Ctrl + C 停掉本地预览，使用部署命令部署到 Github 上：hexo deploy，有弹出下面提示框，请输入：yes</p>
<p>然后访问服务器地址进行检查：<a href="http://xiangzhihong.github.io" target="_blank" rel="external">http://xiangzhihong.github.io</a></p>
<p>通过上面几次流程我们也就可以总结：以后，每次发表新文章要部署都按这样的流程来：<br>hexo clean<br>hexo generate<br>hexo deploy<br>github pages绑定域名</p>
<p>绑定域名，这块比较坑，我参照网上很多的都没弄明白，这里是我摸索的一个方法。阿里云（万网）+github域名绑定。<br>购买域名</p>
<p>首先是在阿里云上购买域名，大家也可以上其实的域名交易平台购买。</p>
<p>域名解析</p>
<p>在阿里云管理控制台中,选择【域名】》【域名列表】》【全部域名】中刚刚购买的域名,点击解析按钮<br>这时会提醒你选择解析到阿里云主机,或者其他主机,这时需要将你在Github上创建的Github Pages的域名 xxx.github.io进行查询,得到一个IP地址。<br>admindeMacBook-Pro:blog admin$ ping xxx.github.io<br>PING prod.github.map.fastlylb.net (151.101.100.133): 56 data bytes<br>Request timeout for icmp_seq 0<br>64 bytes from 151.101.100.133: icmp_seq=1 ttl=47 time=69.632 ms</p>
<p>这里需要说明下，这里151.101.100.133是我的github的地址（就是xiangzhihong.github.io地址，你也可以ping自己的xx.github.io）.</p>
<p>如果你不会填，直接点上门的新手引导设置就好了。<br>Github解析</p>
<p>在Github的xxx.github.io项目,进入【Settings】标签页,在【Custom domain】功能中,将刚刚申请的域名写进去。</p>
<p>备注：这里也可以用另一个工具去解析DNSPOD 。<br>设置好后，过一会就可以访问了，反正我的是很快，点击打开链接</p>
<p>整合 IntelliJ IDEA 提高效率<br>为了提交写作效率，我个人建议使用 IntelliJ IDEA 作为 Markdown 编辑工具，这也是前端开发的一个利器。现在我们用 IntelliJ IDEA 打开我们本地目录。</p>
<p>由于 IntelliJ IDEA 在 Windows 下的默认终端是 cmd 不好用，我们现在需要重新修改下 IntelliJ IDEA 的终端工具，把它指向我们习惯的 Git Bash，这样方便操作。</p>
<p>为了更稳定地使用 IntelliJ IDEA，在不修改主题的情况下，我们还需要这样做，hexo 新文章内容的开头需要这样定义：<br>categories：表示文章所属分类<br>tags：表示文章所属标签</p>
<h2 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h2><p>title: 这是文章标题<br>date: 2016-10-25 17:58:27<br>categories: [Hexo,IntelliJ IDEA]</p>
<h2 id="tags-Hexo-IntelliJ-IDEA-Git-Github-Node-js"><a href="#tags-Hexo-IntelliJ-IDEA-Git-Github-Node-js" class="headerlink" title="tags: [Hexo,IntelliJ IDEA,Git,Github,Node.js]"></a>tags: [Hexo,IntelliJ IDEA,Git,Github,Node.js]</h2><p>打开项目的module（快捷键ctrl+shift+alt+s）</p>]]></content>
    
    <summary type="html">
    
      搭建网站
    
    </summary>
    
      <category term="网站" scheme="http://code.youmeek.com/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="个人博客" scheme="http://code.youmeek.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="搭建网站" scheme="http://code.youmeek.com/tags/%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
